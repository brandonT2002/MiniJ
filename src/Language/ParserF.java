
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Language;

import java_cup.runtime.*;
import Painter.WordPainter;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserF extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return TOK.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserF() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserF(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserF(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\235\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\064\002\000" +
    "\002\005\006\000\002\006\006\000\002\006\005\000\002" +
    "\007\005\000\002\007\003\000\002\020\005\000\002\022" +
    "\005\000\002\022\003\000\002\065\002\000\002\023\006" +
    "\000\002\023\003\000\002\024\010\000\002\024\010\000" +
    "\002\024\007\000\002\024\007\000\002\051\003\000\002" +
    "\052\003\000\002\053\003\000\002\010\006\000\002\010" +
    "\004\000\002\066\002\000\002\031\012\000\002\067\002" +
    "\000\002\031\012\000\002\031\007\000\002\054\003\000" +
    "\002\070\002\000\002\032\010\000\002\033\005\000\002" +
    "\033\004\000\002\034\004\000\002\034\003\000\002\034" +
    "\003\000\002\035\004\000\002\035\003\000\002\071\002" +
    "\000\002\037\007\000\002\072\002\000\002\037\007\000" +
    "\002\037\005\000\002\055\003\000\002\073\002\000\002" +
    "\036\006\000\002\074\002\000\002\036\006\000\002\036" +
    "\004\000\002\056\003\000\002\075\002\000\002\042\010" +
    "\000\002\043\007\000\002\043\006\000\002\043\006\000" +
    "\002\043\006\000\002\043\005\000\002\043\005\000\002" +
    "\043\005\000\002\043\004\000\002\044\004\000\002\044" +
    "\003\000\002\047\005\000\002\047\003\000\002\045\005" +
    "\000\002\045\003\000\002\046\003\000\002\046\003\000" +
    "\002\046\003\000\002\076\002\000\002\040\010\000\002" +
    "\077\002\000\002\100\002\000\002\041\013\000\002\101" +
    "\002\000\002\050\006\000\002\025\005\000\002\025\004" +
    "\000\002\026\004\000\002\026\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\004\000\002\027\004\000\002\027\004\000\002\027\004" +
    "\000\002\102\002\000\002\027\006\000\002\103\002\000" +
    "\002\027\005\000\002\104\002\000\002\027\005\000\002" +
    "\105\002\000\002\027\005\000\002\027\003\000\002\030" +
    "\007\000\002\030\006\000\002\057\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\005\000\002\015\004\000\002" +
    "\015\004\000\002\106\002\000\002\016\006\000\002\107" +
    "\002\000\002\016\006\000\002\110\002\000\002\111\002" +
    "\000\002\017\011\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\004\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\004\000\002\062\003\000\002\063\003\000\002" +
    "\060\003\000\002\061\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0107\000\022\003\020\004\012\005\016\006\006\007" +
    "\005\010\004\011\013\012\010\001\002\000\004\035\uff91" +
    "\001\002\000\004\035\uff92\001\002\000\004\035\uff94\001" +
    "\002\000\024\002\ufffb\003\ufffb\004\ufffb\005\ufffb\006\ufffb" +
    "\007\ufffb\010\ufffb\011\ufffb\012\ufffb\001\002\000\004\035" +
    "\uff90\001\002\000\024\002\ufffe\003\ufffe\004\ufffe\005\ufffe" +
    "\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe\001\002\000" +
    "\004\035\ufff9\001\002\000\004\035\uff93\001\002\000\004" +
    "\035\377\001\002\000\024\002\ufffc\003\ufffc\004\ufffc\005" +
    "\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\001\002" +
    "\000\004\035\uffe7\001\002\000\004\035\030\001\002\000" +
    "\024\002\ufffa\003\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa" +
    "\010\ufffa\011\ufffa\012\ufffa\001\002\000\024\002\ufffd\003" +
    "\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd" +
    "\012\ufffd\001\002\000\024\002\000\003\020\004\012\005" +
    "\016\006\006\007\005\010\004\011\013\012\010\001\002" +
    "\000\004\002\024\001\002\000\004\002\001\001\002\000" +
    "\024\002\uffff\003\uffff\004\uffff\005\uffff\006\uffff\007\uffff" +
    "\010\uffff\011\uffff\012\uffff\001\002\000\006\067\ufff1\071" +
    "\ufff1\001\002\000\004\063\060\001\002\000\012\055\ufff0" +
    "\063\uffe9\067\uffee\071\uffee\001\002\000\006\067\033\071" +
    "\032\001\002\000\056\002\ufff3\003\ufff3\004\ufff3\005\ufff3" +
    "\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\015" +
    "\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3" +
    "\024\ufff3\025\ufff3\030\ufff3\035\ufff3\066\ufff3\001\002\000" +
    "\004\035\035\001\002\000\006\067\ufff2\071\ufff2\001\002" +
    "\000\010\055\ufff0\067\uffee\071\uffee\001\002\000\004\055" +
    "\037\001\002\000\026\026\061\027\041\031\044\032\042" +
    "\033\053\034\054\035\043\043\045\062\056\063\060\001" +
    "\002\000\050\042\uff8a\043\uff8a\044\uff8a\045\uff8a\046\uff8a" +
    "\047\uff8a\051\uff8a\052\uff8a\053\uff8a\054\uff8a\056\uff8a\057" +
    "\uff8a\060\uff8a\061\uff8a\064\uff8a\067\uff8a\070\uff8a\071\uff8a" +
    "\072\uff8a\001\002\000\050\042\uff83\043\uff83\044\uff83\045" +
    "\uff83\046\uff83\047\uff83\051\uff83\052\uff83\053\uff83\054\uff83" +
    "\056\uff83\057\uff83\060\uff83\061\uff83\064\uff83\067\uff83\070" +
    "\uff83\071\uff83\072\uff83\001\002\000\050\042\uff87\043\uff87" +
    "\044\uff87\045\uff87\046\uff87\047\uff87\051\uff87\052\uff87\053" +
    "\uff87\054\uff87\056\uff87\057\uff87\060\uff87\061\uff87\064\uff87" +
    "\067\uff87\070\uff87\071\uff87\072\uff87\001\002\000\056\036" +
    "\141\037\142\042\uff89\043\uff89\044\uff89\045\uff89\046\uff89" +
    "\047\uff89\051\uff89\052\uff89\053\uff89\054\uff89\056\uff89\057" +
    "\uff89\060\uff89\061\uff89\063\uffe8\064\uff89\067\uff89\070\uff89" +
    "\071\uff89\072\uff89\001\002\000\050\042\uff88\043\uff88\044" +
    "\uff88\045\uff88\046\uff88\047\uff88\051\uff88\052\uff88\053\uff88" +
    "\054\uff88\056\uff88\057\uff88\060\uff88\061\uff88\064\uff88\067" +
    "\uff88\070\uff88\071\uff88\072\uff88\001\002\000\026\026\061" +
    "\027\041\031\044\032\042\033\053\034\054\035\043\043" +
    "\045\062\056\063\060\001\002\000\026\026\061\027\041" +
    "\031\044\032\042\033\053\034\054\035\043\043\045\062" +
    "\056\063\060\001\002\000\044\042\077\043\064\044\074" +
    "\045\075\046\065\047\070\051\073\052\076\053\066\054" +
    "\071\056\102\057\100\060\101\061\067\067\uffef\071\uffef" +
    "\072\072\001\002\000\050\042\uff8e\043\uff8e\044\uff8e\045" +
    "\uff8e\046\uff8e\047\uff8e\051\uff8e\052\uff8e\053\uff8e\054\uff8e" +
    "\056\uff8e\057\uff8e\060\uff8e\061\uff8e\064\uff8e\067\uff8e\070" +
    "\uff8e\071\uff8e\072\uff8e\001\002\000\050\042\uff8c\043\uff8c" +
    "\044\uff8c\045\uff8c\046\uff8c\047\uff8c\051\uff8c\052\uff8c\053" +
    "\uff8c\054\uff8c\056\uff8c\057\uff8c\060\uff8c\061\uff8c\064\uff8c" +
    "\067\uff8c\070\uff8c\071\uff8c\072\uff8c\001\002\000\050\042" +
    "\uff8f\043\uff8f\044\uff8f\045\uff8f\046\uff8f\047\uff8f\051\uff8f" +
    "\052\uff8f\053\uff8f\054\uff8f\056\uff8f\057\uff8f\060\uff8f\061" +
    "\uff8f\064\uff8f\067\uff8f\070\uff8f\071\uff8f\072\uff8f\001\002" +
    "\000\050\042\uff86\043\uff86\044\uff86\045\uff86\046\uff86\047" +
    "\uff86\051\uff86\052\uff86\053\uff86\054\uff86\056\uff86\057\uff86" +
    "\060\uff86\061\uff86\064\uff86\067\uff86\070\uff86\071\uff86\072" +
    "\uff86\001\002\000\050\042\uff85\043\uff85\044\uff85\045\uff85" +
    "\046\uff85\047\uff85\051\uff85\052\uff85\053\uff85\054\uff85\056" +
    "\uff85\057\uff85\060\uff85\061\uff85\064\uff85\067\uff85\070\uff85" +
    "\071\uff85\072\uff85\001\002\000\004\063\060\001\002\000" +
    "\026\026\061\027\041\031\044\032\042\033\053\034\054" +
    "\035\043\043\045\062\056\063\060\001\002\000\050\042" +
    "\uff8d\043\uff8d\044\uff8d\045\uff8d\046\uff8d\047\uff8d\051\uff8d" +
    "\052\uff8d\053\uff8d\054\uff8d\056\uff8d\057\uff8d\060\uff8d\061" +
    "\uff8d\064\uff8d\067\uff8d\070\uff8d\071\uff8d\072\uff8d\001\002" +
    "\000\044\006\uff66\007\uff66\010\uff66\011\uff66\012\uff66\026" +
    "\uff66\027\uff66\031\uff66\032\uff66\033\uff66\034\uff66\035\uff66" +
    "\043\uff66\062\uff66\063\uff66\064\uff66\071\uff66\001\002\000" +
    "\050\042\uff84\043\uff84\044\uff84\045\uff84\046\uff84\047\uff84" +
    "\051\uff84\052\uff84\053\uff84\054\uff84\056\uff84\057\uff84\060" +
    "\uff84\061\uff84\064\uff84\067\uff84\070\uff84\071\uff84\072\uff84" +
    "\001\002\000\050\042\uff8b\043\uff8b\044\uff8b\045\uff8b\046" +
    "\uff8b\047\uff8b\051\uff8b\052\uff8b\053\uff8b\054\uff8b\056\uff8b" +
    "\057\uff8b\060\uff8b\061\uff8b\064\uff8b\067\uff8b\070\uff8b\071" +
    "\uff8b\072\uff8b\001\002\000\050\042\077\043\064\044\074" +
    "\045\075\046\065\047\070\051\073\052\076\053\066\054" +
    "\071\056\102\057\100\060\uff69\061\uff69\064\uff69\067\uff69" +
    "\070\uff69\071\uff69\072\uff69\001\002\000\026\026\061\027" +
    "\041\031\044\032\042\033\053\034\054\035\043\043\045" +
    "\062\056\063\060\001\002\000\026\026\061\027\041\031" +
    "\044\032\042\033\053\034\054\035\043\043\045\062\056" +
    "\063\060\001\002\000\026\026\061\027\041\031\044\032" +
    "\042\033\053\034\054\035\043\043\045\062\056\063\060" +
    "\001\002\000\026\026\061\027\041\031\044\032\042\033" +
    "\053\034\054\035\043\043\045\062\056\063\060\001\002" +
    "\000\026\026\061\027\041\031\044\032\042\033\053\034" +
    "\054\035\043\043\045\062\056\063\060\001\002\000\026" +
    "\026\061\027\041\031\044\032\042\033\053\034\054\035" +
    "\043\043\045\062\056\063\060\001\002\000\026\026\uff7b" +
    "\027\uff7b\031\uff7b\032\uff7b\033\uff7b\034\uff7b\035\uff7b\043" +
    "\uff7b\062\uff7b\063\uff7b\001\002\000\026\026\061\027\041" +
    "\031\044\032\042\033\053\034\054\035\043\043\045\062" +
    "\056\063\060\001\002\000\026\026\061\027\041\031\044" +
    "\032\042\033\053\034\054\035\043\043\045\062\056\063" +
    "\060\001\002\000\026\026\061\027\041\031\044\032\042" +
    "\033\053\034\054\035\043\043\045\062\056\063\060\001" +
    "\002\000\026\026\061\027\041\031\044\032\042\033\053" +
    "\034\054\035\043\043\045\062\056\063\060\001\002\000" +
    "\026\026\061\027\041\031\044\032\042\033\053\034\054" +
    "\035\043\043\045\062\056\063\060\001\002\000\026\026" +
    "\061\027\041\031\044\032\042\033\053\034\054\035\043" +
    "\043\045\062\056\063\060\001\002\000\026\026\061\027" +
    "\041\031\044\032\042\033\053\034\054\035\043\043\045" +
    "\062\056\063\060\001\002\000\026\026\061\027\041\031" +
    "\044\032\042\033\053\034\054\035\043\043\045\062\056" +
    "\063\060\001\002\000\050\042\077\043\064\044\074\045" +
    "\075\046\065\047\070\051\uff6d\052\uff6d\053\uff6d\054\uff6d" +
    "\056\uff6d\057\uff6d\060\uff6d\061\uff6d\064\uff6d\067\uff6d\070" +
    "\uff6d\071\uff6d\072\uff6d\001\002\000\050\042\077\043\064" +
    "\044\074\045\075\046\065\047\070\051\073\052\076\053" +
    "\066\054\071\056\102\057\100\060\uff6b\061\uff6b\064\uff6b" +
    "\067\uff6b\070\uff6b\071\uff6b\072\uff6b\001\002\000\050\042" +
    "\077\043\064\044\074\045\075\046\065\047\070\051\uff6c" +
    "\052\uff6c\053\uff6c\054\uff6c\056\uff6c\057\uff6c\060\uff6c\061" +
    "\uff6c\064\uff6c\067\uff6c\070\uff6c\071\uff6c\072\uff6c\001\002" +
    "\000\050\042\uff78\043\uff78\044\074\045\075\046\065\047" +
    "\070\051\uff78\052\uff78\053\uff78\054\uff78\056\uff78\057\uff78" +
    "\060\uff78\061\uff78\064\uff78\067\uff78\070\uff78\071\uff78\072" +
    "\uff78\001\002\000\050\042\077\043\064\044\074\045\075" +
    "\046\065\047\070\051\uff70\052\uff70\053\066\054\071\056" +
    "\102\057\100\060\uff70\061\uff70\064\uff70\067\uff70\070\uff70" +
    "\071\uff70\072\uff70\001\002\000\050\042\uff75\043\uff75\044" +
    "\uff75\045\uff75\046\065\047\uff75\051\uff75\052\uff75\053\uff75" +
    "\054\uff75\056\uff75\057\uff75\060\uff75\061\uff75\064\uff75\067" +
    "\uff75\070\uff75\071\uff75\072\uff75\001\002\000\050\042\uff76" +
    "\043\uff76\044\uff76\045\uff76\046\065\047\uff76\051\uff76\052" +
    "\uff76\053\uff76\054\uff76\056\uff76\057\uff76\060\uff76\061\uff76" +
    "\064\uff76\067\uff76\070\uff76\071\uff76\072\uff76\001\002\000" +
    "\050\042\077\043\064\044\074\045\075\046\065\047\070" +
    "\051\uff71\052\uff71\053\066\054\071\056\102\057\100\060" +
    "\uff71\061\uff71\064\uff71\067\uff71\070\uff71\071\uff71\072\uff71" +
    "\001\002\000\026\026\061\027\041\031\044\032\042\033" +
    "\053\034\054\035\043\043\045\062\056\063\060\001\002" +
    "\000\042\042\077\043\064\044\074\045\075\046\065\047" +
    "\070\051\073\052\076\053\066\054\071\056\102\057\100" +
    "\060\101\061\067\070\115\072\072\001\002\000\026\026" +
    "\uff7a\027\uff7a\031\uff7a\032\uff7a\033\uff7a\034\uff7a\035\uff7a" +
    "\043\uff7a\062\uff7a\063\uff7a\001\002\000\026\026\061\027" +
    "\041\031\044\032\042\033\053\034\054\035\043\043\045" +
    "\062\056\063\060\001\002\000\050\042\077\043\064\044" +
    "\074\045\075\046\065\047\070\051\073\052\076\053\066" +
    "\054\071\056\102\057\100\060\101\061\067\064\uff79\067" +
    "\uff79\070\uff79\071\uff79\072\uff79\001\002\000\050\042\077" +
    "\043\064\044\074\045\075\046\065\047\070\051\uff6e\052" +
    "\uff6e\053\uff6e\054\uff6e\056\uff6e\057\uff6e\060\uff6e\061\uff6e" +
    "\064\uff6e\067\uff6e\070\uff6e\071\uff6e\072\uff6e\001\002\000" +
    "\050\042\uff73\043\uff73\044\uff73\045\uff73\046\065\047\uff73" +
    "\051\uff73\052\uff73\053\uff73\054\uff73\056\uff73\057\uff73\060" +
    "\uff73\061\uff73\064\uff73\067\uff73\070\uff73\071\uff73\072\uff73" +
    "\001\002\000\050\042\077\043\064\044\074\045\075\046" +
    "\065\047\070\051\073\052\076\053\066\054\071\056\102" +
    "\057\100\060\101\061\uff6a\064\uff6a\067\uff6a\070\uff6a\071" +
    "\uff6a\072\uff6a\001\002\000\050\042\077\043\064\044\074" +
    "\045\075\046\065\047\070\051\uff6f\052\uff6f\053\uff6f\054" +
    "\uff6f\056\uff6f\057\uff6f\060\uff6f\061\uff6f\064\uff6f\067\uff6f" +
    "\070\uff6f\071\uff6f\072\uff6f\001\002\000\046\042\uff74\043" +
    "\uff74\044\uff74\045\uff74\047\uff74\051\uff74\052\uff74\053\uff74" +
    "\054\uff74\056\uff74\057\uff74\060\uff74\061\uff74\064\uff74\067" +
    "\uff74\070\uff74\071\uff74\072\uff74\001\002\000\050\042\uff77" +
    "\043\uff77\044\074\045\075\046\065\047\070\051\uff77\052" +
    "\uff77\053\uff77\054\uff77\056\uff77\057\uff77\060\uff77\061\uff77" +
    "\064\uff77\067\uff77\070\uff77\071\uff77\072\uff77\001\002\000" +
    "\030\026\061\027\041\031\044\032\042\033\053\034\054" +
    "\035\043\043\045\062\056\063\060\064\132\001\002\000" +
    "\006\064\132\067\134\001\002\000\050\042\ufff6\043\ufff6" +
    "\044\ufff6\045\ufff6\046\ufff6\047\ufff6\051\ufff6\052\ufff6\053" +
    "\ufff6\054\ufff6\056\ufff6\057\ufff6\060\ufff6\061\ufff6\064\ufff6" +
    "\067\ufff6\070\ufff6\071\ufff6\072\ufff6\001\002\000\044\042" +
    "\077\043\064\044\074\045\075\046\065\047\070\051\073" +
    "\052\076\053\066\054\071\056\102\057\100\060\101\061" +
    "\067\064\ufff4\067\ufff4\072\072\001\002\000\052\042\uff65" +
    "\043\uff65\044\uff65\045\uff65\046\uff65\047\uff65\051\uff65\052" +
    "\uff65\053\uff65\054\uff65\056\uff65\057\uff65\060\uff65\061\uff65" +
    "\064\uff65\065\uff65\067\uff65\070\uff65\071\uff65\072\uff65\001" +
    "\002\000\050\042\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7" +
    "\047\ufff7\051\ufff7\052\ufff7\053\ufff7\054\ufff7\056\ufff7\057" +
    "\ufff7\060\ufff7\061\ufff7\064\ufff7\067\ufff7\070\ufff7\071\ufff7" +
    "\072\ufff7\001\002\000\026\026\061\027\041\031\044\032" +
    "\042\033\053\034\054\035\043\043\045\062\056\063\060" +
    "\001\002\000\044\042\077\043\064\044\074\045\075\046" +
    "\065\047\070\051\073\052\076\053\066\054\071\056\102" +
    "\057\100\060\101\061\067\064\ufff5\067\ufff5\072\072\001" +
    "\002\000\042\042\077\043\064\044\074\045\075\046\065" +
    "\047\070\051\073\052\076\053\066\054\071\056\102\057" +
    "\100\060\101\061\067\064\132\072\072\001\002\000\050" +
    "\042\uff82\043\uff82\044\uff82\045\uff82\046\uff82\047\uff82\051" +
    "\uff82\052\uff82\053\uff82\054\uff82\056\uff82\057\uff82\060\uff82" +
    "\061\uff82\064\uff82\067\uff82\070\uff82\071\uff82\072\uff82\001" +
    "\002\000\050\042\uff72\043\uff72\044\uff72\045\uff72\046\uff72" +
    "\047\uff72\051\uff72\052\uff72\053\uff72\054\uff72\056\uff72\057" +
    "\uff72\060\uff72\061\uff72\064\uff72\067\uff72\070\uff72\071\uff72" +
    "\072\uff72\001\002\000\050\042\uff81\043\uff81\044\uff81\045" +
    "\uff81\046\uff81\047\uff81\051\uff81\052\uff81\053\uff81\054\uff81" +
    "\056\uff81\057\uff81\060\uff81\061\uff81\064\uff81\067\uff81\070" +
    "\uff81\071\uff81\072\uff81\001\002\000\050\042\uff80\043\uff80" +
    "\044\uff80\045\uff80\046\uff80\047\uff80\051\uff80\052\uff80\053" +
    "\uff80\054\uff80\056\uff80\057\uff80\060\uff80\061\uff80\064\uff80" +
    "\067\uff80\070\uff80\071\uff80\072\uff80\001\002\000\016\006" +
    "\006\007\005\010\004\011\013\012\010\064\132\001\002" +
    "\000\004\035\375\001\002\000\006\064\132\067\371\001" +
    "\002\000\004\065\150\001\002\000\024\002\uffeb\003\uffeb" +
    "\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012" +
    "\uffeb\001\002\000\050\003\uff68\006\uff68\007\uff68\010\uff68" +
    "\011\uff68\012\uff68\013\uff68\015\uff68\016\uff68\017\uff68\020" +
    "\uff68\021\uff68\022\uff68\023\uff68\024\uff68\025\uff68\030\uff68" +
    "\035\uff68\066\uff68\001\002\000\044\003\177\006\006\007" +
    "\005\010\004\011\013\012\010\013\174\015\162\016\166" +
    "\017\201\020\170\023\206\024\200\025\164\030\153\035" +
    "\155\066\154\001\002\000\004\063\060\001\002\000\004" +
    "\063\uff95\001\002\000\060\002\uff67\003\uff67\004\uff67\005" +
    "\uff67\006\uff67\007\uff67\010\uff67\011\uff67\012\uff67\013\uff67" +
    "\014\uff67\015\uff67\016\uff67\017\uff67\020\uff67\021\uff67\022" +
    "\uff67\023\uff67\024\uff67\025\uff67\030\uff67\035\uff67\066\uff67" +
    "\001\002\000\016\036\141\037\142\040\uff7f\041\uff7d\055" +
    "\uffb1\063\uffe8\001\002\000\050\003\uffa7\006\uffa7\007\uffa7" +
    "\010\uffa7\011\uffa7\012\uffa7\013\uffa7\015\uffa7\016\uffa7\017" +
    "\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7" +
    "\030\uffa7\035\uffa7\066\uffa7\001\002\000\050\003\uffa9\006" +
    "\uffa9\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9\015\uffa9" +
    "\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024" +
    "\uffa9\025\uffa9\030\uffa9\035\uffa9\066\uffa9\001\002\000\044" +
    "\003\177\006\006\007\005\010\004\011\013\012\010\013" +
    "\174\015\162\016\166\017\201\020\170\023\206\024\200" +
    "\025\164\030\153\035\155\066\154\001\002\000\004\035" +
    "\035\001\002\000\004\063\uffc9\001\002\000\050\003\uffa6" +
    "\006\uffa6\007\uffa6\010\uffa6\011\uffa6\012\uffa6\013\uffa6\015" +
    "\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6" +
    "\024\uffa6\025\uffa6\030\uffa6\035\uffa6\066\uffa6\001\002\000" +
    "\030\026\uffa0\027\uffa0\031\uffa0\032\uffa0\033\uffa0\034\uffa0" +
    "\035\uffa0\043\uffa0\062\uffa0\063\uffa0\071\uff9e\001\002\000" +
    "\004\071\302\001\002\000\004\063\uffb6\001\002\000\050" +
    "\003\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa\013" +
    "\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa" +
    "\023\uffaa\024\uffaa\025\uffaa\030\uffaa\035\uffaa\066\uffaa\001" +
    "\002\000\004\063\uffde\001\002\000\050\003\uffac\006\uffac" +
    "\007\uffac\010\uffac\011\uffac\012\uffac\013\uffac\015\uffac\016" +
    "\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac\024\uffac" +
    "\025\uffac\030\uffac\035\uffac\066\uffac\001\002\000\060\002" +
    "\uffae\003\uffae\004\uffae\005\uffae\006\uffae\007\uffae\010\uffae" +
    "\011\uffae\012\uffae\013\uffae\014\uffae\015\uffae\016\uffae\017" +
    "\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024\uffae\025\uffae" +
    "\030\uffae\035\uffae\066\uffae\001\002\000\050\003\uffa8\006" +
    "\uffa8\007\uffa8\010\uffa8\011\uffa8\012\uffa8\013\uffa8\015\uffa8" +
    "\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8\024" +
    "\uffa8\025\uffa8\030\uffa8\035\uffa8\066\uffa8\001\002\000\004" +
    "\063\uffdf\001\002\000\050\003\uffab\006\uffab\007\uffab\010" +
    "\uffab\011\uffab\012\uffab\013\uffab\015\uffab\016\uffab\017\uffab" +
    "\020\uffab\021\uffab\022\uffab\023\uffab\024\uffab\025\uffab\030" +
    "\uffab\035\uffab\066\uffab\001\002\000\050\003\uffa5\006\uffa5" +
    "\007\uffa5\010\uffa5\011\uffa5\012\uffa5\013\uffa5\015\uffa5\016" +
    "\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5" +
    "\025\uffa5\030\uffa5\035\uffa5\066\uffa5\001\002\000\050\003" +
    "\uff98\006\uff98\007\uff98\010\uff98\011\uff98\012\uff98\013\uff98" +
    "\015\uff98\016\uff98\017\uff98\020\uff98\021\uff98\022\uff98\023" +
    "\uff98\024\uff98\025\uff98\030\uff98\035\uff98\066\uff98\001\002" +
    "\000\004\071\uff9c\001\002\000\004\065\uffb4\001\002\000" +
    "\004\071\224\001\002\000\004\071\223\001\002\000\004" +
    "\071\222\001\002\000\004\063\060\001\002\000\004\071" +
    "\uff9a\001\002\000\004\071\210\001\002\000\050\003\uff99" +
    "\006\uff99\007\uff99\010\uff99\011\uff99\012\uff99\013\uff99\015" +
    "\uff99\016\uff99\017\uff99\020\uff99\021\uff99\022\uff99\023\uff99" +
    "\024\uff99\025\uff99\030\uff99\035\uff99\066\uff99\001\002\000" +
    "\026\026\061\027\041\031\044\032\042\033\053\034\054" +
    "\035\043\043\045\062\056\063\060\001\002\000\042\042" +
    "\077\043\064\044\074\045\075\046\065\047\070\051\073" +
    "\052\076\053\066\054\071\056\102\057\100\060\101\061" +
    "\067\064\132\072\072\001\002\000\004\065\150\001\002" +
    "\000\052\003\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012" +
    "\uffe0\013\uffe0\014\215\015\uffe0\016\uffe0\017\uffe0\020\uffe0" +
    "\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\030\uffe0\035" +
    "\uffe0\066\uffe0\001\002\000\006\013\uffe4\065\uffe2\001\002" +
    "\000\004\065\150\001\002\000\004\013\174\001\002\000" +
    "\050\003\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3" +
    "\013\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022" +
    "\uffe3\023\uffe3\024\uffe3\025\uffe3\030\uffe3\035\uffe3\066\uffe3" +
    "\001\002\000\050\003\uffe1\006\uffe1\007\uffe1\010\uffe1\011" +
    "\uffe1\012\uffe1\013\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1" +
    "\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\030\uffe1\035" +
    "\uffe1\066\uffe1\001\002\000\050\003\uffa1\006\uffa1\007\uffa1" +
    "\010\uffa1\011\uffa1\012\uffa1\013\uffa1\015\uffa1\016\uffa1\017" +
    "\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1" +
    "\030\uffa1\035\uffa1\066\uffa1\001\002\000\050\003\uffa3\006" +
    "\uffa3\007\uffa3\010\uffa3\011\uffa3\012\uffa3\013\uffa3\015\uffa3" +
    "\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3\024" +
    "\uffa3\025\uffa3\030\uffa3\035\uffa3\066\uffa3\001\002\000\050" +
    "\003\uffa4\006\uffa4\007\uffa4\010\uffa4\011\uffa4\012\uffa4\013" +
    "\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4" +
    "\023\uffa4\024\uffa4\025\uffa4\030\uffa4\035\uffa4\066\uffa4\001" +
    "\002\000\004\065\150\001\002\000\004\016\227\001\002" +
    "\000\004\063\uffb3\001\002\000\004\063\060\001\002\000" +
    "\026\026\061\027\041\031\044\032\042\033\053\034\054" +
    "\035\043\043\045\062\056\063\060\001\002\000\042\042" +
    "\077\043\064\044\074\045\075\046\065\047\070\051\073" +
    "\052\076\053\066\054\071\056\102\057\100\060\101\061" +
    "\067\064\132\072\072\001\002\000\004\071\234\001\002" +
    "\000\050\003\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012" +
    "\uffb2\013\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2" +
    "\022\uffb2\023\uffb2\024\uffb2\025\uffb2\030\uffb2\035\uffb2\066" +
    "\uffb2\001\002\000\004\071\236\001\002\000\050\003\uff9b" +
    "\006\uff9b\007\uff9b\010\uff9b\011\uff9b\012\uff9b\013\uff9b\015" +
    "\uff9b\016\uff9b\017\uff9b\020\uff9b\021\uff9b\022\uff9b\023\uff9b" +
    "\024\uff9b\025\uff9b\030\uff9b\035\uff9b\066\uff9b\001\002\000" +
    "\004\063\060\001\002\000\026\026\061\027\041\031\044" +
    "\032\042\033\053\034\054\035\043\043\045\062\056\063" +
    "\060\001\002\000\042\042\077\043\064\044\074\045\075" +
    "\046\065\047\070\051\073\052\076\053\066\054\071\056" +
    "\102\057\100\060\101\061\067\064\132\072\072\001\002" +
    "\000\004\065\150\001\002\000\010\021\255\022\245\066" +
    "\154\001\002\000\050\003\uffdd\006\uffdd\007\uffdd\010\uffdd" +
    "\011\uffdd\012\uffdd\013\uffdd\015\uffdd\016\uffdd\017\uffdd\020" +
    "\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\030\uffdd" +
    "\035\uffdd\066\uffdd\001\002\000\004\070\uffca\001\002\000" +
    "\026\026\061\027\041\031\044\032\042\033\053\034\054" +
    "\035\043\043\045\062\056\063\060\001\002\000\004\066" +
    "\uffd8\001\002\000\010\021\255\022\245\066\uffd9\001\002" +
    "\000\004\070\257\001\002\000\050\003\uffdb\006\uffdb\007" +
    "\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb\015\uffdb\016\uffdb" +
    "\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025" +
    "\uffdb\030\uffdb\035\uffdb\066\uffdb\001\002\000\004\066\154" +
    "\001\002\000\010\021\uffd6\022\uffd6\066\uffd6\001\002\000" +
    "\026\026\uffd0\027\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0" +
    "\035\uffd0\043\uffd0\062\uffd0\063\uffd0\001\002\000\050\003" +
    "\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc" +
    "\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023" +
    "\uffdc\024\uffdc\025\uffdc\030\uffdc\035\uffdc\066\uffdc\001\002" +
    "\000\046\003\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012" +
    "\uffcf\013\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\023\uffcf" +
    "\024\uffcf\025\uffcf\030\uffcf\035\uffcf\065\uffcd\066\uffcb\001" +
    "\002\000\004\065\150\001\002\000\042\003\177\006\006" +
    "\007\005\010\004\011\013\012\010\013\174\015\162\016" +
    "\166\017\201\020\170\023\206\024\200\025\164\030\153" +
    "\035\155\001\002\000\044\003\177\006\006\007\005\010" +
    "\004\011\013\012\010\013\174\015\162\016\166\017\201" +
    "\020\170\023\206\024\200\025\164\030\153\035\155\066" +
    "\uffce\001\002\000\050\003\uffad\006\uffad\007\uffad\010\uffad" +
    "\011\uffad\012\uffad\013\uffad\015\uffad\016\uffad\017\uffad\020" +
    "\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025\uffad\030\uffad" +
    "\035\uffad\066\uffad\001\002\000\004\066\uffcc\001\002\000" +
    "\004\066\uffda\001\002\000\010\021\uffd7\022\uffd7\066\uffd7" +
    "\001\002\000\042\042\077\043\064\044\074\045\075\046" +
    "\065\047\070\051\073\052\076\053\066\054\071\056\102" +
    "\057\100\060\101\061\067\070\270\072\072\001\002\000" +
    "\052\003\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5" +
    "\013\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd1\022" +
    "\uffd1\023\uffd5\024\uffd5\025\uffd5\030\uffd5\035\uffd5\065\uffd3" +
    "\066\uffd1\001\002\000\004\065\150\001\002\000\042\003" +
    "\177\006\006\007\005\010\004\011\013\012\010\013\174" +
    "\015\162\016\166\017\201\020\170\023\206\024\200\025" +
    "\164\030\153\035\155\001\002\000\050\003\177\006\006" +
    "\007\005\010\004\011\013\012\010\013\174\015\162\016" +
    "\166\017\201\020\170\021\uffd4\022\uffd4\023\206\024\200" +
    "\025\164\030\153\035\155\066\uffd4\001\002\000\010\021" +
    "\uffd2\022\uffd2\066\uffd2\001\002\000\004\063\060\001\002" +
    "\000\026\026\061\027\041\031\044\032\042\033\053\034" +
    "\054\035\043\043\045\062\056\063\060\001\002\000\042" +
    "\042\077\043\064\044\074\045\075\046\065\047\070\051" +
    "\073\052\076\053\066\054\071\056\102\057\100\060\101" +
    "\061\067\064\132\072\072\001\002\000\004\065\150\001" +
    "\002\000\050\003\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5" +
    "\012\uffb5\013\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021" +
    "\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\030\uffb5\035\uffb5" +
    "\066\uffb5\001\002\000\050\003\uffa2\006\uffa2\007\uffa2\010" +
    "\uffa2\011\uffa2\012\uffa2\013\uffa2\015\uffa2\016\uffa2\017\uffa2" +
    "\020\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2\030" +
    "\uffa2\035\uffa2\066\uffa2\001\002\000\004\071\307\001\002" +
    "\000\026\026\061\027\041\031\044\032\042\033\053\034" +
    "\054\035\043\043\045\062\056\063\060\001\002\000\042" +
    "\042\077\043\064\044\074\045\075\046\065\047\070\051" +
    "\073\052\076\053\066\054\071\056\102\057\100\060\101" +
    "\061\067\071\306\072\072\001\002\000\050\003\uff9f\006" +
    "\uff9f\007\uff9f\010\uff9f\011\uff9f\012\uff9f\013\uff9f\015\uff9f" +
    "\016\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f\024" +
    "\uff9f\025\uff9f\030\uff9f\035\uff9f\066\uff9f\001\002\000\050" +
    "\003\uff9d\006\uff9d\007\uff9d\010\uff9d\011\uff9d\012\uff9d\013" +
    "\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d\022\uff9d" +
    "\023\uff9d\024\uff9d\025\uff9d\030\uff9d\035\uff9d\066\uff9d\001" +
    "\002\000\004\063\060\001\002\000\020\006\006\007\005" +
    "\010\004\011\013\012\010\035\316\071\312\001\002\000" +
    "\030\026\061\027\041\031\044\032\042\033\053\034\054" +
    "\035\043\043\045\062\056\063\060\071\355\001\002\000" +
    "\004\064\132\001\002\000\004\035\316\001\002\000\004" +
    "\071\326\001\002\000\004\055\uffb1\001\002\000\006\067" +
    "\321\071\uffbe\001\002\000\006\067\uffbc\071\uffbc\001\002" +
    "\000\004\035\316\001\002\000\006\067\uffbd\071\uffbd\001" +
    "\002\000\004\055\324\001\002\000\026\026\061\027\041" +
    "\031\044\032\042\033\053\034\054\035\043\043\045\062" +
    "\056\063\060\001\002\000\046\042\077\043\064\044\074" +
    "\045\075\046\065\047\070\051\073\052\076\053\066\054" +
    "\071\056\102\057\100\060\101\061\067\064\uffb0\067\uffb0" +
    "\071\uffb0\072\072\001\002\000\030\026\061\027\041\031" +
    "\044\032\042\033\053\034\054\035\043\043\045\062\056" +
    "\063\060\071\330\001\002\000\042\042\077\043\064\044" +
    "\074\045\075\046\065\047\070\051\073\052\076\053\066" +
    "\054\071\056\102\057\100\060\101\061\067\071\347\072" +
    "\072\001\002\000\006\035\334\064\uffc3\001\002\000\006" +
    "\064\uffba\067\uffba\001\002\000\006\064\uffb9\067\uffb9\001" +
    "\002\000\006\064\uffc5\067\345\001\002\000\014\036\141" +
    "\037\142\040\uff7f\041\uff7d\055\uffb1\001\002\000\006\064" +
    "\uffb8\067\uffb8\001\002\000\006\064\uffb7\067\uffb7\001\002" +
    "\000\004\041\343\001\002\000\004\040\341\001\002\000" +
    "\026\026\061\027\041\031\044\032\042\033\053\034\054" +
    "\035\043\043\045\062\056\063\060\001\002\000\046\042" +
    "\077\043\064\044\074\045\075\046\065\047\070\051\073" +
    "\052\076\053\066\054\071\056\102\057\100\060\101\061" +
    "\067\064\uff7e\067\uff7e\071\uff7e\072\072\001\002\000\026" +
    "\026\061\027\041\031\044\032\042\033\053\034\054\035" +
    "\043\043\045\062\056\063\060\001\002\000\046\042\077" +
    "\043\064\044\074\045\075\046\065\047\070\051\073\052" +
    "\076\053\066\054\071\056\102\057\100\060\101\061\067" +
    "\064\uff7c\067\uff7c\071\uff7c\072\072\001\002\000\004\035" +
    "\334\001\002\000\006\064\uffbb\067\uffbb\001\002\000\006" +
    "\035\334\064\uffc6\001\002\000\006\064\uffc7\067\345\001" +
    "\002\000\006\067\321\071\uffbf\001\002\000\004\065\150" +
    "\001\002\000\050\003\uffc8\006\uffc8\007\uffc8\010\uffc8\011" +
    "\uffc8\012\uffc8\013\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8" +
    "\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\030\uffc8\035" +
    "\uffc8\066\uffc8\001\002\000\042\042\077\043\064\044\074" +
    "\045\075\046\065\047\070\051\073\052\076\053\066\054" +
    "\071\056\102\057\100\060\101\061\067\071\357\072\072" +
    "\001\002\000\006\035\334\064\uffc0\001\002\000\006\064" +
    "\uffc1\067\345\001\002\000\006\035\334\064\uffc2\001\002" +
    "\000\006\064\uffc4\067\345\001\002\000\060\002\uffaf\003" +
    "\uffaf\004\uffaf\005\uffaf\006\uffaf\007\uffaf\010\uffaf\011\uffaf" +
    "\012\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\020" +
    "\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf\030\uffaf" +
    "\035\uffaf\066\uffaf\001\002\000\030\026\061\027\041\031" +
    "\044\032\042\033\053\034\054\035\043\043\045\062\056" +
    "\063\060\064\132\001\002\000\004\071\367\001\002\000" +
    "\042\042\077\043\064\044\074\045\075\046\065\047\070" +
    "\051\073\052\076\053\066\054\071\056\102\057\100\060" +
    "\101\061\067\064\132\072\072\001\002\000\004\071\366" +
    "\001\002\000\050\003\uff97\006\uff97\007\uff97\010\uff97\011" +
    "\uff97\012\uff97\013\uff97\015\uff97\016\uff97\017\uff97\020\uff97" +
    "\021\uff97\022\uff97\023\uff97\024\uff97\025\uff97\030\uff97\035" +
    "\uff97\066\uff97\001\002\000\050\003\uff96\006\uff96\007\uff96" +
    "\010\uff96\011\uff96\012\uff96\013\uff96\015\uff96\016\uff96\017" +
    "\uff96\020\uff96\021\uff96\022\uff96\023\uff96\024\uff96\025\uff96" +
    "\030\uff96\035\uff96\066\uff96\001\002\000\004\065\150\001" +
    "\002\000\014\006\006\007\005\010\004\011\013\012\010" +
    "\001\002\000\004\035\373\001\002\000\006\064\uffe6\067" +
    "\uffe6\001\002\000\024\002\uffed\003\uffed\004\uffed\005\uffed" +
    "\006\uffed\007\uffed\010\uffed\011\uffed\012\uffed\001\002\000" +
    "\006\064\uffe5\067\uffe5\001\002\000\004\063\060\001\002" +
    "\000\004\063\uffe9\001\002\000\016\006\006\007\005\010" +
    "\004\011\013\012\010\064\132\001\002\000\006\064\132" +
    "\067\371\001\002\000\004\065\150\001\002\000\024\002" +
    "\uffea\003\uffea\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea" +
    "\011\uffea\012\uffea\001\002\000\004\065\150\001\002\000" +
    "\024\002\uffec\003\uffec\004\uffec\005\uffec\006\uffec\007\uffec" +
    "\010\uffec\011\uffec\012\uffec\001\002\000\004\035\u0108\001" +
    "\002\000\004\071\u0109\001\002\000\004\063\uffe8\001\002" +
    "\000\024\002\ufff8\003\ufff8\004\ufff8\005\ufff8\006\ufff8\007" +
    "\ufff8\010\ufff8\011\ufff8\012\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0107\000\022\002\022\003\021\004\010\005\020\020" +
    "\014\021\016\024\006\053\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\064\u0105\001\001" +
    "\000\002\001\001\000\004\051\375\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\022\030\023\025\051\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\004" +
    "\024\005\020\020\014\021\016\024\006\053\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\060\142\001\001\000\004\065\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\033\001\001\000\002\001\001\000\004\065\035\001\001" +
    "\000\002\001\001\000\024\006\061\011\046\012\051\013" +
    "\047\014\056\015\050\017\037\052\054\060\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\006\061\011\137" +
    "\012\051\013\047\014\056\015\050\017\037\052\054\060" +
    "\045\001\001\000\024\006\061\011\135\012\051\013\047" +
    "\014\056\015\050\017\037\052\054\060\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\060" +
    "\125\001\001\000\024\006\061\011\062\012\051\013\047" +
    "\014\056\015\050\017\037\052\054\060\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\006\061\011\124\012" +
    "\051\013\047\014\056\015\050\017\037\052\054\060\045" +
    "\001\001\000\024\006\061\011\123\012\051\013\047\014" +
    "\056\015\050\017\037\052\054\060\045\001\001\000\024" +
    "\006\061\011\122\012\051\013\047\014\056\015\050\017" +
    "\037\052\054\060\045\001\001\000\024\006\061\011\121" +
    "\012\051\013\047\014\056\015\050\017\037\052\054\060" +
    "\045\001\001\000\024\006\061\011\120\012\051\013\047" +
    "\014\056\015\050\017\037\052\054\060\045\001\001\000" +
    "\024\006\061\011\117\012\051\013\047\014\056\015\050" +
    "\017\037\052\054\060\045\001\001\000\004\110\112\001" +
    "\001\000\024\006\061\011\111\012\051\013\047\014\056" +
    "\015\050\017\037\052\054\060\045\001\001\000\024\006" +
    "\061\011\110\012\051\013\047\014\056\015\050\017\037" +
    "\052\054\060\045\001\001\000\024\006\061\011\107\012" +
    "\051\013\047\014\056\015\050\017\037\052\054\060\045" +
    "\001\001\000\024\006\061\011\106\012\051\013\047\014" +
    "\056\015\050\017\037\052\054\060\045\001\001\000\024" +
    "\006\061\011\105\012\051\013\047\014\056\015\050\017" +
    "\037\052\054\060\045\001\001\000\024\006\061\011\104" +
    "\012\051\013\047\014\056\015\050\017\037\052\054\060" +
    "\045\001\001\000\024\006\061\011\103\012\051\013\047" +
    "\014\056\015\050\017\037\052\054\060\045\001\001\000" +
    "\024\006\061\011\102\012\051\013\047\014\056\015\050" +
    "\017\037\052\054\060\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\006\061\011\113\012\051\013\047\014\056" +
    "\015\050\017\037\052\054\060\045\001\001\000\002\001" +
    "\001\000\004\111\115\001\001\000\024\006\061\011\116" +
    "\012\051\013\047\014\056\015\050\017\037\052\054\060" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\006\061\007\126\011\130" +
    "\012\051\013\047\014\056\015\050\017\037\052\054\060" +
    "\045\061\127\001\001\000\004\061\132\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\006\061\011\134\012\051\013\047\014\056" +
    "\015\050\017\037\052\054\060\045\001\001\000\002\001" +
    "\001\000\004\061\136\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\144\021\143\061\145\001\001\000\002\001\001\000\004" +
    "\061\367\001\001\000\006\025\146\062\150\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\006\203\015\164" +
    "\016\201\020\174\021\160\026\157\027\170\030\175\031" +
    "\166\032\156\040\155\041\162\042\172\050\202\052\054" +
    "\054\204\057\151\063\171\001\001\000\004\060\361\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\101\322" +
    "\106\337\107\336\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\006\203\015\164\016\201\020\174\021\160" +
    "\027\262\030\175\031\166\032\156\040\155\041\162\042" +
    "\172\050\202\052\054\054\204\057\151\063\360\001\001" +
    "\000\006\022\030\023\025\001\001\000\004\075\307\001" +
    "\001\000\002\001\001\000\006\102\303\103\302\001\001" +
    "\000\002\001\001\000\004\076\274\001\001\000\002\001" +
    "\001\000\004\070\236\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\104\234" +
    "\001\001\000\004\077\224\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\060\210\001\001" +
    "\000\004\105\206\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\006\061\011\211\012\051\013\047\014\056" +
    "\015\050\017\037\052\054\060\045\001\001\000\004\061" +
    "\212\001\001\000\006\025\213\062\150\001\001\000\002" +
    "\001\001\000\006\066\216\067\215\001\001\000\006\025" +
    "\220\062\150\001\001\000\006\031\217\054\204\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\025\225\062\150" +
    "\001\001\000\002\001\001\000\004\100\227\001\001\000" +
    "\004\060\230\001\001\000\024\006\061\011\231\012\051" +
    "\013\047\014\056\015\050\017\037\052\054\060\045\001" +
    "\001\000\004\061\232\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\060" +
    "\237\001\001\000\024\006\061\011\240\012\051\013\047" +
    "\014\056\015\050\017\037\052\054\060\045\001\001\000" +
    "\004\061\241\001\001\000\006\033\243\062\242\001\001" +
    "\000\020\034\252\035\247\036\246\037\253\055\245\056" +
    "\250\063\251\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\006\061\011\266\012\051\013\047\014\056\015" +
    "\050\017\037\052\054\060\045\001\001\000\002\001\001" +
    "\000\012\036\264\037\265\055\245\056\250\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\063\255\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\073\260\074\257\001\001\000\006\025\263\062\150" +
    "\001\001\000\044\006\203\015\164\016\201\020\174\021" +
    "\160\026\261\027\170\030\175\031\166\032\156\040\155" +
    "\041\162\042\172\050\202\052\054\054\204\057\151\001" +
    "\001\000\042\006\203\015\164\016\201\020\174\021\160" +
    "\027\262\030\175\031\166\032\156\040\155\041\162\042" +
    "\172\050\202\052\054\054\204\057\151\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\071\271\072\270\001\001" +
    "\000\006\025\273\062\150\001\001\000\044\006\203\015" +
    "\164\016\201\020\174\021\160\026\272\027\170\030\175" +
    "\031\166\032\156\040\155\041\162\042\172\050\202\052" +
    "\054\054\204\057\151\001\001\000\042\006\203\015\164" +
    "\016\201\020\174\021\160\027\262\030\175\031\166\032" +
    "\156\040\155\041\162\042\172\050\202\052\054\054\204" +
    "\057\151\001\001\000\002\001\001\000\004\060\275\001" +
    "\001\000\024\006\061\011\276\012\051\013\047\014\056" +
    "\015\050\017\037\052\054\060\045\001\001\000\004\061" +
    "\277\001\001\000\006\025\300\062\150\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\006" +
    "\061\011\304\012\051\013\047\014\056\015\050\017\037" +
    "\052\054\060\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\060\310\001\001\000\014" +
    "\021\313\043\312\044\314\047\316\050\317\001\001\000" +
    "\024\006\061\011\353\012\051\013\047\014\056\015\050" +
    "\017\037\052\054\060\045\001\001\000\004\061\351\001" +
    "\001\000\006\047\350\050\317\001\001\000\002\001\001" +
    "\000\004\101\322\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\050\321\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\006\061\011\324\012\051\013\047\014" +
    "\056\015\050\017\037\052\054\060\045\001\001\000\002" +
    "\001\001\000\024\006\061\011\326\012\051\013\047\014" +
    "\056\015\050\017\037\052\054\060\045\001\001\000\002" +
    "\001\001\000\014\015\331\016\335\045\332\046\330\050" +
    "\334\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\101\322\106\337\107\336\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\006\061\011\341\012\051\013\047\014" +
    "\056\015\050\017\037\052\054\060\045\001\001\000\002" +
    "\001\001\000\024\006\061\011\343\012\051\013\047\014" +
    "\056\015\050\017\037\052\054\060\045\001\001\000\002" +
    "\001\001\000\012\015\331\016\335\046\345\050\334\001" +
    "\001\000\002\001\001\000\014\015\331\016\335\045\347" +
    "\046\330\050\334\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\025\352\062\150\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\015\331\016\335\045\355\046" +
    "\330\050\334\001\001\000\002\001\001\000\014\015\331" +
    "\016\335\045\357\046\330\050\334\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\006\061\011\363\012\051" +
    "\013\047\014\056\015\050\017\037\052\054\060\045\061" +
    "\362\001\001\000\002\001\001\000\004\061\364\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\025\373\062\150\001\001\000\004\021\371\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\060\377\001\001\000\002\001\001" +
    "\000\010\010\u0100\021\143\061\u0101\001\001\000\004\061" +
    "\u0103\001\001\000\006\025\u0102\062\150\001\001\000\002" +
    "\001\001\000\006\025\u0104\062\150\001\001\000\002\001" +
    "\001\000\006\006\u0106\052\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserF$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserF$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserF$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public ScannerF s;
    int index;
    int nIB = 0;
    WordPainter painter;
    public ParserF(ScannerF s,WordPainter painter) {
        super(s);
        this.s = s;
        this.painter = painter;
    }
    public void syntax_error(Symbol sym) {
        painter.SERROR(sym.left,sym.right);
    }
    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception {}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserF$actions {
  private final ParserF parser;

  /** Constructor */
  CUP$ParserF$actions(ParserF parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserF$do_action_part00000000(
    int                        CUP$ParserF$act_num,
    java_cup.runtime.lr_parser CUP$ParserF$parser,
    java.util.Stack            CUP$ParserF$stack,
    int                        CUP$ParserF$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserF$result;

      /* select the action based on the action number */
      switch (CUP$ParserF$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INIT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		RESULT = start_val;
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserF$parser.done_parsing();
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INIT ::= INSTSGLOBAL 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INIT",0, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTSGLOBAL ::= INSTSGLOBAL INSTGLOBAL 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTSGLOBAL",1, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTSGLOBAL ::= INSTGLOBAL 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTSGLOBAL",1, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTGLOBAL ::= CALLMAINFUNC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTGLOBAL",2, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTGLOBAL ::= DECLID 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTGLOBAL",2, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTGLOBAL ::= DECLFUNC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTGLOBAL",2, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTGLOBAL ::= error 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTGLOBAL",2, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$0 ::= 
            {
              String RESULT =null;
		int mnleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int mnright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String mn = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW4(mnleft, mnright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$0",50, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CALLMAINFUNC ::= RW_main NT$0 CALLFUNC TK_semicolon 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int mnleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int mnright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String mn = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CALLMAINFUNC",3, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CALLFUNC ::= IDCOLORUSEFNC COLORLPAR LISTARGS COLORRPAR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CALLFUNC",4, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CALLFUNC ::= IDCOLORUSEFNC COLORLPAR COLORRPAR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CALLFUNC",4, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LISTARGS ::= LISTARGS TK_comma EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LISTARGS",5, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LISTARGS ::= EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LISTARGS",5, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLID ::= TYPE INITIDS TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DECLID",14, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INITIDS ::= INITIDS TK_comma INITID 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INITIDS",16, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INITIDS ::= INITID 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INITIDS",16, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$1 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.VARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$1",51, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INITID ::= TK_id NT$1 TK_equ EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INITID",17, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INITID ::= TK_id 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.VARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INITID",17, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLFUNC ::= TYPE IDCOLORFNC COLORLPAR LISTPARAMS COLORRPAR ENV 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DECLFUNC",18, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLFUNC ::= VOIDCOLOR IDCOLORFNC COLORLPAR LISTPARAMS COLORRPAR ENV 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DECLFUNC",18, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLFUNC ::= TYPE IDCOLORFNC COLORLPAR COLORRPAR ENV 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DECLFUNC",18, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLFUNC ::= VOIDCOLOR IDCOLORFNC COLORLPAR COLORRPAR ENV 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DECLFUNC",18, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // IDCOLORFNC ::= TK_id 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.FNC(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("IDCOLORFNC",39, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // IDCOLORUSEFNC ::= TK_id 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.USEFNC(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("IDCOLORUSEFNC",40, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VOIDCOLOR ::= RW_void 
            {
              String RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String vd = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(vdleft, vdright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("VOIDCOLOR",41, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LISTPARAMS ::= LISTPARAMS TK_comma TYPE TK_id 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.VARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LISTPARAMS",6, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LISTPARAMS ::= TYPE TK_id 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.VARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LISTPARAMS",6, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$2 ::= 
            {
              String RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String el = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(elleft, elright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$2",52, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // IFSTRUCT ::= IFCOLOR COLORLPAR EXP COLORRPAR ENV RW_else NT$2 IFSTRUCT 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String el = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("IFSTRUCT",23, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-7)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$3 ::= 
            {
              String RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String el = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(elleft, elright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$3",53, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // IFSTRUCT ::= IFCOLOR COLORLPAR EXP COLORRPAR ENV RW_else NT$3 ENV 
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String el = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("IFSTRUCT",23, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-7)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // IFSTRUCT ::= IFCOLOR COLORLPAR EXP COLORRPAR ENV 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("IFSTRUCT",23, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // IFCOLOR ::= RW_if 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(ileft, iright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("IFCOLOR",42, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$4 ::= 
            {
              String RESULT =null;
		int swleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String sw = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(swleft, swright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$4",54, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SWITCHSTRUCT ::= RW_switch NT$4 COLORLPAR EXP COLORRPAR ENVS 
            {
              String RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)).value;
		int swleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).left;
		int swright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).right;
		String sw = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("SWITCHSTRUCT",24, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ENVS ::= COLORLBRC CASESDEFAULT COLORRBRC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ENVS",25, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ENVS ::= COLORLBRC COLORRBRC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ENVS",25, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CASESDEFAULT ::= CASES DEFAULT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASESDEFAULT",26, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CASESDEFAULT ::= CASES 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASESDEFAULT",26, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CASESDEFAULT ::= DEFAULT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASESDEFAULT",26, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CASES ::= CASES CASE 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASES",27, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CASES ::= CASE 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASES",27, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$5 ::= 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.SYMBS1(cleft, cright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$5",55, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CASE ::= CASECOLOR EXP TK_colon NT$5 INSTRUCTIONS 
            {
              String RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASE",29, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$6 ::= 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.SYMBS1(cleft, cright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$6",56, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CASE ::= CASECOLOR EXP TK_colon NT$6 ENV 
            {
              String RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASE",29, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CASE ::= CASECOLOR EXP TK_colon 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.SYMBS1(cleft, cright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASE",29, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CASECOLOR ::= RW_case 
            {
              String RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String cs = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(csleft, csright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASECOLOR",43, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$7 ::= 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.SYMBS1(cleft, cright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$7",57, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DEFAULT ::= DEFAULTCOLOR TK_colon NT$7 INSTRUCTIONS 
            {
              String RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DEFAULT",28, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$8 ::= 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.SYMBS1(cleft, cright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$8",58, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DEFAULT ::= DEFAULTCOLOR TK_colon NT$8 ENV 
            {
              String RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DEFAULT",28, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DEFAULT ::= DEFAULTCOLOR TK_colon 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.SYMBS1(cleft, cright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DEFAULT",28, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DEFAULTCOLOR ::= RW_default 
            {
              String RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String df = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(dfleft, dfright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DEFAULTCOLOR",44, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$9 ::= 
            {
              String RESULT =null;
		int frleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int frright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String fr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(frleft, frright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$9",59, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LOOPFOR ::= RW_for NT$9 COLORLPAR ARGSFOR COLORRPAR ENV 
            {
              String RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)).value;
		int frleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).left;
		int frright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).right;
		String fr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOOPFOR",32, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ARGSFOR ::= INITIALIZE TK_semicolon EXP TK_semicolon UPDATESFOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARGSFOR",33, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ARGSFOR ::= INITIALIZE TK_semicolon EXP TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARGSFOR",33, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ARGSFOR ::= INITIALIZE TK_semicolon TK_semicolon UPDATESFOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARGSFOR",33, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ARGSFOR ::= TK_semicolon EXP TK_semicolon UPDATESFOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARGSFOR",33, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ARGSFOR ::= INITIALIZE TK_semicolon TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARGSFOR",33, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ARGSFOR ::= TK_semicolon EXP TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARGSFOR",33, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ARGSFOR ::= TK_semicolon TK_semicolon UPDATESFOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARGSFOR",33, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ARGSFOR ::= TK_semicolon TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARGSFOR",33, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // INITIALIZE ::= TYPE REASIGNS 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INITIALIZE",34, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // INITIALIZE ::= REASIGNS 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INITIALIZE",34, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // REASIGNS ::= REASIGNS TK_comma REASIGN 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("REASIGNS",37, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // REASIGNS ::= REASIGN 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("REASIGNS",37, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // UPDATESFOR ::= UPDATESFOR TK_comma UPDATEFOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("UPDATESFOR",35, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // UPDATESFOR ::= UPDATEFOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("UPDATESFOR",35, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // UPDATEFOR ::= INCDEC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("UPDATEFOR",36, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // UPDATEFOR ::= REASIGN 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("UPDATEFOR",36, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // UPDATEFOR ::= ADDSUB 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("UPDATEFOR",36, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$10 ::= 
            {
              String RESULT =null;
		int whlleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int whlright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String whl = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(whlleft, whlright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$10",60, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // LOOPWHILE ::= RW_while NT$10 COLORLPAR EXP COLORRPAR ENV 
            {
              String RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)).value;
		int whlleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).left;
		int whlright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).right;
		String whl = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOOPWHILE",30, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$11 ::= 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(dleft, dright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$11",61, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$12 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;
		int whlleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int whlright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String whl = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(whlleft, whlright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$12",62, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // LOOPDOWHILE ::= RW_do NT$11 ENV RW_while NT$12 COLORLPAR EXP COLORRPAR TK_semicolon 
            {
              String RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-8)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-8)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-8)).value;
		int whlleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).left;
		int whlright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).right;
		String whl = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOOPDOWHILE",31, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-8)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$13 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.USEVARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$13",63, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // REASIGN ::= TK_id NT$13 TK_equ EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("REASIGN",38, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ENV ::= COLORLBRC INSTRUCTIONS COLORRBRC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ENV",19, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ENV ::= COLORLBRC COLORRBRC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ENV",19, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // INSTRUCTIONS ::= INSTRUCTIONS INSTRUCTION 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",20, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // INSTRUCTIONS ::= INSTRUCTION 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",20, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // INSTRUCTION ::= DECLID 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",21, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // INSTRUCTION ::= IFSTRUCT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",21, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // INSTRUCTION ::= SWITCHSTRUCT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",21, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // INSTRUCTION ::= LOOPFOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",21, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // INSTRUCTION ::= LOOPWHILE 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",21, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // INSTRUCTION ::= LOOPDOWHILE 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",21, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // INSTRUCTION ::= PRINT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",21, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // INSTRUCTION ::= ADDSUB TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",21, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // INSTRUCTION ::= REASIGN TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",21, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // INSTRUCTION ::= INCDEC TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",21, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // INSTRUCTION ::= CALLFUNC TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",21, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$14 ::= 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(tleft, tright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$14",64, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // INSTRUCTION ::= RW_return NT$14 EXP TK_semicolon 
            {
              String RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",21, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$15 ::= 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(tleft, tright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$15",65, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // INSTRUCTION ::= RW_return NT$15 TK_semicolon 
            {
              String RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",21, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // NT$16 ::= 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(tleft, tright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$16",66, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // INSTRUCTION ::= RW_continue NT$16 TK_semicolon 
            {
              String RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",21, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$17 ::= 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(tleft, tright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$17",67, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // INSTRUCTION ::= RW_break NT$17 TK_semicolon 
            {
              String RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",21, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // INSTRUCTION ::= error 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",21, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // PRINT ::= PRINTCOLOR COLORLPAR EXP COLORRPAR TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("PRINT",22, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // PRINT ::= PRINTCOLOR COLORLPAR COLORRPAR TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("PRINT",22, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // PRINTCOLOR ::= RW_print 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.USEFNC(pleft, pright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("PRINTCOLOR",45, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // TYPE ::= RW_String 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW5(tpleft, tpright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TYPE",15, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // TYPE ::= RW_int 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(tpleft, tpright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TYPE",15, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // TYPE ::= RW_boolean 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(tpleft, tpright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TYPE",15, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // TYPE ::= RW_char 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(tpleft, tpright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TYPE",15, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // TYPE ::= RW_double 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(tpleft, tpright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TYPE",15, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXP ::= ARITHMETICS 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXP ::= RELATIONALS 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXP ::= LOGICS 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXP ::= INCDEC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXP ::= CALLFUNC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EXP ::= TERNARY 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // EXP ::= TK_id 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.USEVARIABLE(trleft, trright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // EXP ::= TK_string 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.STRING(trleft, trright);     
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // EXP ::= TK_char 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.CHAR(trleft, trright);       
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // EXP ::= TK_int 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.NUMBER(trleft, trright);     
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // EXP ::= TK_double 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.NUMBER(trleft, trright);     
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // EXP ::= RW_true 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW3(trleft, trright);        
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // EXP ::= RW_false 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW3(trleft, trright);        
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // EXP ::= COLORLPAR EXP COLORRPAR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // INCDEC ::= TK_id TK_inc 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		painter.USEVARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INCDEC",11, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // INCDEC ::= TK_id TK_dec 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		painter.USEVARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INCDEC",11, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // NT$18 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.USEVARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$18",68, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ADDSUB ::= TK_id NT$18 TK_add EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ADDSUB",12, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // NT$19 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.USEVARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$19",69, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ADDSUB ::= TK_id NT$19 TK_sub EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ADDSUB",12, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // NT$20 ::= 
            {
              String RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String q = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.SYMBS1(qleft, qright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$20",70, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // NT$21 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String q = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.SYMBS1(cleft, cright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$21",71, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // TERNARY ::= EXP TK_question NT$20 EXP TK_colon NT$21 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).right;
		String q = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TERNARY",13, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-6)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ARITHMETICS ::= EXP TK_plus EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ARITHMETICS ::= EXP TK_minus EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ARITHMETICS ::= EXP TK_mult EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ARITHMETICS ::= EXP TK_div EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ARITHMETICS ::= EXP TK_pow EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ARITHMETICS ::= EXP TK_mod EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ARITHMETICS ::= TK_minus EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // RELATIONALS ::= EXP TK_equequ EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",9, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // RELATIONALS ::= EXP TK_notequ EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",9, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // RELATIONALS ::= EXP TK_lessequ EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",9, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // RELATIONALS ::= EXP TK_moreequ EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",9, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // RELATIONALS ::= EXP TK_less EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",9, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // RELATIONALS ::= EXP TK_more EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",9, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // LOGICS ::= EXP TK_and EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOGICS",10, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // LOGICS ::= EXP TK_or EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOGICS",10, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // LOGICS ::= TK_not EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOGICS",10, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // COLORLBRC ::= TK_lbrc 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.BRKT(nIB, lleft, lright); nIB ++;
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORLBRC",48, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // COLORRBRC ::= TK_rbrc 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		nIB --; painter.BRKT(nIB, rleft, rright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORRBRC",49, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // COLORLPAR ::= TK_lpar 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.BRKT(nIB, lleft, lright); nIB ++;
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORLPAR",46, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // COLORRPAR ::= TK_rpar 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		nIB --; painter.BRKT(nIB, rleft, rright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORRPAR",47, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserF$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserF$do_action(
    int                        CUP$ParserF$act_num,
    java_cup.runtime.lr_parser CUP$ParserF$parser,
    java.util.Stack            CUP$ParserF$stack,
    int                        CUP$ParserF$top)
    throws java.lang.Exception
    {
              return CUP$ParserF$do_action_part00000000(
                               CUP$ParserF$act_num,
                               CUP$ParserF$parser,
                               CUP$ParserF$stack,
                               CUP$ParserF$top);
    }
}

}
