
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Language;

import java_cup.runtime.*;
import Painter.WordPainter;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserF extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return TOK.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserF() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserF(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserF(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\230\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\063\002\000" +
    "\002\005\006\000\002\006\006\000\002\006\005\000\002" +
    "\007\005\000\002\007\003\000\002\020\005\000\002\022" +
    "\005\000\002\022\003\000\002\064\002\000\002\023\006" +
    "\000\002\023\003\000\002\024\010\000\002\024\010\000" +
    "\002\024\007\000\002\024\007\000\002\051\003\000\002" +
    "\052\003\000\002\010\006\000\002\010\004\000\002\065" +
    "\002\000\002\031\012\000\002\066\002\000\002\031\012" +
    "\000\002\031\007\000\002\053\003\000\002\067\002\000" +
    "\002\032\010\000\002\033\005\000\002\033\004\000\002" +
    "\034\004\000\002\034\003\000\002\034\003\000\002\035" +
    "\004\000\002\035\003\000\002\037\006\000\002\037\006" +
    "\000\002\037\005\000\002\054\003\000\002\036\005\000" +
    "\002\036\005\000\002\036\004\000\002\055\003\000\002" +
    "\070\002\000\002\042\010\000\002\043\007\000\002\043" +
    "\006\000\002\043\006\000\002\043\006\000\002\043\005" +
    "\000\002\043\005\000\002\043\005\000\002\043\004\000" +
    "\002\044\004\000\002\044\003\000\002\047\005\000\002" +
    "\047\003\000\002\045\005\000\002\045\003\000\002\046" +
    "\003\000\002\046\003\000\002\046\003\000\002\071\002" +
    "\000\002\040\010\000\002\072\002\000\002\073\002\000" +
    "\002\041\013\000\002\074\002\000\002\050\006\000\002" +
    "\025\005\000\002\025\004\000\002\026\004\000\002\026" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\004\000\002\027\004\000\002" +
    "\027\004\000\002\027\004\000\002\075\002\000\002\027" +
    "\006\000\002\076\002\000\002\027\005\000\002\077\002" +
    "\000\002\027\005\000\002\100\002\000\002\027\005\000" +
    "\002\027\003\000\002\030\007\000\002\030\006\000\002" +
    "\056\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\005" +
    "\000\002\015\004\000\002\015\004\000\002\101\002\000" +
    "\002\016\006\000\002\102\002\000\002\016\006\000\002" +
    "\103\002\000\002\104\002\000\002\017\011\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\004\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\004\000\002\061\003" +
    "\000\002\062\003\000\002\057\003\000\002\060\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0102\000\022\003\020\004\012\005\016\006\006\007" +
    "\005\010\004\011\013\012\010\001\002\000\004\035\uff96" +
    "\001\002\000\004\035\uff97\001\002\000\004\035\uff99\001" +
    "\002\000\024\002\ufffb\003\ufffb\004\ufffb\005\ufffb\006\ufffb" +
    "\007\ufffb\010\ufffb\011\ufffb\012\ufffb\001\002\000\004\035" +
    "\uff95\001\002\000\024\002\ufffe\003\ufffe\004\ufffe\005\ufffe" +
    "\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe\001\002\000" +
    "\004\035\ufff9\001\002\000\004\035\uff98\001\002\000\004" +
    "\035\373\001\002\000\024\002\ufffc\003\ufffc\004\ufffc\005" +
    "\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\001\002" +
    "\000\004\035\uffe8\001\002\000\004\035\030\001\002\000" +
    "\024\002\ufffa\003\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa" +
    "\010\ufffa\011\ufffa\012\ufffa\001\002\000\024\002\ufffd\003" +
    "\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd" +
    "\012\ufffd\001\002\000\024\002\000\003\020\004\012\005" +
    "\016\006\006\007\005\010\004\011\013\012\010\001\002" +
    "\000\004\002\024\001\002\000\004\002\001\001\002\000" +
    "\024\002\uffff\003\uffff\004\uffff\005\uffff\006\uffff\007\uffff" +
    "\010\uffff\011\uffff\012\uffff\001\002\000\006\067\ufff1\071" +
    "\ufff1\001\002\000\004\063\060\001\002\000\012\055\ufff0" +
    "\063\uffe9\067\uffee\071\uffee\001\002\000\006\067\033\071" +
    "\032\001\002\000\056\002\ufff3\003\ufff3\004\ufff3\005\ufff3" +
    "\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\015" +
    "\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3" +
    "\024\ufff3\025\ufff3\030\ufff3\035\ufff3\066\ufff3\001\002\000" +
    "\004\035\035\001\002\000\006\067\ufff2\071\ufff2\001\002" +
    "\000\010\055\ufff0\067\uffee\071\uffee\001\002\000\004\055" +
    "\037\001\002\000\026\026\062\027\041\031\044\032\042" +
    "\033\053\034\054\035\043\043\045\062\055\063\060\001" +
    "\002\000\050\042\uff8f\043\uff8f\044\uff8f\045\uff8f\046\uff8f" +
    "\047\uff8f\051\uff8f\052\uff8f\053\uff8f\054\uff8f\056\uff8f\057" +
    "\uff8f\060\uff8f\061\uff8f\064\uff8f\067\uff8f\070\uff8f\071\uff8f" +
    "\072\uff8f\001\002\000\050\042\uff88\043\uff88\044\uff88\045" +
    "\uff88\046\uff88\047\uff88\051\uff88\052\uff88\053\uff88\054\uff88" +
    "\056\uff88\057\uff88\060\uff88\061\uff88\064\uff88\067\uff88\070" +
    "\uff88\071\uff88\072\uff88\001\002\000\050\042\uff8d\043\uff8d" +
    "\044\uff8d\045\uff8d\046\uff8d\047\uff8d\051\uff8d\052\uff8d\053" +
    "\uff8d\054\uff8d\056\uff8d\057\uff8d\060\uff8d\061\uff8d\064\uff8d" +
    "\067\uff8d\070\uff8d\071\uff8d\072\uff8d\001\002\000\056\036" +
    "\141\037\142\042\uff8a\043\uff8a\044\uff8a\045\uff8a\046\uff8a" +
    "\047\uff8a\051\uff8a\052\uff8a\053\uff8a\054\uff8a\056\uff8a\057" +
    "\uff8a\060\uff8a\061\uff8a\063\uffe9\064\uff8a\067\uff8a\070\uff8a" +
    "\071\uff8a\072\uff8a\001\002\000\050\042\uff8e\043\uff8e\044" +
    "\uff8e\045\uff8e\046\uff8e\047\uff8e\051\uff8e\052\uff8e\053\uff8e" +
    "\054\uff8e\056\uff8e\057\uff8e\060\uff8e\061\uff8e\064\uff8e\067" +
    "\uff8e\070\uff8e\071\uff8e\072\uff8e\001\002\000\026\026\062" +
    "\027\041\031\044\032\042\033\053\034\054\035\043\043" +
    "\045\062\055\063\060\001\002\000\026\026\062\027\041" +
    "\031\044\032\042\033\053\034\054\035\043\043\045\062" +
    "\055\063\060\001\002\000\044\042\103\043\071\044\101" +
    "\045\100\046\072\047\074\051\077\052\102\053\070\054" +
    "\075\056\105\057\104\060\106\061\073\067\uffef\071\uffef" +
    "\072\076\001\002\000\050\042\uff93\043\uff93\044\uff93\045" +
    "\uff93\046\uff93\047\uff93\051\uff93\052\uff93\053\uff93\054\uff93" +
    "\056\uff93\057\uff93\060\uff93\061\uff93\064\uff93\067\uff93\070" +
    "\uff93\071\uff93\072\uff93\001\002\000\050\042\uff91\043\uff91" +
    "\044\uff91\045\uff91\046\uff91\047\uff91\051\uff91\052\uff91\053" +
    "\uff91\054\uff91\056\uff91\057\uff91\060\uff91\061\uff91\064\uff91" +
    "\067\uff91\070\uff91\071\uff91\072\uff91\001\002\000\050\042" +
    "\uff94\043\uff94\044\uff94\045\uff94\046\uff94\047\uff94\051\uff94" +
    "\052\uff94\053\uff94\054\uff94\056\uff94\057\uff94\060\uff94\061" +
    "\uff94\064\uff94\067\uff94\070\uff94\071\uff94\072\uff94\001\002" +
    "\000\050\042\uff8c\043\uff8c\044\uff8c\045\uff8c\046\uff8c\047" +
    "\uff8c\051\uff8c\052\uff8c\053\uff8c\054\uff8c\056\uff8c\057\uff8c" +
    "\060\uff8c\061\uff8c\064\uff8c\067\uff8c\070\uff8c\071\uff8c\072" +
    "\uff8c\001\002\000\050\042\uff8b\043\uff8b\044\uff8b\045\uff8b" +
    "\046\uff8b\047\uff8b\051\uff8b\052\uff8b\053\uff8b\054\uff8b\056" +
    "\uff8b\057\uff8b\060\uff8b\061\uff8b\064\uff8b\067\uff8b\070\uff8b" +
    "\071\uff8b\072\uff8b\001\002\000\026\026\062\027\041\031" +
    "\044\032\042\033\053\034\054\035\043\043\045\062\055" +
    "\063\060\001\002\000\050\042\uff90\043\uff90\044\uff90\045" +
    "\uff90\046\uff90\047\uff90\051\uff90\052\uff90\053\uff90\054\uff90" +
    "\056\uff90\057\uff90\060\uff90\061\uff90\064\uff90\067\uff90\070" +
    "\uff90\071\uff90\072\uff90\001\002\000\050\042\uff92\043\uff92" +
    "\044\uff92\045\uff92\046\uff92\047\uff92\051\uff92\052\uff92\053" +
    "\uff92\054\uff92\056\uff92\057\uff92\060\uff92\061\uff92\064\uff92" +
    "\067\uff92\070\uff92\071\uff92\072\uff92\001\002\000\044\006" +
    "\uff6b\007\uff6b\010\uff6b\011\uff6b\012\uff6b\026\uff6b\027\uff6b" +
    "\031\uff6b\032\uff6b\033\uff6b\034\uff6b\035\uff6b\043\uff6b\062" +
    "\uff6b\063\uff6b\064\uff6b\071\uff6b\001\002\000\004\063\060" +
    "\001\002\000\050\042\uff89\043\uff89\044\uff89\045\uff89\046" +
    "\uff89\047\uff89\051\uff89\052\uff89\053\uff89\054\uff89\056\uff89" +
    "\057\uff89\060\uff89\061\uff89\064\uff89\067\uff89\070\uff89\071" +
    "\uff89\072\uff89\001\002\000\030\026\062\027\041\031\044" +
    "\032\042\033\053\034\054\035\043\043\045\062\055\063" +
    "\060\064\067\001\002\000\006\064\067\067\133\001\002" +
    "\000\050\042\ufff6\043\ufff6\044\ufff6\045\ufff6\046\ufff6\047" +
    "\ufff6\051\ufff6\052\ufff6\053\ufff6\054\ufff6\056\ufff6\057\ufff6" +
    "\060\ufff6\061\ufff6\064\ufff6\067\ufff6\070\ufff6\071\ufff6\072" +
    "\ufff6\001\002\000\044\042\103\043\071\044\101\045\100" +
    "\046\072\047\074\051\077\052\102\053\070\054\075\056" +
    "\105\057\104\060\106\061\073\064\ufff4\067\ufff4\072\076" +
    "\001\002\000\052\042\uff6a\043\uff6a\044\uff6a\045\uff6a\046" +
    "\uff6a\047\uff6a\051\uff6a\052\uff6a\053\uff6a\054\uff6a\056\uff6a" +
    "\057\uff6a\060\uff6a\061\uff6a\064\uff6a\065\uff6a\067\uff6a\070" +
    "\uff6a\071\uff6a\072\uff6a\001\002\000\026\026\062\027\041" +
    "\031\044\032\042\033\053\034\054\035\043\043\045\062" +
    "\055\063\060\001\002\000\026\026\062\027\041\031\044" +
    "\032\042\033\053\034\054\035\043\043\045\062\055\063" +
    "\060\001\002\000\026\026\062\027\041\031\044\032\042" +
    "\033\053\034\054\035\043\043\045\062\055\063\060\001" +
    "\002\000\026\026\062\027\041\031\044\032\042\033\053" +
    "\034\054\035\043\043\045\062\055\063\060\001\002\000" +
    "\026\026\062\027\041\031\044\032\042\033\053\034\054" +
    "\035\043\043\045\062\055\063\060\001\002\000\026\026" +
    "\062\027\041\031\044\032\042\033\053\034\054\035\043" +
    "\043\045\062\055\063\060\001\002\000\026\026\uff80\027" +
    "\uff80\031\uff80\032\uff80\033\uff80\034\uff80\035\uff80\043\uff80" +
    "\062\uff80\063\uff80\001\002\000\026\026\062\027\041\031" +
    "\044\032\042\033\053\034\054\035\043\043\045\062\055" +
    "\063\060\001\002\000\026\026\062\027\041\031\044\032" +
    "\042\033\053\034\054\035\043\043\045\062\055\063\060" +
    "\001\002\000\026\026\062\027\041\031\044\032\042\033" +
    "\053\034\054\035\043\043\045\062\055\063\060\001\002" +
    "\000\026\026\062\027\041\031\044\032\042\033\053\034" +
    "\054\035\043\043\045\062\055\063\060\001\002\000\026" +
    "\026\062\027\041\031\044\032\042\033\053\034\054\035" +
    "\043\043\045\062\055\063\060\001\002\000\026\026\062" +
    "\027\041\031\044\032\042\033\053\034\054\035\043\043" +
    "\045\062\055\063\060\001\002\000\026\026\062\027\041" +
    "\031\044\032\042\033\053\034\054\035\043\043\045\062" +
    "\055\063\060\001\002\000\026\026\062\027\041\031\044" +
    "\032\042\033\053\034\054\035\043\043\045\062\055\063" +
    "\060\001\002\000\050\042\103\043\071\044\101\045\100" +
    "\046\072\047\074\051\077\052\102\053\070\054\075\056" +
    "\105\057\104\060\uff70\061\uff70\064\uff70\067\uff70\070\uff70" +
    "\071\uff70\072\uff70\001\002\000\050\042\103\043\071\044" +
    "\101\045\100\046\072\047\074\051\uff72\052\uff72\053\uff72" +
    "\054\uff72\056\uff72\057\uff72\060\uff72\061\uff72\064\uff72\067" +
    "\uff72\070\uff72\071\uff72\072\uff72\001\002\000\050\042\103" +
    "\043\071\044\101\045\100\046\072\047\074\051\uff71\052" +
    "\uff71\053\uff71\054\uff71\056\uff71\057\uff71\060\uff71\061\uff71" +
    "\064\uff71\067\uff71\070\uff71\071\uff71\072\uff71\001\002\000" +
    "\050\042\uff7d\043\uff7d\044\101\045\100\046\072\047\074" +
    "\051\uff7d\052\uff7d\053\uff7d\054\uff7d\056\uff7d\057\uff7d\060" +
    "\uff7d\061\uff7d\064\uff7d\067\uff7d\070\uff7d\071\uff7d\072\uff7d" +
    "\001\002\000\050\042\103\043\071\044\101\045\100\046" +
    "\072\047\074\051\uff75\052\uff75\053\070\054\075\056\105" +
    "\057\104\060\uff75\061\uff75\064\uff75\067\uff75\070\uff75\071" +
    "\uff75\072\uff75\001\002\000\050\042\uff7b\043\uff7b\044\uff7b" +
    "\045\uff7b\046\072\047\uff7b\051\uff7b\052\uff7b\053\uff7b\054" +
    "\uff7b\056\uff7b\057\uff7b\060\uff7b\061\uff7b\064\uff7b\067\uff7b" +
    "\070\uff7b\071\uff7b\072\uff7b\001\002\000\050\042\uff7a\043" +
    "\uff7a\044\uff7a\045\uff7a\046\072\047\uff7a\051\uff7a\052\uff7a" +
    "\053\uff7a\054\uff7a\056\uff7a\057\uff7a\060\uff7a\061\uff7a\064" +
    "\uff7a\067\uff7a\070\uff7a\071\uff7a\072\uff7a\001\002\000\050" +
    "\042\103\043\071\044\101\045\100\046\072\047\074\051" +
    "\uff76\052\uff76\053\070\054\075\056\105\057\104\060\uff76" +
    "\061\uff76\064\uff76\067\uff76\070\uff76\071\uff76\072\uff76\001" +
    "\002\000\026\026\062\027\041\031\044\032\042\033\053" +
    "\034\054\035\043\043\045\062\055\063\060\001\002\000" +
    "\042\042\103\043\071\044\101\045\100\046\072\047\074" +
    "\051\077\052\102\053\070\054\075\056\105\057\104\060" +
    "\106\061\073\070\121\072\076\001\002\000\026\026\uff7f" +
    "\027\uff7f\031\uff7f\032\uff7f\033\uff7f\034\uff7f\035\uff7f\043" +
    "\uff7f\062\uff7f\063\uff7f\001\002\000\026\026\062\027\041" +
    "\031\044\032\042\033\053\034\054\035\043\043\045\062" +
    "\055\063\060\001\002\000\050\042\103\043\071\044\101" +
    "\045\100\046\072\047\074\051\077\052\102\053\070\054" +
    "\075\056\105\057\104\060\106\061\073\064\uff7e\067\uff7e" +
    "\070\uff7e\071\uff7e\072\uff7e\001\002\000\050\042\103\043" +
    "\071\044\101\045\100\046\072\047\074\051\uff73\052\uff73" +
    "\053\uff73\054\uff73\056\uff73\057\uff73\060\uff73\061\uff73\064" +
    "\uff73\067\uff73\070\uff73\071\uff73\072\uff73\001\002\000\050" +
    "\042\uff78\043\uff78\044\uff78\045\uff78\046\072\047\uff78\051" +
    "\uff78\052\uff78\053\uff78\054\uff78\056\uff78\057\uff78\060\uff78" +
    "\061\uff78\064\uff78\067\uff78\070\uff78\071\uff78\072\uff78\001" +
    "\002\000\050\042\103\043\071\044\101\045\100\046\072" +
    "\047\074\051\077\052\102\053\070\054\075\056\105\057" +
    "\104\060\106\061\uff6f\064\uff6f\067\uff6f\070\uff6f\071\uff6f" +
    "\072\uff6f\001\002\000\046\042\uff79\043\uff79\044\uff79\045" +
    "\uff79\047\uff79\051\uff79\052\uff79\053\uff79\054\uff79\056\uff79" +
    "\057\uff79\060\uff79\061\uff79\064\uff79\067\uff79\070\uff79\071" +
    "\uff79\072\uff79\001\002\000\050\042\uff7c\043\uff7c\044\101" +
    "\045\100\046\072\047\074\051\uff7c\052\uff7c\053\uff7c\054" +
    "\uff7c\056\uff7c\057\uff7c\060\uff7c\061\uff7c\064\uff7c\067\uff7c" +
    "\070\uff7c\071\uff7c\072\uff7c\001\002\000\050\042\103\043" +
    "\071\044\101\045\100\046\072\047\074\051\uff74\052\uff74" +
    "\053\uff74\054\uff74\056\uff74\057\uff74\060\uff74\061\uff74\064" +
    "\uff74\067\uff74\070\uff74\071\uff74\072\uff74\001\002\000\050" +
    "\042\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7\047\ufff7\051" +
    "\ufff7\052\ufff7\053\ufff7\054\ufff7\056\ufff7\057\ufff7\060\ufff7" +
    "\061\ufff7\064\ufff7\067\ufff7\070\ufff7\071\ufff7\072\ufff7\001" +
    "\002\000\026\026\062\027\041\031\044\032\042\033\053" +
    "\034\054\035\043\043\045\062\055\063\060\001\002\000" +
    "\044\042\103\043\071\044\101\045\100\046\072\047\074" +
    "\051\077\052\102\053\070\054\075\056\105\057\104\060" +
    "\106\061\073\064\ufff5\067\ufff5\072\076\001\002\000\050" +
    "\042\103\043\071\044\101\045\100\046\072\047\074\051" +
    "\077\052\102\053\070\054\075\056\105\057\104\060\uff6e" +
    "\061\uff6e\064\uff6e\067\uff6e\070\uff6e\071\uff6e\072\uff6e\001" +
    "\002\000\042\042\103\043\071\044\101\045\100\046\072" +
    "\047\074\051\077\052\102\053\070\054\075\056\105\057" +
    "\104\060\106\061\073\064\067\072\076\001\002\000\050" +
    "\042\uff87\043\uff87\044\uff87\045\uff87\046\uff87\047\uff87\051" +
    "\uff87\052\uff87\053\uff87\054\uff87\056\uff87\057\uff87\060\uff87" +
    "\061\uff87\064\uff87\067\uff87\070\uff87\071\uff87\072\uff87\001" +
    "\002\000\050\042\uff77\043\uff77\044\uff77\045\uff77\046\uff77" +
    "\047\uff77\051\uff77\052\uff77\053\uff77\054\uff77\056\uff77\057" +
    "\uff77\060\uff77\061\uff77\064\uff77\067\uff77\070\uff77\071\uff77" +
    "\072\uff77\001\002\000\050\042\uff86\043\uff86\044\uff86\045" +
    "\uff86\046\uff86\047\uff86\051\uff86\052\uff86\053\uff86\054\uff86" +
    "\056\uff86\057\uff86\060\uff86\061\uff86\064\uff86\067\uff86\070" +
    "\uff86\071\uff86\072\uff86\001\002\000\050\042\uff85\043\uff85" +
    "\044\uff85\045\uff85\046\uff85\047\uff85\051\uff85\052\uff85\053" +
    "\uff85\054\uff85\056\uff85\057\uff85\060\uff85\061\uff85\064\uff85" +
    "\067\uff85\070\uff85\071\uff85\072\uff85\001\002\000\016\006" +
    "\006\007\005\010\004\011\013\012\010\064\067\001\002" +
    "\000\006\064\067\067\366\001\002\000\004\035\364\001" +
    "\002\000\004\065\150\001\002\000\024\002\uffeb\003\uffeb" +
    "\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012" +
    "\uffeb\001\002\000\050\003\uff6d\006\uff6d\007\uff6d\010\uff6d" +
    "\011\uff6d\012\uff6d\013\uff6d\015\uff6d\016\uff6d\017\uff6d\020" +
    "\uff6d\021\uff6d\022\uff6d\023\uff6d\024\uff6d\025\uff6d\030\uff6d" +
    "\035\uff6d\066\uff6d\001\002\000\044\003\177\006\006\007" +
    "\005\010\004\011\013\012\010\013\175\015\163\016\166" +
    "\017\201\020\170\023\206\024\200\025\162\030\153\035" +
    "\155\066\154\001\002\000\004\063\060\001\002\000\004" +
    "\063\uff9a\001\002\000\060\002\uff6c\003\uff6c\004\uff6c\005" +
    "\uff6c\006\uff6c\007\uff6c\010\uff6c\011\uff6c\012\uff6c\013\uff6c" +
    "\014\uff6c\015\uff6c\016\uff6c\017\uff6c\020\uff6c\021\uff6c\022" +
    "\uff6c\023\uff6c\024\uff6c\025\uff6c\030\uff6c\035\uff6c\066\uff6c" +
    "\001\002\000\016\036\141\037\142\040\uff84\041\uff82\055" +
    "\uffb6\063\uffe9\001\002\000\050\003\uffac\006\uffac\007\uffac" +
    "\010\uffac\011\uffac\012\uffac\013\uffac\015\uffac\016\uffac\017" +
    "\uffac\020\uffac\021\uffac\022\uffac\023\uffac\024\uffac\025\uffac" +
    "\030\uffac\035\uffac\066\uffac\001\002\000\050\003\uffae\006" +
    "\uffae\007\uffae\010\uffae\011\uffae\012\uffae\013\uffae\015\uffae" +
    "\016\uffae\017\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024" +
    "\uffae\025\uffae\030\uffae\035\uffae\066\uffae\001\002\000\044" +
    "\003\177\006\006\007\005\010\004\011\013\012\010\013" +
    "\175\015\163\016\166\017\201\020\170\023\206\024\200" +
    "\025\162\030\153\035\155\066\154\001\002\000\004\035" +
    "\035\001\002\000\030\026\uffa5\027\uffa5\031\uffa5\032\uffa5" +
    "\033\uffa5\034\uffa5\035\uffa5\043\uffa5\062\uffa5\063\uffa5\071" +
    "\uffa3\001\002\000\004\063\uffce\001\002\000\050\003\uffab" +
    "\006\uffab\007\uffab\010\uffab\011\uffab\012\uffab\013\uffab\015" +
    "\uffab\016\uffab\017\uffab\020\uffab\021\uffab\022\uffab\023\uffab" +
    "\024\uffab\025\uffab\030\uffab\035\uffab\066\uffab\001\002\000" +
    "\004\071\276\001\002\000\004\063\uffbb\001\002\000\050" +
    "\003\uffaf\006\uffaf\007\uffaf\010\uffaf\011\uffaf\012\uffaf\013" +
    "\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf" +
    "\023\uffaf\024\uffaf\025\uffaf\030\uffaf\035\uffaf\066\uffaf\001" +
    "\002\000\004\063\uffdf\001\002\000\050\003\uffb1\006\uffb1" +
    "\007\uffb1\010\uffb1\011\uffb1\012\uffb1\013\uffb1\015\uffb1\016" +
    "\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1" +
    "\025\uffb1\030\uffb1\035\uffb1\066\uffb1\001\002\000\060\002" +
    "\uffb3\003\uffb3\004\uffb3\005\uffb3\006\uffb3\007\uffb3\010\uffb3" +
    "\011\uffb3\012\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3\017" +
    "\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3" +
    "\030\uffb3\035\uffb3\066\uffb3\001\002\000\050\003\uffb0\006" +
    "\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0\015\uffb0" +
    "\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024" +
    "\uffb0\025\uffb0\030\uffb0\035\uffb0\066\uffb0\001\002\000\050" +
    "\003\uffad\006\uffad\007\uffad\010\uffad\011\uffad\012\uffad\013" +
    "\uffad\015\uffad\016\uffad\017\uffad\020\uffad\021\uffad\022\uffad" +
    "\023\uffad\024\uffad\025\uffad\030\uffad\035\uffad\066\uffad\001" +
    "\002\000\004\063\uffe0\001\002\000\050\003\uffaa\006\uffaa" +
    "\007\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\015\uffaa\016" +
    "\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa" +
    "\025\uffaa\030\uffaa\035\uffaa\066\uffaa\001\002\000\050\003" +
    "\uff9d\006\uff9d\007\uff9d\010\uff9d\011\uff9d\012\uff9d\013\uff9d" +
    "\015\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d\022\uff9d\023" +
    "\uff9d\024\uff9d\025\uff9d\030\uff9d\035\uff9d\066\uff9d\001\002" +
    "\000\004\071\uffa1\001\002\000\004\065\uffb9\001\002\000" +
    "\004\071\224\001\002\000\004\071\223\001\002\000\004" +
    "\071\222\001\002\000\004\063\060\001\002\000\004\071" +
    "\uff9f\001\002\000\004\071\210\001\002\000\050\003\uff9e" +
    "\006\uff9e\007\uff9e\010\uff9e\011\uff9e\012\uff9e\013\uff9e\015" +
    "\uff9e\016\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e" +
    "\024\uff9e\025\uff9e\030\uff9e\035\uff9e\066\uff9e\001\002\000" +
    "\026\026\062\027\041\031\044\032\042\033\053\034\054" +
    "\035\043\043\045\062\055\063\060\001\002\000\042\042" +
    "\103\043\071\044\101\045\100\046\072\047\074\051\077" +
    "\052\102\053\070\054\075\056\105\057\104\060\106\061" +
    "\073\064\067\072\076\001\002\000\004\065\150\001\002" +
    "\000\052\003\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012" +
    "\uffe1\013\uffe1\014\215\015\uffe1\016\uffe1\017\uffe1\020\uffe1" +
    "\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\030\uffe1\035" +
    "\uffe1\066\uffe1\001\002\000\006\013\uffe5\065\uffe3\001\002" +
    "\000\004\065\150\001\002\000\004\013\175\001\002\000" +
    "\050\003\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4" +
    "\013\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022" +
    "\uffe4\023\uffe4\024\uffe4\025\uffe4\030\uffe4\035\uffe4\066\uffe4" +
    "\001\002\000\050\003\uffe2\006\uffe2\007\uffe2\010\uffe2\011" +
    "\uffe2\012\uffe2\013\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2" +
    "\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\030\uffe2\035" +
    "\uffe2\066\uffe2\001\002\000\050\003\uffa6\006\uffa6\007\uffa6" +
    "\010\uffa6\011\uffa6\012\uffa6\013\uffa6\015\uffa6\016\uffa6\017" +
    "\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6" +
    "\030\uffa6\035\uffa6\066\uffa6\001\002\000\050\003\uffa8\006" +
    "\uffa8\007\uffa8\010\uffa8\011\uffa8\012\uffa8\013\uffa8\015\uffa8" +
    "\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8\024" +
    "\uffa8\025\uffa8\030\uffa8\035\uffa8\066\uffa8\001\002\000\050" +
    "\003\uffa9\006\uffa9\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013" +
    "\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9" +
    "\023\uffa9\024\uffa9\025\uffa9\030\uffa9\035\uffa9\066\uffa9\001" +
    "\002\000\004\065\150\001\002\000\004\016\227\001\002" +
    "\000\004\063\uffb8\001\002\000\004\063\060\001\002\000" +
    "\026\026\062\027\041\031\044\032\042\033\053\034\054" +
    "\035\043\043\045\062\055\063\060\001\002\000\042\042" +
    "\103\043\071\044\101\045\100\046\072\047\074\051\077" +
    "\052\102\053\070\054\075\056\105\057\104\060\106\061" +
    "\073\064\067\072\076\001\002\000\004\071\234\001\002" +
    "\000\050\003\uffb7\006\uffb7\007\uffb7\010\uffb7\011\uffb7\012" +
    "\uffb7\013\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7" +
    "\022\uffb7\023\uffb7\024\uffb7\025\uffb7\030\uffb7\035\uffb7\066" +
    "\uffb7\001\002\000\004\071\236\001\002\000\050\003\uffa0" +
    "\006\uffa0\007\uffa0\010\uffa0\011\uffa0\012\uffa0\013\uffa0\015" +
    "\uffa0\016\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0\023\uffa0" +
    "\024\uffa0\025\uffa0\030\uffa0\035\uffa0\066\uffa0\001\002\000" +
    "\004\063\060\001\002\000\026\026\062\027\041\031\044" +
    "\032\042\033\053\034\054\035\043\043\045\062\055\063" +
    "\060\001\002\000\042\042\103\043\071\044\101\045\100" +
    "\046\072\047\074\051\077\052\102\053\070\054\075\056" +
    "\105\057\104\060\106\061\073\064\067\072\076\001\002" +
    "\000\004\065\150\001\002\000\010\021\255\022\245\066" +
    "\154\001\002\000\050\003\uffde\006\uffde\007\uffde\010\uffde" +
    "\011\uffde\012\uffde\013\uffde\015\uffde\016\uffde\017\uffde\020" +
    "\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\030\uffde" +
    "\035\uffde\066\uffde\001\002\000\004\070\uffcf\001\002\000" +
    "\026\026\062\027\041\031\044\032\042\033\053\034\054" +
    "\035\043\043\045\062\055\063\060\001\002\000\004\066" +
    "\uffd9\001\002\000\010\021\255\022\245\066\uffda\001\002" +
    "\000\050\003\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012" +
    "\uffdc\013\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc" +
    "\022\uffdc\023\uffdc\024\uffdc\025\uffdc\030\uffdc\035\uffdc\066" +
    "\uffdc\001\002\000\004\070\257\001\002\000\004\066\154" +
    "\001\002\000\010\021\uffd7\022\uffd7\066\uffd7\001\002\000" +
    "\026\026\uffd3\027\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3" +
    "\035\uffd3\043\uffd3\062\uffd3\063\uffd3\001\002\000\050\003" +
    "\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd" +
    "\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023" +
    "\uffdd\024\uffdd\025\uffdd\030\uffdd\035\uffdd\066\uffdd\001\002" +
    "\000\046\003\177\006\006\007\005\010\004\011\013\012" +
    "\010\013\175\015\163\016\166\017\201\020\170\023\206" +
    "\024\200\025\162\030\153\035\155\065\150\066\uffd0\001" +
    "\002\000\044\003\177\006\006\007\005\010\004\011\013" +
    "\012\010\013\175\015\163\016\166\017\201\020\170\023" +
    "\206\024\200\025\162\030\153\035\155\066\uffd2\001\002" +
    "\000\004\066\uffd1\001\002\000\050\003\uffb2\006\uffb2\007" +
    "\uffb2\010\uffb2\011\uffb2\012\uffb2\013\uffb2\015\uffb2\016\uffb2" +
    "\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025" +
    "\uffb2\030\uffb2\035\uffb2\066\uffb2\001\002\000\004\066\uffdb" +
    "\001\002\000\010\021\uffd8\022\uffd8\066\uffd8\001\002\000" +
    "\042\042\103\043\071\044\101\045\100\046\072\047\074" +
    "\051\077\052\102\053\070\054\075\056\105\057\104\060" +
    "\106\061\073\070\266\072\076\001\002\000\052\003\177" +
    "\006\006\007\005\010\004\011\013\012\010\013\175\015" +
    "\163\016\166\017\201\020\170\021\uffd4\022\uffd4\023\206" +
    "\024\200\025\162\030\153\035\155\065\150\066\uffd4\001" +
    "\002\000\050\003\177\006\006\007\005\010\004\011\013" +
    "\012\010\013\175\015\163\016\166\017\201\020\170\021" +
    "\uffd6\022\uffd6\023\206\024\200\025\162\030\153\035\155" +
    "\066\uffd6\001\002\000\010\021\uffd5\022\uffd5\066\uffd5\001" +
    "\002\000\004\063\060\001\002\000\026\026\062\027\041" +
    "\031\044\032\042\033\053\034\054\035\043\043\045\062" +
    "\055\063\060\001\002\000\042\042\103\043\071\044\101" +
    "\045\100\046\072\047\074\051\077\052\102\053\070\054" +
    "\075\056\105\057\104\060\106\061\073\064\067\072\076" +
    "\001\002\000\004\065\150\001\002\000\050\003\uffba\006" +
    "\uffba\007\uffba\010\uffba\011\uffba\012\uffba\013\uffba\015\uffba" +
    "\016\uffba\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba\024" +
    "\uffba\025\uffba\030\uffba\035\uffba\066\uffba\001\002\000\050" +
    "\003\uffa7\006\uffa7\007\uffa7\010\uffa7\011\uffa7\012\uffa7\013" +
    "\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7" +
    "\023\uffa7\024\uffa7\025\uffa7\030\uffa7\035\uffa7\066\uffa7\001" +
    "\002\000\004\063\060\001\002\000\020\006\006\007\005" +
    "\010\004\011\013\012\010\035\305\071\301\001\002\000" +
    "\030\026\062\027\041\031\044\032\042\033\053\034\054" +
    "\035\043\043\045\062\055\063\060\071\344\001\002\000" +
    "\004\064\067\001\002\000\004\035\305\001\002\000\004" +
    "\071\315\001\002\000\004\055\uffb6\001\002\000\006\067" +
    "\310\071\uffc3\001\002\000\006\067\uffc1\071\uffc1\001\002" +
    "\000\004\035\305\001\002\000\006\067\uffc2\071\uffc2\001" +
    "\002\000\004\055\313\001\002\000\026\026\062\027\041" +
    "\031\044\032\042\033\053\034\054\035\043\043\045\062" +
    "\055\063\060\001\002\000\046\042\103\043\071\044\101" +
    "\045\100\046\072\047\074\051\077\052\102\053\070\054" +
    "\075\056\105\057\104\060\106\061\073\064\uffb5\067\uffb5" +
    "\071\uffb5\072\076\001\002\000\030\026\062\027\041\031" +
    "\044\032\042\033\053\034\054\035\043\043\045\062\055" +
    "\063\060\071\317\001\002\000\042\042\103\043\071\044" +
    "\101\045\100\046\072\047\074\051\077\052\102\053\070" +
    "\054\075\056\105\057\104\060\106\061\073\071\336\072" +
    "\076\001\002\000\006\035\323\064\uffc8\001\002\000\006" +
    "\064\uffbf\067\uffbf\001\002\000\006\064\uffbe\067\uffbe\001" +
    "\002\000\006\064\uffca\067\334\001\002\000\014\036\141" +
    "\037\142\040\uff84\041\uff82\055\uffb6\001\002\000\006\064" +
    "\uffbc\067\uffbc\001\002\000\006\064\uffbd\067\uffbd\001\002" +
    "\000\004\041\332\001\002\000\004\040\330\001\002\000" +
    "\026\026\062\027\041\031\044\032\042\033\053\034\054" +
    "\035\043\043\045\062\055\063\060\001\002\000\046\042" +
    "\103\043\071\044\101\045\100\046\072\047\074\051\077" +
    "\052\102\053\070\054\075\056\105\057\104\060\106\061" +
    "\073\064\uff83\067\uff83\071\uff83\072\076\001\002\000\026" +
    "\026\062\027\041\031\044\032\042\033\053\034\054\035" +
    "\043\043\045\062\055\063\060\001\002\000\046\042\103" +
    "\043\071\044\101\045\100\046\072\047\074\051\077\052" +
    "\102\053\070\054\075\056\105\057\104\060\106\061\073" +
    "\064\uff81\067\uff81\071\uff81\072\076\001\002\000\004\035" +
    "\323\001\002\000\006\064\uffc0\067\uffc0\001\002\000\006" +
    "\035\323\064\uffcb\001\002\000\006\064\uffcc\067\334\001" +
    "\002\000\006\067\310\071\uffc4\001\002\000\004\065\150" +
    "\001\002\000\050\003\uffcd\006\uffcd\007\uffcd\010\uffcd\011" +
    "\uffcd\012\uffcd\013\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd" +
    "\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\030\uffcd\035" +
    "\uffcd\066\uffcd\001\002\000\042\042\103\043\071\044\101" +
    "\045\100\046\072\047\074\051\077\052\102\053\070\054" +
    "\075\056\105\057\104\060\106\061\073\071\346\072\076" +
    "\001\002\000\006\035\323\064\uffc5\001\002\000\006\064" +
    "\uffc6\067\334\001\002\000\006\035\323\064\uffc7\001\002" +
    "\000\006\064\uffc9\067\334\001\002\000\026\026\062\027" +
    "\041\031\044\032\042\033\053\034\054\035\043\043\045" +
    "\062\055\063\060\001\002\000\004\071\352\001\002\000" +
    "\050\003\uffa2\006\uffa2\007\uffa2\010\uffa2\011\uffa2\012\uffa2" +
    "\013\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022" +
    "\uffa2\023\uffa2\024\uffa2\025\uffa2\030\uffa2\035\uffa2\066\uffa2" +
    "\001\002\000\042\042\103\043\071\044\101\045\100\046" +
    "\072\047\074\051\077\052\102\053\070\054\075\056\105" +
    "\057\104\060\106\061\073\071\354\072\076\001\002\000" +
    "\050\003\uffa4\006\uffa4\007\uffa4\010\uffa4\011\uffa4\012\uffa4" +
    "\013\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4\022" +
    "\uffa4\023\uffa4\024\uffa4\025\uffa4\030\uffa4\035\uffa4\066\uffa4" +
    "\001\002\000\060\002\uffb4\003\uffb4\004\uffb4\005\uffb4\006" +
    "\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4\014\uffb4" +
    "\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023" +
    "\uffb4\024\uffb4\025\uffb4\030\uffb4\035\uffb4\066\uffb4\001\002" +
    "\000\030\026\062\027\041\031\044\032\042\033\053\034" +
    "\054\035\043\043\045\062\055\063\060\064\067\001\002" +
    "\000\004\071\363\001\002\000\042\042\103\043\071\044" +
    "\101\045\100\046\072\047\074\051\077\052\102\053\070" +
    "\054\075\056\105\057\104\060\106\061\073\064\067\072" +
    "\076\001\002\000\004\071\362\001\002\000\050\003\uff9c" +
    "\006\uff9c\007\uff9c\010\uff9c\011\uff9c\012\uff9c\013\uff9c\015" +
    "\uff9c\016\uff9c\017\uff9c\020\uff9c\021\uff9c\022\uff9c\023\uff9c" +
    "\024\uff9c\025\uff9c\030\uff9c\035\uff9c\066\uff9c\001\002\000" +
    "\050\003\uff9b\006\uff9b\007\uff9b\010\uff9b\011\uff9b\012\uff9b" +
    "\013\uff9b\015\uff9b\016\uff9b\017\uff9b\020\uff9b\021\uff9b\022" +
    "\uff9b\023\uff9b\024\uff9b\025\uff9b\030\uff9b\035\uff9b\066\uff9b" +
    "\001\002\000\006\064\uffe6\067\uffe6\001\002\000\004\065" +
    "\150\001\002\000\014\006\006\007\005\010\004\011\013" +
    "\012\010\001\002\000\004\035\370\001\002\000\006\064" +
    "\uffe7\067\uffe7\001\002\000\024\002\uffed\003\uffed\004\uffed" +
    "\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012\uffed\001" +
    "\002\000\004\063\060\001\002\000\004\063\uffe9\001\002" +
    "\000\016\006\006\007\005\010\004\011\013\012\010\064" +
    "\067\001\002\000\006\064\067\067\366\001\002\000\004" +
    "\065\150\001\002\000\024\002\uffea\003\uffea\004\uffea\005" +
    "\uffea\006\uffea\007\uffea\010\uffea\011\uffea\012\uffea\001\002" +
    "\000\004\065\150\001\002\000\024\002\uffec\003\uffec\004" +
    "\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec" +
    "\001\002\000\004\035\373\001\002\000\004\071\u0104\001" +
    "\002\000\024\002\ufff8\003\ufff8\004\ufff8\005\ufff8\006\ufff8" +
    "\007\ufff8\010\ufff8\011\ufff8\012\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0102\000\022\002\022\003\021\004\010\005\020\020" +
    "\014\021\016\024\006\052\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\063\u0101\001\001" +
    "\000\002\001\001\000\004\051\371\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\022\030\023\025\051\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\004" +
    "\024\005\020\020\014\021\016\024\006\052\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\057\142\001\001\000\004\064\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\033\001\001\000\002\001\001\000\004\064\035\001\001" +
    "\000\002\001\001\000\024\006\055\011\046\012\051\013" +
    "\047\014\056\015\050\017\037\051\060\057\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\006\055\011\137" +
    "\012\051\013\047\014\056\015\050\017\037\051\060\057" +
    "\045\001\001\000\024\006\055\011\135\012\051\013\047" +
    "\014\056\015\050\017\037\051\060\057\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\006" +
    "\055\011\134\012\051\013\047\014\056\015\050\017\037" +
    "\051\060\057\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\057\062\001\001\000\002" +
    "\001\001\000\030\006\055\007\063\011\065\012\051\013" +
    "\047\014\056\015\050\017\037\051\060\057\045\060\064" +
    "\001\001\000\004\060\131\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\006\055\011\130" +
    "\012\051\013\047\014\056\015\050\017\037\051\060\057" +
    "\045\001\001\000\024\006\055\011\127\012\051\013\047" +
    "\014\056\015\050\017\037\051\060\057\045\001\001\000" +
    "\024\006\055\011\126\012\051\013\047\014\056\015\050" +
    "\017\037\051\060\057\045\001\001\000\024\006\055\011" +
    "\125\012\051\013\047\014\056\015\050\017\037\051\060" +
    "\057\045\001\001\000\024\006\055\011\124\012\051\013" +
    "\047\014\056\015\050\017\037\051\060\057\045\001\001" +
    "\000\024\006\055\011\123\012\051\013\047\014\056\015" +
    "\050\017\037\051\060\057\045\001\001\000\004\103\116" +
    "\001\001\000\024\006\055\011\115\012\051\013\047\014" +
    "\056\015\050\017\037\051\060\057\045\001\001\000\024" +
    "\006\055\011\114\012\051\013\047\014\056\015\050\017" +
    "\037\051\060\057\045\001\001\000\024\006\055\011\113" +
    "\012\051\013\047\014\056\015\050\017\037\051\060\057" +
    "\045\001\001\000\024\006\055\011\112\012\051\013\047" +
    "\014\056\015\050\017\037\051\060\057\045\001\001\000" +
    "\024\006\055\011\111\012\051\013\047\014\056\015\050" +
    "\017\037\051\060\057\045\001\001\000\024\006\055\011" +
    "\110\012\051\013\047\014\056\015\050\017\037\051\060" +
    "\057\045\001\001\000\024\006\055\011\107\012\051\013" +
    "\047\014\056\015\050\017\037\051\060\057\045\001\001" +
    "\000\024\006\055\011\106\012\051\013\047\014\056\015" +
    "\050\017\037\051\060\057\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\006\055\011\117\012\051\013\047\014" +
    "\056\015\050\017\037\051\060\057\045\001\001\000\002" +
    "\001\001\000\004\104\121\001\001\000\024\006\055\011" +
    "\122\012\051\013\047\014\056\015\050\017\037\051\060" +
    "\057\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\006" +
    "\055\011\133\012\051\013\047\014\056\015\050\017\037" +
    "\051\060\057\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\060\136\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\143\021\144\060\145\001\001\000\004\060\364\001\001" +
    "\000\002\001\001\000\006\025\146\061\150\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\006\203\015\164" +
    "\016\201\020\172\021\160\026\157\027\170\030\175\031" +
    "\166\032\156\040\155\041\163\042\173\050\202\051\060" +
    "\053\204\056\151\062\171\001\001\000\004\057\355\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\074\311" +
    "\101\326\102\325\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\006\203\015\164\016\201\020\172\021\160" +
    "\027\261\030\175\031\166\032\156\040\155\041\163\042" +
    "\173\050\202\051\060\053\204\056\151\062\354\001\001" +
    "\000\006\022\030\023\025\001\001\000\006\075\347\076" +
    "\350\001\001\000\004\070\276\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\071\270\001\001\000\002\001" +
    "\001\000\004\067\236\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\077\234" +
    "\001\001\000\004\072\224\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\057\210\001\001" +
    "\000\004\100\206\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\006\055\011\211\012\051\013\047\014\056" +
    "\015\050\017\037\051\060\057\045\001\001\000\004\060" +
    "\212\001\001\000\006\025\213\061\150\001\001\000\002" +
    "\001\001\000\006\065\216\066\215\001\001\000\006\025" +
    "\220\061\150\001\001\000\006\031\217\053\204\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\025\225\061\150" +
    "\001\001\000\002\001\001\000\004\073\227\001\001\000" +
    "\004\057\230\001\001\000\024\006\055\011\231\012\051" +
    "\013\047\014\056\015\050\017\037\051\060\057\045\001" +
    "\001\000\004\060\232\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\057" +
    "\237\001\001\000\024\006\055\011\240\012\051\013\047" +
    "\014\056\015\050\017\037\051\060\057\045\001\001\000" +
    "\004\060\241\001\001\000\006\033\243\061\242\001\001" +
    "\000\020\034\252\035\247\036\246\037\253\054\245\055" +
    "\251\062\250\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\006\055\011\264\012\051\013\047\014\056\015" +
    "\050\017\037\051\060\057\045\001\001\000\002\001\001" +
    "\000\012\036\262\037\263\054\245\055\251\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\062\255\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\006\203\015\164\016\201\020\172\021\160\025\260" +
    "\026\257\027\170\030\175\031\166\032\156\040\155\041" +
    "\163\042\173\050\202\051\060\053\204\056\151\061\150" +
    "\001\001\000\042\006\203\015\164\016\201\020\172\021" +
    "\160\027\261\030\175\031\166\032\156\040\155\041\163" +
    "\042\173\050\202\051\060\053\204\056\151\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\006\203\015\164\016" +
    "\201\020\172\021\160\025\267\026\266\027\170\030\175" +
    "\031\166\032\156\040\155\041\163\042\173\050\202\051" +
    "\060\053\204\056\151\061\150\001\001\000\042\006\203" +
    "\015\164\016\201\020\172\021\160\027\261\030\175\031" +
    "\166\032\156\040\155\041\163\042\173\050\202\051\060" +
    "\053\204\056\151\001\001\000\002\001\001\000\004\057" +
    "\271\001\001\000\024\006\055\011\272\012\051\013\047" +
    "\014\056\015\050\017\037\051\060\057\045\001\001\000" +
    "\004\060\273\001\001\000\006\025\274\061\150\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\057\277\001" +
    "\001\000\014\021\302\043\301\044\303\047\305\050\306" +
    "\001\001\000\024\006\055\011\342\012\051\013\047\014" +
    "\056\015\050\017\037\051\060\057\045\001\001\000\004" +
    "\060\340\001\001\000\006\047\337\050\306\001\001\000" +
    "\002\001\001\000\004\074\311\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\050\310\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\006\055\011\313\012\051" +
    "\013\047\014\056\015\050\017\037\051\060\057\045\001" +
    "\001\000\002\001\001\000\024\006\055\011\315\012\051" +
    "\013\047\014\056\015\050\017\037\051\060\057\045\001" +
    "\001\000\002\001\001\000\014\015\320\016\323\045\321" +
    "\046\317\050\324\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\074\311\101\326\102\325" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\006\055\011\330\012\051" +
    "\013\047\014\056\015\050\017\037\051\060\057\045\001" +
    "\001\000\002\001\001\000\024\006\055\011\332\012\051" +
    "\013\047\014\056\015\050\017\037\051\060\057\045\001" +
    "\001\000\002\001\001\000\012\015\320\016\323\046\334" +
    "\050\324\001\001\000\002\001\001\000\014\015\320\016" +
    "\323\045\336\046\317\050\324\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\025\341\061\150\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\015\320\016\323" +
    "\045\344\046\317\050\324\001\001\000\002\001\001\000" +
    "\014\015\320\016\323\045\346\046\317\050\324\001\001" +
    "\000\002\001\001\000\024\006\055\011\352\012\051\013" +
    "\047\014\056\015\050\017\037\051\060\057\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\006\055\011\357" +
    "\012\051\013\047\014\056\015\050\017\037\051\060\057" +
    "\045\060\356\001\001\000\002\001\001\000\004\060\360" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\025\370\061\150\001\001" +
    "\000\004\021\366\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\057\373\001\001\000\002" +
    "\001\001\000\010\010\374\021\144\060\375\001\001\000" +
    "\004\060\377\001\001\000\006\025\376\061\150\001\001" +
    "\000\002\001\001\000\006\025\u0100\061\150\001\001\000" +
    "\002\001\001\000\006\006\u0102\051\060\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserF$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserF$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserF$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public ScannerF s;
    int index;
    int nIB = 0;
    WordPainter painter;
    public ParserF(ScannerF s,WordPainter painter) {
        super(s);
        this.s = s;
        this.painter = painter;
    }
    public void syntax_error(Symbol sym) {
        painter.SERROR(sym.left,sym.right);
    }
    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception {}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserF$actions {
  private final ParserF parser;

  /** Constructor */
  CUP$ParserF$actions(ParserF parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserF$do_action_part00000000(
    int                        CUP$ParserF$act_num,
    java_cup.runtime.lr_parser CUP$ParserF$parser,
    java.util.Stack            CUP$ParserF$stack,
    int                        CUP$ParserF$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserF$result;

      /* select the action based on the action number */
      switch (CUP$ParserF$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INIT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		RESULT = start_val;
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserF$parser.done_parsing();
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INIT ::= INSTSGLOBAL 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INIT",0, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTSGLOBAL ::= INSTSGLOBAL INSTGLOBAL 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTSGLOBAL",1, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTSGLOBAL ::= INSTGLOBAL 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTSGLOBAL",1, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTGLOBAL ::= CALLMAINFUNC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTGLOBAL",2, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTGLOBAL ::= DECLID 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTGLOBAL",2, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTGLOBAL ::= DECLFUNC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTGLOBAL",2, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTGLOBAL ::= error 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTGLOBAL",2, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$0 ::= 
            {
              String RESULT =null;
		int mnleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int mnright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String mn = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW4(mnleft, mnright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$0",49, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CALLMAINFUNC ::= RW_main NT$0 CALLFUNC TK_semicolon 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int mnleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int mnright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String mn = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CALLMAINFUNC",3, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CALLFUNC ::= IDCOLORFNC COLORLPAR LISTARGS COLORRPAR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CALLFUNC",4, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CALLFUNC ::= IDCOLORFNC COLORLPAR COLORRPAR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CALLFUNC",4, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LISTARGS ::= LISTARGS TK_comma EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LISTARGS",5, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LISTARGS ::= EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LISTARGS",5, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLID ::= TYPE INITIDS TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DECLID",14, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INITIDS ::= INITIDS TK_comma INITID 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INITIDS",16, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INITIDS ::= INITID 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INITIDS",16, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$1 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.VARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$1",50, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INITID ::= TK_id NT$1 TK_equ EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INITID",17, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INITID ::= TK_id 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.VARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INITID",17, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLFUNC ::= TYPE IDCOLORFNC COLORLPAR LISTPARAMS COLORRPAR ENV 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DECLFUNC",18, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLFUNC ::= VOIDCOLOR IDCOLORFNC COLORLPAR LISTPARAMS COLORRPAR ENV 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DECLFUNC",18, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLFUNC ::= TYPE IDCOLORFNC COLORLPAR COLORRPAR ENV 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DECLFUNC",18, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLFUNC ::= VOIDCOLOR IDCOLORFNC COLORLPAR COLORRPAR ENV 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DECLFUNC",18, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // IDCOLORFNC ::= TK_id 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.FNC(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("IDCOLORFNC",39, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VOIDCOLOR ::= RW_void 
            {
              String RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String vd = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(vdleft, vdright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("VOIDCOLOR",40, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LISTPARAMS ::= LISTPARAMS TK_comma TYPE TK_id 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.VARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LISTPARAMS",6, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LISTPARAMS ::= TYPE TK_id 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.VARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LISTPARAMS",6, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$2 ::= 
            {
              String RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String el = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(elleft, elright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$2",51, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IFSTRUCT ::= IFCOLOR COLORLPAR EXP COLORRPAR ENV RW_else NT$2 IFSTRUCT 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String el = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("IFSTRUCT",23, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-7)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$3 ::= 
            {
              String RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String el = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(elleft, elright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$3",52, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IFSTRUCT ::= IFCOLOR COLORLPAR EXP COLORRPAR ENV RW_else NT$3 ENV 
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String el = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("IFSTRUCT",23, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-7)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // IFSTRUCT ::= IFCOLOR COLORLPAR EXP COLORRPAR ENV 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("IFSTRUCT",23, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // IFCOLOR ::= RW_if 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(ileft, iright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("IFCOLOR",41, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$4 ::= 
            {
              String RESULT =null;
		int swleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String sw = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(swleft, swright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$4",53, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SWITCHSTRUCT ::= RW_switch NT$4 COLORLPAR EXP COLORRPAR ENVS 
            {
              String RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)).value;
		int swleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).left;
		int swright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).right;
		String sw = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("SWITCHSTRUCT",24, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ENVS ::= COLORLBRC CASESDEFAULT COLORRBRC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ENVS",25, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ENVS ::= COLORLBRC COLORRBRC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ENVS",25, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CASESDEFAULT ::= CASES DEFAULT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASESDEFAULT",26, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CASESDEFAULT ::= CASES 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASESDEFAULT",26, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CASESDEFAULT ::= DEFAULT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASESDEFAULT",26, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CASES ::= CASES CASE 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASES",27, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CASES ::= CASE 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASES",27, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CASE ::= CASECOLOR EXP TK_colon INSTRUCTIONS 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASE",29, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CASE ::= CASECOLOR EXP TK_colon ENV 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASE",29, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CASE ::= CASECOLOR EXP TK_colon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASE",29, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CASECOLOR ::= RW_case 
            {
              String RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String cs = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(csleft, csright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASECOLOR",42, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DEFAULT ::= DEFAULTCOLOR TK_colon INSTRUCTIONS 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DEFAULT",28, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DEFAULT ::= DEFAULTCOLOR TK_colon ENV 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DEFAULT",28, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DEFAULT ::= DEFAULTCOLOR TK_colon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DEFAULT",28, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DEFAULTCOLOR ::= RW_default 
            {
              String RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String df = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(dfleft, dfright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DEFAULTCOLOR",43, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$5 ::= 
            {
              String RESULT =null;
		int frleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int frright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String fr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(frleft, frright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$5",54, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LOOPFOR ::= RW_for NT$5 COLORLPAR ARGSFOR COLORRPAR ENV 
            {
              String RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)).value;
		int frleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).left;
		int frright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).right;
		String fr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOOPFOR",32, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ARGSFOR ::= INITIALIZE TK_semicolon EXP TK_semicolon UPDATESFOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARGSFOR",33, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ARGSFOR ::= INITIALIZE TK_semicolon EXP TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARGSFOR",33, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ARGSFOR ::= INITIALIZE TK_semicolon TK_semicolon UPDATESFOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARGSFOR",33, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ARGSFOR ::= TK_semicolon EXP TK_semicolon UPDATESFOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARGSFOR",33, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ARGSFOR ::= INITIALIZE TK_semicolon TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARGSFOR",33, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ARGSFOR ::= TK_semicolon EXP TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARGSFOR",33, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ARGSFOR ::= TK_semicolon TK_semicolon UPDATESFOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARGSFOR",33, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ARGSFOR ::= TK_semicolon TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARGSFOR",33, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // INITIALIZE ::= TYPE REASIGNS 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INITIALIZE",34, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // INITIALIZE ::= REASIGNS 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INITIALIZE",34, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // REASIGNS ::= REASIGNS TK_comma REASIGN 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("REASIGNS",37, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // REASIGNS ::= REASIGN 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("REASIGNS",37, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // UPDATESFOR ::= UPDATESFOR TK_comma UPDATEFOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("UPDATESFOR",35, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // UPDATESFOR ::= UPDATEFOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("UPDATESFOR",35, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // UPDATEFOR ::= INCDEC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("UPDATEFOR",36, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // UPDATEFOR ::= REASIGN 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("UPDATEFOR",36, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // UPDATEFOR ::= ADDSUB 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("UPDATEFOR",36, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$6 ::= 
            {
              String RESULT =null;
		int whlleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int whlright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String whl = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(whlleft, whlright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$6",55, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LOOPWHILE ::= RW_while NT$6 COLORLPAR EXP COLORRPAR ENV 
            {
              String RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)).value;
		int whlleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).left;
		int whlright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).right;
		String whl = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOOPWHILE",30, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$7 ::= 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(dleft, dright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$7",56, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$8 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;
		int whlleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int whlright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String whl = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(whlleft, whlright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$8",57, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // LOOPDOWHILE ::= RW_do NT$7 ENV RW_while NT$8 COLORLPAR EXP COLORRPAR TK_semicolon 
            {
              String RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-8)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-8)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-8)).value;
		int whlleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).left;
		int whlright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).right;
		String whl = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOOPDOWHILE",31, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-8)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$9 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.VARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$9",58, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // REASIGN ::= TK_id NT$9 TK_equ EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("REASIGN",38, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ENV ::= COLORLBRC INSTRUCTIONS COLORRBRC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ENV",19, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ENV ::= COLORLBRC COLORRBRC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ENV",19, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // INSTRUCTIONS ::= INSTRUCTIONS INSTRUCTION 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",20, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // INSTRUCTIONS ::= INSTRUCTION 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",20, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // INSTRUCTION ::= DECLID 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",21, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // INSTRUCTION ::= IFSTRUCT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",21, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // INSTRUCTION ::= SWITCHSTRUCT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",21, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // INSTRUCTION ::= LOOPFOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",21, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // INSTRUCTION ::= LOOPWHILE 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",21, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // INSTRUCTION ::= LOOPDOWHILE 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",21, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // INSTRUCTION ::= PRINT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",21, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // INSTRUCTION ::= ADDSUB TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",21, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // INSTRUCTION ::= REASIGN TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",21, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // INSTRUCTION ::= INCDEC TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",21, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // INSTRUCTION ::= CALLFUNC TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",21, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NT$10 ::= 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(tleft, tright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$10",59, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // INSTRUCTION ::= RW_return NT$10 EXP TK_semicolon 
            {
              String RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",21, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$11 ::= 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(tleft, tright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$11",60, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // INSTRUCTION ::= RW_return NT$11 TK_semicolon 
            {
              String RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",21, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$12 ::= 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(tleft, tright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$12",61, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // INSTRUCTION ::= RW_continue NT$12 TK_semicolon 
            {
              String RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",21, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NT$13 ::= 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(tleft, tright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$13",62, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // INSTRUCTION ::= RW_break NT$13 TK_semicolon 
            {
              String RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",21, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // INSTRUCTION ::= error 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",21, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // PRINT ::= PRINTCOLOR COLORLPAR EXP COLORRPAR TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("PRINT",22, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // PRINT ::= PRINTCOLOR COLORLPAR COLORRPAR TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("PRINT",22, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // PRINTCOLOR ::= RW_print 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.FNC(pleft, pright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("PRINTCOLOR",44, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // TYPE ::= RW_String 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(tpleft, tpright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TYPE",15, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // TYPE ::= RW_int 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(tpleft, tpright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TYPE",15, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // TYPE ::= RW_boolean 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(tpleft, tpright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TYPE",15, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // TYPE ::= RW_char 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(tpleft, tpright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TYPE",15, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // TYPE ::= RW_double 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(tpleft, tpright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TYPE",15, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXP ::= ARITHMETICS 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXP ::= RELATIONALS 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXP ::= LOGICS 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXP ::= INCDEC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXP ::= CALLFUNC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXP ::= TERNARY 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXP ::= TK_string 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.STRING(trleft, trright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXP ::= TK_char 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.CHAR(trleft, trright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXP ::= TK_int 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.NUMBER(trleft, trright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXP ::= TK_double 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.NUMBER(trleft, trright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EXP ::= TK_id 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.VARIABLE(trleft, trright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // EXP ::= RW_true 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW3(trleft, trright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // EXP ::= RW_false 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW3(trleft, trright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // EXP ::= COLORLPAR EXP COLORRPAR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // INCDEC ::= TK_id TK_inc 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		painter.VARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INCDEC",11, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // INCDEC ::= TK_id TK_dec 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		painter.VARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INCDEC",11, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NT$14 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.VARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$14",63, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ADDSUB ::= TK_id NT$14 TK_add EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ADDSUB",12, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // NT$15 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.VARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$15",64, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ADDSUB ::= TK_id NT$15 TK_sub EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ADDSUB",12, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // NT$16 ::= 
            {
              String RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String q = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.SYMBS1(qleft, qright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$16",65, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // NT$17 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String q = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.SYMBS1(cleft, cright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$17",66, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // TERNARY ::= EXP TK_question NT$16 EXP TK_colon NT$17 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).right;
		String q = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TERNARY",13, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-6)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ARITHMETICS ::= EXP TK_plus EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ARITHMETICS ::= EXP TK_minus EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ARITHMETICS ::= EXP TK_mult EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ARITHMETICS ::= EXP TK_div EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ARITHMETICS ::= EXP TK_pow EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ARITHMETICS ::= EXP TK_mod EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ARITHMETICS ::= TK_minus EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // RELATIONALS ::= EXP TK_equequ EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",9, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // RELATIONALS ::= EXP TK_notequ EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",9, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // RELATIONALS ::= EXP TK_lessequ EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",9, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // RELATIONALS ::= EXP TK_moreequ EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",9, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // RELATIONALS ::= EXP TK_less EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",9, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // RELATIONALS ::= EXP TK_more EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",9, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // LOGICS ::= EXP TK_and EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOGICS",10, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // LOGICS ::= EXP TK_or EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOGICS",10, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // LOGICS ::= TK_not EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOGICS",10, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // COLORLBRC ::= TK_lbrc 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.BRKT(nIB, lleft, lright); nIB ++;
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORLBRC",47, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // COLORRBRC ::= TK_rbrc 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		nIB --; painter.BRKT(nIB, rleft, rright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORRBRC",48, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // COLORLPAR ::= TK_lpar 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.BRKT(nIB, lleft, lright); nIB ++;
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORLPAR",45, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // COLORRPAR ::= TK_rpar 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		nIB --; painter.BRKT(nIB, rleft, rright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORRPAR",46, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserF$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserF$do_action(
    int                        CUP$ParserF$act_num,
    java_cup.runtime.lr_parser CUP$ParserF$parser,
    java.util.Stack            CUP$ParserF$stack,
    int                        CUP$ParserF$top)
    throws java.lang.Exception
    {
              return CUP$ParserF$do_action_part00000000(
                               CUP$ParserF$act_num,
                               CUP$ParserF$parser,
                               CUP$ParserF$stack,
                               CUP$ParserF$top);
    }
}

}
