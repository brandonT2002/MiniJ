
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Language;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Map;
import java.util.TreeMap;
import java.util.stream.Collectors;
import java_cup.runtime.*;
import Components.Response;
import Components.ErrorS;
import Painter.WordPainter;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserF extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return TOK.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserF() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserF(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserF(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\224\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\062\002\000" +
    "\002\005\006\000\002\006\006\000\002\006\005\000\002" +
    "\007\005\000\002\007\003\000\002\017\005\000\002\021" +
    "\005\000\002\021\003\000\002\063\002\000\002\022\006" +
    "\000\002\022\003\000\002\023\010\000\002\023\010\000" +
    "\002\023\007\000\002\023\007\000\002\050\003\000\002" +
    "\051\003\000\002\010\006\000\002\010\004\000\002\064" +
    "\002\000\002\030\012\000\002\065\002\000\002\030\012" +
    "\000\002\030\007\000\002\052\003\000\002\066\002\000" +
    "\002\031\010\000\002\032\005\000\002\032\004\000\002" +
    "\033\004\000\002\033\003\000\002\033\003\000\002\034" +
    "\004\000\002\034\003\000\002\036\006\000\002\036\006" +
    "\000\002\036\005\000\002\053\003\000\002\035\005\000" +
    "\002\035\005\000\002\035\004\000\002\054\003\000\002" +
    "\067\002\000\002\041\010\000\002\042\007\000\002\042" +
    "\006\000\002\042\006\000\002\042\006\000\002\042\005" +
    "\000\002\042\005\000\002\042\005\000\002\042\004\000" +
    "\002\043\004\000\002\043\003\000\002\046\005\000\002" +
    "\046\003\000\002\044\005\000\002\044\003\000\002\045" +
    "\003\000\002\045\003\000\002\045\003\000\002\070\002" +
    "\000\002\037\010\000\002\071\002\000\002\072\002\000" +
    "\002\040\013\000\002\073\002\000\002\047\006\000\002" +
    "\074\002\000\002\016\006\000\002\075\002\000\002\016" +
    "\006\000\002\024\005\000\002\024\004\000\002\025\004" +
    "\000\002\025\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\004\000\002\026" +
    "\004\000\002\026\004\000\002\026\004\000\002\076\002" +
    "\000\002\026\006\000\002\077\002\000\002\026\005\000" +
    "\002\100\002\000\002\026\005\000\002\101\002\000\002" +
    "\026\005\000\002\026\003\000\002\027\007\000\002\027" +
    "\006\000\002\055\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\005\000" +
    "\002\015\004\000\002\015\004\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\004\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\004\000\002\060\003\000\002\061" +
    "\003\000\002\056\003\000\002\057\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\373\000\022\003\020\004\012\005\016\006\006\007" +
    "\005\010\004\011\015\012\010\001\002\000\004\035\uff92" +
    "\001\002\000\004\035\uff93\001\002\000\004\035\uff95\001" +
    "\002\000\024\002\ufffb\003\ufffb\004\ufffb\005\ufffb\006\ufffb" +
    "\007\ufffb\010\ufffb\011\ufffb\012\ufffb\001\002\000\004\035" +
    "\uff91\001\002\000\024\002\ufffe\003\ufffe\004\ufffe\005\ufffe" +
    "\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe\001\002\000" +
    "\004\035\ufff9\001\002\000\004\035\364\001\002\000\024" +
    "\002\ufffc\003\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010" +
    "\ufffc\011\ufffc\012\ufffc\001\002\000\004\035\uff94\001\002" +
    "\000\004\035\uffe8\001\002\000\004\035\030\001\002\000" +
    "\024\002\ufffa\003\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa" +
    "\010\ufffa\011\ufffa\012\ufffa\001\002\000\024\002\ufffd\003" +
    "\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd" +
    "\012\ufffd\001\002\000\024\002\000\003\020\004\012\005" +
    "\016\006\006\007\005\010\004\011\015\012\010\001\002" +
    "\000\004\002\024\001\002\000\004\002\001\001\002\000" +
    "\024\002\uffff\003\uffff\004\uffff\005\uffff\006\uffff\007\uffff" +
    "\010\uffff\011\uffff\012\uffff\001\002\000\006\067\ufff1\071" +
    "\ufff1\001\002\000\004\063\056\001\002\000\012\055\ufff0" +
    "\063\uffe9\067\uffee\071\uffee\001\002\000\006\067\033\071" +
    "\032\001\002\000\056\002\ufff3\003\ufff3\004\ufff3\005\ufff3" +
    "\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\015" +
    "\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3" +
    "\024\ufff3\025\ufff3\030\ufff3\035\ufff3\066\ufff3\001\002\000" +
    "\004\035\035\001\002\000\006\067\ufff2\071\ufff2\001\002" +
    "\000\010\055\ufff0\067\uffee\071\uffee\001\002\000\004\055" +
    "\037\001\002\000\026\026\060\027\040\031\043\032\041" +
    "\033\052\034\053\035\042\043\044\062\054\063\056\001" +
    "\002\000\046\042\uff85\043\uff85\044\uff85\045\uff85\046\uff85" +
    "\047\uff85\051\uff85\052\uff85\053\uff85\054\uff85\056\uff85\057" +
    "\uff85\060\uff85\061\uff85\064\uff85\067\uff85\070\uff85\071\uff85" +
    "\001\002\000\046\042\uff8a\043\uff8a\044\uff8a\045\uff8a\046" +
    "\uff8a\047\uff8a\051\uff8a\052\uff8a\053\uff8a\054\uff8a\056\uff8a" +
    "\057\uff8a\060\uff8a\061\uff8a\064\uff8a\067\uff8a\070\uff8a\071" +
    "\uff8a\001\002\000\054\036\132\037\133\042\uff87\043\uff87" +
    "\044\uff87\045\uff87\046\uff87\047\uff87\051\uff87\052\uff87\053" +
    "\uff87\054\uff87\056\uff87\057\uff87\060\uff87\061\uff87\063\uffe9" +
    "\064\uff87\067\uff87\070\uff87\071\uff87\001\002\000\046\042" +
    "\uff8b\043\uff8b\044\uff8b\045\uff8b\046\uff8b\047\uff8b\051\uff8b" +
    "\052\uff8b\053\uff8b\054\uff8b\056\uff8b\057\uff8b\060\uff8b\061" +
    "\uff8b\064\uff8b\067\uff8b\070\uff8b\071\uff8b\001\002\000\026" +
    "\026\060\027\040\031\043\032\041\033\052\034\053\035" +
    "\042\043\044\062\054\063\056\001\002\000\026\026\060" +
    "\027\040\031\043\032\041\033\052\034\053\035\042\043" +
    "\044\062\054\063\056\001\002\000\042\042\101\043\070" +
    "\044\076\045\077\046\071\047\073\051\075\052\100\053" +
    "\067\054\074\056\104\057\102\060\103\061\072\067\uffef" +
    "\071\uffef\001\002\000\046\042\uff8f\043\uff8f\044\uff8f\045" +
    "\uff8f\046\uff8f\047\uff8f\051\uff8f\052\uff8f\053\uff8f\054\uff8f" +
    "\056\uff8f\057\uff8f\060\uff8f\061\uff8f\064\uff8f\067\uff8f\070" +
    "\uff8f\071\uff8f\001\002\000\046\042\uff8d\043\uff8d\044\uff8d" +
    "\045\uff8d\046\uff8d\047\uff8d\051\uff8d\052\uff8d\053\uff8d\054" +
    "\uff8d\056\uff8d\057\uff8d\060\uff8d\061\uff8d\064\uff8d\067\uff8d" +
    "\070\uff8d\071\uff8d\001\002\000\046\042\uff90\043\uff90\044" +
    "\uff90\045\uff90\046\uff90\047\uff90\051\uff90\052\uff90\053\uff90" +
    "\054\uff90\056\uff90\057\uff90\060\uff90\061\uff90\064\uff90\067" +
    "\uff90\070\uff90\071\uff90\001\002\000\046\042\uff89\043\uff89" +
    "\044\uff89\045\uff89\046\uff89\047\uff89\051\uff89\052\uff89\053" +
    "\uff89\054\uff89\056\uff89\057\uff89\060\uff89\061\uff89\064\uff89" +
    "\067\uff89\070\uff89\071\uff89\001\002\000\046\042\uff88\043" +
    "\uff88\044\uff88\045\uff88\046\uff88\047\uff88\051\uff88\052\uff88" +
    "\053\uff88\054\uff88\056\uff88\057\uff88\060\uff88\061\uff88\064" +
    "\uff88\067\uff88\070\uff88\071\uff88\001\002\000\026\026\060" +
    "\027\040\031\043\032\041\033\052\034\053\035\042\043" +
    "\044\062\054\063\056\001\002\000\046\042\uff8e\043\uff8e" +
    "\044\uff8e\045\uff8e\046\uff8e\047\uff8e\051\uff8e\052\uff8e\053" +
    "\uff8e\054\uff8e\056\uff8e\057\uff8e\060\uff8e\061\uff8e\064\uff8e" +
    "\067\uff8e\070\uff8e\071\uff8e\001\002\000\044\006\uff6f\007" +
    "\uff6f\010\uff6f\011\uff6f\012\uff6f\026\uff6f\027\uff6f\031\uff6f" +
    "\032\uff6f\033\uff6f\034\uff6f\035\uff6f\043\uff6f\062\uff6f\063" +
    "\uff6f\064\uff6f\071\uff6f\001\002\000\004\063\056\001\002" +
    "\000\046\042\uff86\043\uff86\044\uff86\045\uff86\046\uff86\047" +
    "\uff86\051\uff86\052\uff86\053\uff86\054\uff86\056\uff86\057\uff86" +
    "\060\uff86\061\uff86\064\uff86\067\uff86\070\uff86\071\uff86\001" +
    "\002\000\046\042\uff8c\043\uff8c\044\uff8c\045\uff8c\046\uff8c" +
    "\047\uff8c\051\uff8c\052\uff8c\053\uff8c\054\uff8c\056\uff8c\057" +
    "\uff8c\060\uff8c\061\uff8c\064\uff8c\067\uff8c\070\uff8c\071\uff8c" +
    "\001\002\000\030\026\060\027\040\031\043\032\041\033" +
    "\052\034\053\035\042\043\044\062\054\063\056\064\066" +
    "\001\002\000\006\064\066\067\124\001\002\000\046\042" +
    "\ufff6\043\ufff6\044\ufff6\045\ufff6\046\ufff6\047\ufff6\051\ufff6" +
    "\052\ufff6\053\ufff6\054\ufff6\056\ufff6\057\ufff6\060\ufff6\061" +
    "\ufff6\064\ufff6\067\ufff6\070\ufff6\071\ufff6\001\002\000\042" +
    "\042\101\043\070\044\076\045\077\046\071\047\073\051" +
    "\075\052\100\053\067\054\074\056\104\057\102\060\103" +
    "\061\072\064\ufff4\067\ufff4\001\002\000\050\042\uff6e\043" +
    "\uff6e\044\uff6e\045\uff6e\046\uff6e\047\uff6e\051\uff6e\052\uff6e" +
    "\053\uff6e\054\uff6e\056\uff6e\057\uff6e\060\uff6e\061\uff6e\064" +
    "\uff6e\065\uff6e\067\uff6e\070\uff6e\071\uff6e\001\002\000\026" +
    "\026\060\027\040\031\043\032\041\033\052\034\053\035" +
    "\042\043\044\062\054\063\056\001\002\000\026\026\060" +
    "\027\040\031\043\032\041\033\052\034\053\035\042\043" +
    "\044\062\054\063\056\001\002\000\026\026\060\027\040" +
    "\031\043\032\041\033\052\034\053\035\042\043\044\062" +
    "\054\063\056\001\002\000\026\026\060\027\040\031\043" +
    "\032\041\033\052\034\053\035\042\043\044\062\054\063" +
    "\056\001\002\000\026\026\060\027\040\031\043\032\041" +
    "\033\052\034\053\035\042\043\044\062\054\063\056\001" +
    "\002\000\026\026\060\027\040\031\043\032\041\033\052" +
    "\034\053\035\042\043\044\062\054\063\056\001\002\000" +
    "\026\026\060\027\040\031\043\032\041\033\052\034\053" +
    "\035\042\043\044\062\054\063\056\001\002\000\026\026" +
    "\060\027\040\031\043\032\041\033\052\034\053\035\042" +
    "\043\044\062\054\063\056\001\002\000\026\026\060\027" +
    "\040\031\043\032\041\033\052\034\053\035\042\043\044" +
    "\062\054\063\056\001\002\000\026\026\060\027\040\031" +
    "\043\032\041\033\052\034\053\035\042\043\044\062\054" +
    "\063\056\001\002\000\026\026\060\027\040\031\043\032" +
    "\041\033\052\034\053\035\042\043\044\062\054\063\056" +
    "\001\002\000\026\026\060\027\040\031\043\032\041\033" +
    "\052\034\053\035\042\043\044\062\054\063\056\001\002" +
    "\000\026\026\060\027\040\031\043\032\041\033\052\034" +
    "\053\035\042\043\044\062\054\063\056\001\002\000\026" +
    "\026\060\027\040\031\043\032\041\033\052\034\053\035" +
    "\042\043\044\062\054\063\056\001\002\000\046\042\101" +
    "\043\070\044\076\045\077\046\071\047\073\051\uff76\052" +
    "\uff76\053\uff76\054\uff76\056\uff76\057\uff76\060\uff76\061\uff76" +
    "\064\uff76\067\uff76\070\uff76\071\uff76\001\002\000\046\042" +
    "\101\043\070\044\076\045\077\046\071\047\073\051\075" +
    "\052\100\053\067\054\074\056\104\057\102\060\uff74\061" +
    "\uff74\064\uff74\067\uff74\070\uff74\071\uff74\001\002\000\046" +
    "\042\101\043\070\044\076\045\077\046\071\047\073\051" +
    "\uff75\052\uff75\053\uff75\054\uff75\056\uff75\057\uff75\060\uff75" +
    "\061\uff75\064\uff75\067\uff75\070\uff75\071\uff75\001\002\000" +
    "\046\042\uff81\043\uff81\044\076\045\077\046\071\047\073" +
    "\051\uff81\052\uff81\053\uff81\054\uff81\056\uff81\057\uff81\060" +
    "\uff81\061\uff81\064\uff81\067\uff81\070\uff81\071\uff81\001\002" +
    "\000\046\042\101\043\070\044\076\045\077\046\071\047" +
    "\073\051\uff79\052\uff79\053\067\054\074\056\104\057\102" +
    "\060\uff79\061\uff79\064\uff79\067\uff79\070\uff79\071\uff79\001" +
    "\002\000\046\042\uff7e\043\uff7e\044\uff7e\045\uff7e\046\071" +
    "\047\uff7e\051\uff7e\052\uff7e\053\uff7e\054\uff7e\056\uff7e\057" +
    "\uff7e\060\uff7e\061\uff7e\064\uff7e\067\uff7e\070\uff7e\071\uff7e" +
    "\001\002\000\046\042\uff7f\043\uff7f\044\uff7f\045\uff7f\046" +
    "\071\047\uff7f\051\uff7f\052\uff7f\053\uff7f\054\uff7f\056\uff7f" +
    "\057\uff7f\060\uff7f\061\uff7f\064\uff7f\067\uff7f\070\uff7f\071" +
    "\uff7f\001\002\000\046\042\101\043\070\044\076\045\077" +
    "\046\071\047\073\051\uff7a\052\uff7a\053\067\054\074\056" +
    "\104\057\102\060\uff7a\061\uff7a\064\uff7a\067\uff7a\070\uff7a" +
    "\071\uff7a\001\002\000\046\042\101\043\070\044\076\045" +
    "\077\046\071\047\073\051\uff77\052\uff77\053\uff77\054\uff77" +
    "\056\uff77\057\uff77\060\uff77\061\uff77\064\uff77\067\uff77\070" +
    "\uff77\071\uff77\001\002\000\046\042\uff7c\043\uff7c\044\uff7c" +
    "\045\uff7c\046\071\047\uff7c\051\uff7c\052\uff7c\053\uff7c\054" +
    "\uff7c\056\uff7c\057\uff7c\060\uff7c\061\uff7c\064\uff7c\067\uff7c" +
    "\070\uff7c\071\uff7c\001\002\000\046\042\101\043\070\044" +
    "\076\045\077\046\071\047\073\051\075\052\100\053\067" +
    "\054\074\056\104\057\102\060\103\061\uff73\064\uff73\067" +
    "\uff73\070\uff73\071\uff73\001\002\000\044\042\uff7d\043\uff7d" +
    "\044\uff7d\045\uff7d\047\uff7d\051\uff7d\052\uff7d\053\uff7d\054" +
    "\uff7d\056\uff7d\057\uff7d\060\uff7d\061\uff7d\064\uff7d\067\uff7d" +
    "\070\uff7d\071\uff7d\001\002\000\046\042\uff80\043\uff80\044" +
    "\076\045\077\046\071\047\073\051\uff80\052\uff80\053\uff80" +
    "\054\uff80\056\uff80\057\uff80\060\uff80\061\uff80\064\uff80\067" +
    "\uff80\070\uff80\071\uff80\001\002\000\046\042\101\043\070" +
    "\044\076\045\077\046\071\047\073\051\uff78\052\uff78\053" +
    "\uff78\054\uff78\056\uff78\057\uff78\060\uff78\061\uff78\064\uff78" +
    "\067\uff78\070\uff78\071\uff78\001\002\000\046\042\ufff7\043" +
    "\ufff7\044\ufff7\045\ufff7\046\ufff7\047\ufff7\051\ufff7\052\ufff7" +
    "\053\ufff7\054\ufff7\056\ufff7\057\ufff7\060\ufff7\061\ufff7\064" +
    "\ufff7\067\ufff7\070\ufff7\071\ufff7\001\002\000\026\026\060" +
    "\027\040\031\043\032\041\033\052\034\053\035\042\043" +
    "\044\062\054\063\056\001\002\000\042\042\101\043\070" +
    "\044\076\045\077\046\071\047\073\051\075\052\100\053" +
    "\067\054\074\056\104\057\102\060\103\061\072\064\ufff5" +
    "\067\ufff5\001\002\000\046\042\101\043\070\044\076\045" +
    "\077\046\071\047\073\051\075\052\100\053\067\054\074" +
    "\056\104\057\102\060\uff72\061\uff72\064\uff72\067\uff72\070" +
    "\uff72\071\uff72\001\002\000\040\042\101\043\070\044\076" +
    "\045\077\046\071\047\073\051\075\052\100\053\067\054" +
    "\074\056\104\057\102\060\103\061\072\064\066\001\002" +
    "\000\046\042\uff84\043\uff84\044\uff84\045\uff84\046\uff84\047" +
    "\uff84\051\uff84\052\uff84\053\uff84\054\uff84\056\uff84\057\uff84" +
    "\060\uff84\061\uff84\064\uff84\067\uff84\070\uff84\071\uff84\001" +
    "\002\000\046\042\uff7b\043\uff7b\044\uff7b\045\uff7b\046\uff7b" +
    "\047\uff7b\051\uff7b\052\uff7b\053\uff7b\054\uff7b\056\uff7b\057" +
    "\uff7b\060\uff7b\061\uff7b\064\uff7b\067\uff7b\070\uff7b\071\uff7b" +
    "\001\002\000\046\042\uff83\043\uff83\044\uff83\045\uff83\046" +
    "\uff83\047\uff83\051\uff83\052\uff83\053\uff83\054\uff83\056\uff83" +
    "\057\uff83\060\uff83\061\uff83\064\uff83\067\uff83\070\uff83\071" +
    "\uff83\001\002\000\046\042\uff82\043\uff82\044\uff82\045\uff82" +
    "\046\uff82\047\uff82\051\uff82\052\uff82\053\uff82\054\uff82\056" +
    "\uff82\057\uff82\060\uff82\061\uff82\064\uff82\067\uff82\070\uff82" +
    "\071\uff82\001\002\000\016\006\006\007\005\010\004\011" +
    "\015\012\010\064\066\001\002\000\006\064\066\067\357" +
    "\001\002\000\004\035\355\001\002\000\004\065\141\001" +
    "\002\000\024\002\uffeb\003\uffeb\004\uffeb\005\uffeb\006\uffeb" +
    "\007\uffeb\010\uffeb\011\uffeb\012\uffeb\001\002\000\050\003" +
    "\uff71\006\uff71\007\uff71\010\uff71\011\uff71\012\uff71\013\uff71" +
    "\015\uff71\016\uff71\017\uff71\020\uff71\021\uff71\022\uff71\023" +
    "\uff71\024\uff71\025\uff71\030\uff71\035\uff71\066\uff71\001\002" +
    "\000\044\003\167\006\006\007\005\010\004\011\015\012" +
    "\010\013\166\015\154\016\157\017\172\020\161\023\177" +
    "\024\171\025\155\030\144\035\146\066\145\001\002\000" +
    "\004\063\056\001\002\000\004\063\uff96\001\002\000\060" +
    "\002\uff70\003\uff70\004\uff70\005\uff70\006\uff70\007\uff70\010" +
    "\uff70\011\uff70\012\uff70\013\uff70\014\uff70\015\uff70\016\uff70" +
    "\017\uff70\020\uff70\021\uff70\022\uff70\023\uff70\024\uff70\025" +
    "\uff70\030\uff70\035\uff70\066\uff70\001\002\000\016\036\132" +
    "\037\133\040\uffb4\041\uffb2\055\uffb6\063\uffe9\001\002\000" +
    "\050\003\uffa8\006\uffa8\007\uffa8\010\uffa8\011\uffa8\012\uffa8" +
    "\013\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022" +
    "\uffa8\023\uffa8\024\uffa8\025\uffa8\030\uffa8\035\uffa8\066\uffa8" +
    "\001\002\000\050\003\uffaa\006\uffaa\007\uffaa\010\uffaa\011" +
    "\uffaa\012\uffaa\013\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa" +
    "\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\030\uffaa\035" +
    "\uffaa\066\uffaa\001\002\000\044\003\167\006\006\007\005" +
    "\010\004\011\015\012\010\013\166\015\154\016\157\017" +
    "\172\020\161\023\177\024\171\025\155\030\144\035\146" +
    "\066\145\001\002\000\004\035\035\001\002\000\050\003" +
    "\uffa7\006\uffa7\007\uffa7\010\uffa7\011\uffa7\012\uffa7\013\uffa7" +
    "\015\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7\023" +
    "\uffa7\024\uffa7\025\uffa7\030\uffa7\035\uffa7\066\uffa7\001\002" +
    "\000\004\063\uffce\001\002\000\030\026\uffa1\027\uffa1\031" +
    "\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1\043\uffa1\062\uffa1" +
    "\063\uffa1\071\uff9f\001\002\000\004\071\267\001\002\000" +
    "\004\063\uffbb\001\002\000\050\003\uffab\006\uffab\007\uffab" +
    "\010\uffab\011\uffab\012\uffab\013\uffab\015\uffab\016\uffab\017" +
    "\uffab\020\uffab\021\uffab\022\uffab\023\uffab\024\uffab\025\uffab" +
    "\030\uffab\035\uffab\066\uffab\001\002\000\004\063\uffdf\001" +
    "\002\000\050\003\uffad\006\uffad\007\uffad\010\uffad\011\uffad" +
    "\012\uffad\013\uffad\015\uffad\016\uffad\017\uffad\020\uffad\021" +
    "\uffad\022\uffad\023\uffad\024\uffad\025\uffad\030\uffad\035\uffad" +
    "\066\uffad\001\002\000\060\002\uffaf\003\uffaf\004\uffaf\005" +
    "\uffaf\006\uffaf\007\uffaf\010\uffaf\011\uffaf\012\uffaf\013\uffaf" +
    "\014\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\022" +
    "\uffaf\023\uffaf\024\uffaf\025\uffaf\030\uffaf\035\uffaf\066\uffaf" +
    "\001\002\000\050\003\uffac\006\uffac\007\uffac\010\uffac\011" +
    "\uffac\012\uffac\013\uffac\015\uffac\016\uffac\017\uffac\020\uffac" +
    "\021\uffac\022\uffac\023\uffac\024\uffac\025\uffac\030\uffac\035" +
    "\uffac\066\uffac\001\002\000\050\003\uffa9\006\uffa9\007\uffa9" +
    "\010\uffa9\011\uffa9\012\uffa9\013\uffa9\015\uffa9\016\uffa9\017" +
    "\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9" +
    "\030\uffa9\035\uffa9\066\uffa9\001\002\000\004\063\uffe0\001" +
    "\002\000\050\003\uff99\006\uff99\007\uff99\010\uff99\011\uff99" +
    "\012\uff99\013\uff99\015\uff99\016\uff99\017\uff99\020\uff99\021" +
    "\uff99\022\uff99\023\uff99\024\uff99\025\uff99\030\uff99\035\uff99" +
    "\066\uff99\001\002\000\050\003\uffa6\006\uffa6\007\uffa6\010" +
    "\uffa6\011\uffa6\012\uffa6\013\uffa6\015\uffa6\016\uffa6\017\uffa6" +
    "\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6\030" +
    "\uffa6\035\uffa6\066\uffa6\001\002\000\004\071\uff9d\001\002" +
    "\000\004\065\uffb9\001\002\000\004\071\215\001\002\000" +
    "\004\071\214\001\002\000\004\071\213\001\002\000\004" +
    "\063\056\001\002\000\004\071\uff9b\001\002\000\004\071" +
    "\201\001\002\000\050\003\uff9a\006\uff9a\007\uff9a\010\uff9a" +
    "\011\uff9a\012\uff9a\013\uff9a\015\uff9a\016\uff9a\017\uff9a\020" +
    "\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a\025\uff9a\030\uff9a" +
    "\035\uff9a\066\uff9a\001\002\000\026\026\060\027\040\031" +
    "\043\032\041\033\052\034\053\035\042\043\044\062\054" +
    "\063\056\001\002\000\040\042\101\043\070\044\076\045" +
    "\077\046\071\047\073\051\075\052\100\053\067\054\074" +
    "\056\104\057\102\060\103\061\072\064\066\001\002\000" +
    "\004\065\141\001\002\000\052\003\uffe1\006\uffe1\007\uffe1" +
    "\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014\206\015\uffe1\016" +
    "\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1" +
    "\025\uffe1\030\uffe1\035\uffe1\066\uffe1\001\002\000\006\013" +
    "\uffe5\065\uffe3\001\002\000\004\065\141\001\002\000\004" +
    "\013\166\001\002\000\050\003\uffe4\006\uffe4\007\uffe4\010" +
    "\uffe4\011\uffe4\012\uffe4\013\uffe4\015\uffe4\016\uffe4\017\uffe4" +
    "\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\030" +
    "\uffe4\035\uffe4\066\uffe4\001\002\000\050\003\uffe2\006\uffe2" +
    "\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\015\uffe2\016" +
    "\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2" +
    "\025\uffe2\030\uffe2\035\uffe2\066\uffe2\001\002\000\050\003" +
    "\uffa2\006\uffa2\007\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2" +
    "\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2\023" +
    "\uffa2\024\uffa2\025\uffa2\030\uffa2\035\uffa2\066\uffa2\001\002" +
    "\000\050\003\uffa4\006\uffa4\007\uffa4\010\uffa4\011\uffa4\012" +
    "\uffa4\013\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4" +
    "\022\uffa4\023\uffa4\024\uffa4\025\uffa4\030\uffa4\035\uffa4\066" +
    "\uffa4\001\002\000\050\003\uffa5\006\uffa5\007\uffa5\010\uffa5" +
    "\011\uffa5\012\uffa5\013\uffa5\015\uffa5\016\uffa5\017\uffa5\020" +
    "\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5\030\uffa5" +
    "\035\uffa5\066\uffa5\001\002\000\004\065\141\001\002\000" +
    "\004\016\220\001\002\000\004\063\uffb8\001\002\000\004" +
    "\063\056\001\002\000\026\026\060\027\040\031\043\032" +
    "\041\033\052\034\053\035\042\043\044\062\054\063\056" +
    "\001\002\000\040\042\101\043\070\044\076\045\077\046" +
    "\071\047\073\051\075\052\100\053\067\054\074\056\104" +
    "\057\102\060\103\061\072\064\066\001\002\000\004\071" +
    "\225\001\002\000\050\003\uffb7\006\uffb7\007\uffb7\010\uffb7" +
    "\011\uffb7\012\uffb7\013\uffb7\015\uffb7\016\uffb7\017\uffb7\020" +
    "\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\030\uffb7" +
    "\035\uffb7\066\uffb7\001\002\000\004\071\227\001\002\000" +
    "\050\003\uff9c\006\uff9c\007\uff9c\010\uff9c\011\uff9c\012\uff9c" +
    "\013\uff9c\015\uff9c\016\uff9c\017\uff9c\020\uff9c\021\uff9c\022" +
    "\uff9c\023\uff9c\024\uff9c\025\uff9c\030\uff9c\035\uff9c\066\uff9c" +
    "\001\002\000\004\063\056\001\002\000\026\026\060\027" +
    "\040\031\043\032\041\033\052\034\053\035\042\043\044" +
    "\062\054\063\056\001\002\000\040\042\101\043\070\044" +
    "\076\045\077\046\071\047\073\051\075\052\100\053\067" +
    "\054\074\056\104\057\102\060\103\061\072\064\066\001" +
    "\002\000\004\065\141\001\002\000\010\021\246\022\236" +
    "\066\145\001\002\000\050\003\uffde\006\uffde\007\uffde\010" +
    "\uffde\011\uffde\012\uffde\013\uffde\015\uffde\016\uffde\017\uffde" +
    "\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\030" +
    "\uffde\035\uffde\066\uffde\001\002\000\004\070\uffcf\001\002" +
    "\000\026\026\060\027\040\031\043\032\041\033\052\034" +
    "\053\035\042\043\044\062\054\063\056\001\002\000\004" +
    "\066\uffd9\001\002\000\010\021\246\022\236\066\uffda\001" +
    "\002\000\050\003\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc" +
    "\012\uffdc\013\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021" +
    "\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\030\uffdc\035\uffdc" +
    "\066\uffdc\001\002\000\004\070\250\001\002\000\004\066" +
    "\145\001\002\000\010\021\uffd7\022\uffd7\066\uffd7\001\002" +
    "\000\026\026\uffd3\027\uffd3\031\uffd3\032\uffd3\033\uffd3\034" +
    "\uffd3\035\uffd3\043\uffd3\062\uffd3\063\uffd3\001\002\000\050" +
    "\003\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013" +
    "\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd" +
    "\023\uffdd\024\uffdd\025\uffdd\030\uffdd\035\uffdd\066\uffdd\001" +
    "\002\000\046\003\167\006\006\007\005\010\004\011\015" +
    "\012\010\013\166\015\154\016\157\017\172\020\161\023" +
    "\177\024\171\025\155\030\144\035\146\065\141\066\uffd0" +
    "\001\002\000\044\003\167\006\006\007\005\010\004\011" +
    "\015\012\010\013\166\015\154\016\157\017\172\020\161" +
    "\023\177\024\171\025\155\030\144\035\146\066\uffd2\001" +
    "\002\000\004\066\uffd1\001\002\000\050\003\uffae\006\uffae" +
    "\007\uffae\010\uffae\011\uffae\012\uffae\013\uffae\015\uffae\016" +
    "\uffae\017\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024\uffae" +
    "\025\uffae\030\uffae\035\uffae\066\uffae\001\002\000\004\066" +
    "\uffdb\001\002\000\010\021\uffd8\022\uffd8\066\uffd8\001\002" +
    "\000\040\042\101\043\070\044\076\045\077\046\071\047" +
    "\073\051\075\052\100\053\067\054\074\056\104\057\102" +
    "\060\103\061\072\070\257\001\002\000\052\003\167\006" +
    "\006\007\005\010\004\011\015\012\010\013\166\015\154" +
    "\016\157\017\172\020\161\021\uffd4\022\uffd4\023\177\024" +
    "\171\025\155\030\144\035\146\065\141\066\uffd4\001\002" +
    "\000\050\003\167\006\006\007\005\010\004\011\015\012" +
    "\010\013\166\015\154\016\157\017\172\020\161\021\uffd6" +
    "\022\uffd6\023\177\024\171\025\155\030\144\035\146\066" +
    "\uffd6\001\002\000\010\021\uffd5\022\uffd5\066\uffd5\001\002" +
    "\000\004\063\056\001\002\000\026\026\060\027\040\031" +
    "\043\032\041\033\052\034\053\035\042\043\044\062\054" +
    "\063\056\001\002\000\040\042\101\043\070\044\076\045" +
    "\077\046\071\047\073\051\075\052\100\053\067\054\074" +
    "\056\104\057\102\060\103\061\072\064\066\001\002\000" +
    "\004\065\141\001\002\000\050\003\uffba\006\uffba\007\uffba" +
    "\010\uffba\011\uffba\012\uffba\013\uffba\015\uffba\016\uffba\017" +
    "\uffba\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba\025\uffba" +
    "\030\uffba\035\uffba\066\uffba\001\002\000\050\003\uffa3\006" +
    "\uffa3\007\uffa3\010\uffa3\011\uffa3\012\uffa3\013\uffa3\015\uffa3" +
    "\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3\024" +
    "\uffa3\025\uffa3\030\uffa3\035\uffa3\066\uffa3\001\002\000\004" +
    "\071\274\001\002\000\026\026\060\027\040\031\043\032" +
    "\041\033\052\034\053\035\042\043\044\062\054\063\056" +
    "\001\002\000\040\042\101\043\070\044\076\045\077\046" +
    "\071\047\073\051\075\052\100\053\067\054\074\056\104" +
    "\057\102\060\103\061\072\071\273\001\002\000\050\003" +
    "\uffa0\006\uffa0\007\uffa0\010\uffa0\011\uffa0\012\uffa0\013\uffa0" +
    "\015\uffa0\016\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0\023" +
    "\uffa0\024\uffa0\025\uffa0\030\uffa0\035\uffa0\066\uffa0\001\002" +
    "\000\050\003\uff9e\006\uff9e\007\uff9e\010\uff9e\011\uff9e\012" +
    "\uff9e\013\uff9e\015\uff9e\016\uff9e\017\uff9e\020\uff9e\021\uff9e" +
    "\022\uff9e\023\uff9e\024\uff9e\025\uff9e\030\uff9e\035\uff9e\066" +
    "\uff9e\001\002\000\004\063\056\001\002\000\020\006\006" +
    "\007\005\010\004\011\015\012\010\035\303\071\277\001" +
    "\002\000\030\026\060\027\040\031\043\032\041\033\052" +
    "\034\053\035\042\043\044\062\054\063\056\071\342\001" +
    "\002\000\004\064\066\001\002\000\004\035\303\001\002" +
    "\000\004\071\313\001\002\000\004\055\uffb6\001\002\000" +
    "\006\067\306\071\uffc3\001\002\000\006\067\uffc1\071\uffc1" +
    "\001\002\000\004\035\303\001\002\000\006\067\uffc2\071" +
    "\uffc2\001\002\000\004\055\311\001\002\000\026\026\060" +
    "\027\040\031\043\032\041\033\052\034\053\035\042\043" +
    "\044\062\054\063\056\001\002\000\044\042\101\043\070" +
    "\044\076\045\077\046\071\047\073\051\075\052\100\053" +
    "\067\054\074\056\104\057\102\060\103\061\072\064\uffb5" +
    "\067\uffb5\071\uffb5\001\002\000\030\026\060\027\040\031" +
    "\043\032\041\033\052\034\053\035\042\043\044\062\054" +
    "\063\056\071\315\001\002\000\040\042\101\043\070\044" +
    "\076\045\077\046\071\047\073\051\075\052\100\053\067" +
    "\054\074\056\104\057\102\060\103\061\072\071\334\001" +
    "\002\000\006\035\321\064\uffc8\001\002\000\006\064\uffbf" +
    "\067\uffbf\001\002\000\006\064\uffbe\067\uffbe\001\002\000" +
    "\006\064\uffca\067\332\001\002\000\014\036\132\037\133" +
    "\040\uffb4\041\uffb2\055\uffb6\001\002\000\006\064\uffbc\067" +
    "\uffbc\001\002\000\006\064\uffbd\067\uffbd\001\002\000\004" +
    "\040\330\001\002\000\004\041\326\001\002\000\026\026" +
    "\060\027\040\031\043\032\041\033\052\034\053\035\042" +
    "\043\044\062\054\063\056\001\002\000\044\042\101\043" +
    "\070\044\076\045\077\046\071\047\073\051\075\052\100" +
    "\053\067\054\074\056\104\057\102\060\103\061\072\064" +
    "\uffb1\067\uffb1\071\uffb1\001\002\000\026\026\060\027\040" +
    "\031\043\032\041\033\052\034\053\035\042\043\044\062" +
    "\054\063\056\001\002\000\044\042\101\043\070\044\076" +
    "\045\077\046\071\047\073\051\075\052\100\053\067\054" +
    "\074\056\104\057\102\060\103\061\072\064\uffb3\067\uffb3" +
    "\071\uffb3\001\002\000\004\035\321\001\002\000\006\064" +
    "\uffc0\067\uffc0\001\002\000\006\035\321\064\uffcb\001\002" +
    "\000\006\064\uffcc\067\332\001\002\000\006\067\306\071" +
    "\uffc4\001\002\000\004\065\141\001\002\000\050\003\uffcd" +
    "\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\015" +
    "\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd" +
    "\024\uffcd\025\uffcd\030\uffcd\035\uffcd\066\uffcd\001\002\000" +
    "\040\042\101\043\070\044\076\045\077\046\071\047\073" +
    "\051\075\052\100\053\067\054\074\056\104\057\102\060" +
    "\103\061\072\071\344\001\002\000\006\035\321\064\uffc5" +
    "\001\002\000\006\064\uffc6\067\332\001\002\000\006\035" +
    "\321\064\uffc7\001\002\000\006\064\uffc9\067\332\001\002" +
    "\000\060\002\uffb0\003\uffb0\004\uffb0\005\uffb0\006\uffb0\007" +
    "\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0" +
    "\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024" +
    "\uffb0\025\uffb0\030\uffb0\035\uffb0\066\uffb0\001\002\000\030" +
    "\026\060\027\040\031\043\032\041\033\052\034\053\035" +
    "\042\043\044\062\054\063\056\064\066\001\002\000\004" +
    "\071\354\001\002\000\040\042\101\043\070\044\076\045" +
    "\077\046\071\047\073\051\075\052\100\053\067\054\074" +
    "\056\104\057\102\060\103\061\072\064\066\001\002\000" +
    "\004\071\353\001\002\000\050\003\uff98\006\uff98\007\uff98" +
    "\010\uff98\011\uff98\012\uff98\013\uff98\015\uff98\016\uff98\017" +
    "\uff98\020\uff98\021\uff98\022\uff98\023\uff98\024\uff98\025\uff98" +
    "\030\uff98\035\uff98\066\uff98\001\002\000\050\003\uff97\006" +
    "\uff97\007\uff97\010\uff97\011\uff97\012\uff97\013\uff97\015\uff97" +
    "\016\uff97\017\uff97\020\uff97\021\uff97\022\uff97\023\uff97\024" +
    "\uff97\025\uff97\030\uff97\035\uff97\066\uff97\001\002\000\006" +
    "\064\uffe6\067\uffe6\001\002\000\004\065\141\001\002\000" +
    "\014\006\006\007\005\010\004\011\015\012\010\001\002" +
    "\000\004\035\361\001\002\000\006\064\uffe7\067\uffe7\001" +
    "\002\000\024\002\uffed\003\uffed\004\uffed\005\uffed\006\uffed" +
    "\007\uffed\010\uffed\011\uffed\012\uffed\001\002\000\004\063" +
    "\056\001\002\000\004\063\uffe9\001\002\000\016\006\006" +
    "\007\005\010\004\011\015\012\010\064\066\001\002\000" +
    "\006\064\066\067\357\001\002\000\004\065\141\001\002" +
    "\000\024\002\uffea\003\uffea\004\uffea\005\uffea\006\uffea\007" +
    "\uffea\010\uffea\011\uffea\012\uffea\001\002\000\004\065\141" +
    "\001\002\000\024\002\uffec\003\uffec\004\uffec\005\uffec\006" +
    "\uffec\007\uffec\010\uffec\011\uffec\012\uffec\001\002\000\004" +
    "\035\364\001\002\000\004\071\375\001\002\000\024\002" +
    "\ufff8\003\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8" +
    "\011\ufff8\012\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\373\000\022\002\022\003\021\004\010\005\020\017" +
    "\013\020\016\023\006\051\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\062\372\001\001" +
    "\000\004\050\362\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\021\030\022\025\050\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\004" +
    "\024\005\020\017\013\020\016\023\006\051\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\056\133\001\001\000\004\063\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\033\001\001\000\002\001\001\000\004\063\035\001\001" +
    "\000\002\001\001\000\022\006\060\011\045\012\050\013" +
    "\046\014\054\015\047\050\056\056\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\006\060\011\130\012\050\013\046\014\054" +
    "\015\047\050\056\056\044\001\001\000\022\006\060\011" +
    "\126\012\050\013\046\014\054\015\047\050\056\056\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\006\060\011\125\012\050\013\046\014\054\015" +
    "\047\050\056\056\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\056\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\006\060\007\062\011\064\012\050" +
    "\013\046\014\054\015\047\050\056\056\044\057\063\001" +
    "\001\000\004\057\122\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\006\060\011\121\012" +
    "\050\013\046\014\054\015\047\050\056\056\044\001\001" +
    "\000\022\006\060\011\120\012\050\013\046\014\054\015" +
    "\047\050\056\056\044\001\001\000\022\006\060\011\117" +
    "\012\050\013\046\014\054\015\047\050\056\056\044\001" +
    "\001\000\022\006\060\011\116\012\050\013\046\014\054" +
    "\015\047\050\056\056\044\001\001\000\022\006\060\011" +
    "\115\012\050\013\046\014\054\015\047\050\056\056\044" +
    "\001\001\000\022\006\060\011\114\012\050\013\046\014" +
    "\054\015\047\050\056\056\044\001\001\000\022\006\060" +
    "\011\113\012\050\013\046\014\054\015\047\050\056\056" +
    "\044\001\001\000\022\006\060\011\112\012\050\013\046" +
    "\014\054\015\047\050\056\056\044\001\001\000\022\006" +
    "\060\011\111\012\050\013\046\014\054\015\047\050\056" +
    "\056\044\001\001\000\022\006\060\011\110\012\050\013" +
    "\046\014\054\015\047\050\056\056\044\001\001\000\022" +
    "\006\060\011\107\012\050\013\046\014\054\015\047\050" +
    "\056\056\044\001\001\000\022\006\060\011\106\012\050" +
    "\013\046\014\054\015\047\050\056\056\044\001\001\000" +
    "\022\006\060\011\105\012\050\013\046\014\054\015\047" +
    "\050\056\056\044\001\001\000\022\006\060\011\104\012" +
    "\050\013\046\014\054\015\047\050\056\056\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\006\060\011" +
    "\124\012\050\013\046\014\054\015\047\050\056\056\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\057" +
    "\127\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\010\134\020\135\057" +
    "\136\001\001\000\004\057\355\001\001\000\002\001\001" +
    "\000\006\024\137\060\141\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\006\174\015\155\016\172\017\163" +
    "\020\151\025\150\026\161\027\167\030\157\031\147\037" +
    "\146\040\152\041\164\047\173\050\056\052\175\055\142" +
    "\061\162\001\001\000\004\056\346\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\073\307\074\323\075\324" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\006" +
    "\174\015\155\016\172\017\163\020\151\026\252\027\167" +
    "\030\157\031\147\037\146\040\152\041\164\047\173\050" +
    "\056\052\175\055\142\061\345\001\001\000\006\021\030" +
    "\022\025\001\001\000\002\001\001\000\004\067\274\001" +
    "\001\000\006\076\270\077\267\001\001\000\002\001\001" +
    "\000\004\070\261\001\001\000\002\001\001\000\004\066" +
    "\227\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\100\225\001\001\000\004" +
    "\071\215\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\056\201\001\001\000\004\101\177" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\006" +
    "\060\011\202\012\050\013\046\014\054\015\047\050\056" +
    "\056\044\001\001\000\004\057\203\001\001\000\006\024" +
    "\204\060\141\001\001\000\002\001\001\000\006\064\207" +
    "\065\206\001\001\000\006\024\211\060\141\001\001\000" +
    "\006\030\210\052\175\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\024\216\060\141\001\001\000\002\001\001" +
    "\000\004\072\220\001\001\000\004\056\221\001\001\000" +
    "\022\006\060\011\222\012\050\013\046\014\054\015\047" +
    "\050\056\056\044\001\001\000\004\057\223\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\056\230\001\001\000\022\006\060\011" +
    "\231\012\050\013\046\014\054\015\047\050\056\056\044" +
    "\001\001\000\004\057\232\001\001\000\006\032\234\060" +
    "\233\001\001\000\020\033\243\034\240\035\237\036\244" +
    "\053\236\054\242\061\241\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\006\060\011\255\012\050\013\046" +
    "\014\054\015\047\050\056\056\044\001\001\000\002\001" +
    "\001\000\012\035\253\036\254\053\236\054\242\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\061\246\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\050\006\174\015\155\016\172\017\163\020\151\024" +
    "\251\025\250\026\161\027\167\030\157\031\147\037\146" +
    "\040\152\041\164\047\173\050\056\052\175\055\142\060" +
    "\141\001\001\000\042\006\174\015\155\016\172\017\163" +
    "\020\151\026\252\027\167\030\157\031\147\037\146\040" +
    "\152\041\164\047\173\050\056\052\175\055\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\006\174\015\155" +
    "\016\172\017\163\020\151\024\260\025\257\026\161\027" +
    "\167\030\157\031\147\037\146\040\152\041\164\047\173" +
    "\050\056\052\175\055\142\060\141\001\001\000\042\006" +
    "\174\015\155\016\172\017\163\020\151\026\252\027\167" +
    "\030\157\031\147\037\146\040\152\041\164\047\173\050" +
    "\056\052\175\055\142\001\001\000\002\001\001\000\004" +
    "\056\262\001\001\000\022\006\060\011\263\012\050\013" +
    "\046\014\054\015\047\050\056\056\044\001\001\000\004" +
    "\057\264\001\001\000\006\024\265\060\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\006\060\011\271\012\050\013\046\014\054\015\047\050" +
    "\056\056\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\056\275\001\001\000\014\020" +
    "\300\042\277\043\301\046\303\047\304\001\001\000\022" +
    "\006\060\011\340\012\050\013\046\014\054\015\047\050" +
    "\056\056\044\001\001\000\004\057\336\001\001\000\006" +
    "\046\335\047\304\001\001\000\002\001\001\000\004\073" +
    "\307\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\047\306\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\006\060\011\311\012\050\013\046\014\054\015\047" +
    "\050\056\056\044\001\001\000\002\001\001\000\022\006" +
    "\060\011\313\012\050\013\046\014\054\015\047\050\056" +
    "\056\044\001\001\000\002\001\001\000\014\015\316\016" +
    "\321\044\317\045\315\047\322\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\073\307\074" +
    "\323\075\324\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\006\060\011" +
    "\326\012\050\013\046\014\054\015\047\050\056\056\044" +
    "\001\001\000\002\001\001\000\022\006\060\011\330\012" +
    "\050\013\046\014\054\015\047\050\056\056\044\001\001" +
    "\000\002\001\001\000\012\015\316\016\321\045\332\047" +
    "\322\001\001\000\002\001\001\000\014\015\316\016\321" +
    "\044\334\045\315\047\322\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\024\337\060\141\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\015\316\016\321\044" +
    "\342\045\315\047\322\001\001\000\002\001\001\000\014" +
    "\015\316\016\321\044\344\045\315\047\322\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\006\060\011\350" +
    "\012\050\013\046\014\054\015\047\050\056\056\044\057" +
    "\347\001\001\000\002\001\001\000\004\057\351\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\024\361\060\141\001\001\000\004" +
    "\020\357\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\056\364\001\001\000\002\001\001" +
    "\000\010\010\365\020\135\057\366\001\001\000\004\057" +
    "\370\001\001\000\006\024\367\060\141\001\001\000\002" +
    "\001\001\000\006\024\371\060\141\001\001\000\002\001" +
    "\001\000\006\006\373\050\056\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserF$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserF$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserF$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public ScannerF s;
    int index;
    int nIB = 0;
    WordPainter painter;
    public ParserF(ScannerF s,WordPainter painter) {
        super(s);
        this.s = s;
        this.painter = painter;
    }
    public void syntax_error(Symbol sym) {
        painter.SERROR(sym.left,sym.right);
    }
    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception {}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserF$actions {
  private final ParserF parser;

  /** Constructor */
  CUP$ParserF$actions(ParserF parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserF$do_action_part00000000(
    int                        CUP$ParserF$act_num,
    java_cup.runtime.lr_parser CUP$ParserF$parser,
    java.util.Stack            CUP$ParserF$stack,
    int                        CUP$ParserF$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserF$result;

      /* select the action based on the action number */
      switch (CUP$ParserF$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INIT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		RESULT = start_val;
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserF$parser.done_parsing();
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INIT ::= INSTSGLOBAL 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INIT",0, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTSGLOBAL ::= INSTSGLOBAL INSTGLOBAL 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTSGLOBAL",1, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTSGLOBAL ::= INSTGLOBAL 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTSGLOBAL",1, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTGLOBAL ::= CALLMAINFUNC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTGLOBAL",2, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTGLOBAL ::= DECLID 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTGLOBAL",2, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTGLOBAL ::= DECLFUNC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTGLOBAL",2, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTGLOBAL ::= error 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTGLOBAL",2, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$0 ::= 
            {
              String RESULT =null;
		int mnleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int mnright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String mn = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW4(mnleft, mnright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$0",48, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CALLMAINFUNC ::= RW_main NT$0 CALLFUNC TK_semicolon 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int mnleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int mnright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String mn = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CALLMAINFUNC",3, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CALLFUNC ::= IDCOLORFNC COLORLPAR LISTARGS COLORRPAR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CALLFUNC",4, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CALLFUNC ::= IDCOLORFNC COLORLPAR COLORRPAR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CALLFUNC",4, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LISTARGS ::= LISTARGS TK_comma EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LISTARGS",5, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LISTARGS ::= EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LISTARGS",5, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLID ::= TYPE INITIDS TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DECLID",13, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INITIDS ::= INITIDS TK_comma INITID 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INITIDS",15, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INITIDS ::= INITID 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INITIDS",15, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$1 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.VARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$1",49, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INITID ::= TK_id NT$1 TK_equ EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INITID",16, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INITID ::= TK_id 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.VARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INITID",16, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLFUNC ::= TYPE IDCOLORFNC COLORLPAR LISTPARAMS COLORRPAR ENV 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DECLFUNC",17, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLFUNC ::= VOIDCOLOR IDCOLORFNC COLORLPAR LISTPARAMS COLORRPAR ENV 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DECLFUNC",17, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLFUNC ::= TYPE IDCOLORFNC COLORLPAR COLORRPAR ENV 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DECLFUNC",17, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLFUNC ::= VOIDCOLOR IDCOLORFNC COLORLPAR COLORRPAR ENV 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DECLFUNC",17, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // IDCOLORFNC ::= TK_id 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.FNC(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("IDCOLORFNC",38, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VOIDCOLOR ::= RW_void 
            {
              String RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String vd = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(vdleft, vdright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("VOIDCOLOR",39, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LISTPARAMS ::= LISTPARAMS TK_comma TYPE TK_id 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.VARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LISTPARAMS",6, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LISTPARAMS ::= TYPE TK_id 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.VARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LISTPARAMS",6, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$2 ::= 
            {
              String RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String el = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(elleft, elright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$2",50, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IFSTRUCT ::= IFCOLOR COLORLPAR EXP COLORRPAR ENV RW_else NT$2 IFSTRUCT 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String el = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("IFSTRUCT",22, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-7)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$3 ::= 
            {
              String RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String el = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(elleft, elright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$3",51, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IFSTRUCT ::= IFCOLOR COLORLPAR EXP COLORRPAR ENV RW_else NT$3 ENV 
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String el = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("IFSTRUCT",22, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-7)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // IFSTRUCT ::= IFCOLOR COLORLPAR EXP COLORRPAR ENV 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("IFSTRUCT",22, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // IFCOLOR ::= RW_if 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(ileft, iright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("IFCOLOR",40, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$4 ::= 
            {
              String RESULT =null;
		int swleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String sw = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(swleft, swright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$4",52, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SWITCHSTRUCT ::= RW_switch NT$4 COLORLPAR EXP COLORRPAR ENVS 
            {
              String RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)).value;
		int swleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).left;
		int swright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).right;
		String sw = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("SWITCHSTRUCT",23, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ENVS ::= COLORLBRC CASESDEFAULT COLORRBRC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ENVS",24, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ENVS ::= COLORLBRC COLORRBRC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ENVS",24, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CASESDEFAULT ::= CASES DEFAULT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASESDEFAULT",25, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CASESDEFAULT ::= CASES 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASESDEFAULT",25, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CASESDEFAULT ::= DEFAULT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASESDEFAULT",25, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CASES ::= CASES CASE 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASES",26, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CASES ::= CASE 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASES",26, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CASE ::= CASECOLOR EXP TK_colon INSTRUCTIONS 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASE",28, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CASE ::= CASECOLOR EXP TK_colon ENV 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASE",28, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CASE ::= CASECOLOR EXP TK_colon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASE",28, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CASECOLOR ::= RW_case 
            {
              String RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String cs = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(csleft, csright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASECOLOR",41, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DEFAULT ::= DEFAULTCOLOR TK_colon INSTRUCTIONS 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DEFAULT",27, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DEFAULT ::= DEFAULTCOLOR TK_colon ENV 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DEFAULT",27, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DEFAULT ::= DEFAULTCOLOR TK_colon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DEFAULT",27, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DEFAULTCOLOR ::= RW_default 
            {
              String RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String df = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(dfleft, dfright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DEFAULTCOLOR",42, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$5 ::= 
            {
              String RESULT =null;
		int frleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int frright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String fr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(frleft, frright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$5",53, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LOOPFOR ::= RW_for NT$5 COLORLPAR ARGSFOR COLORRPAR ENV 
            {
              String RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)).value;
		int frleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).left;
		int frright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).right;
		String fr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOOPFOR",31, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ARGSFOR ::= INITIALIZE TK_semicolon EXP TK_semicolon UPDATESFOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARGSFOR",32, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ARGSFOR ::= INITIALIZE TK_semicolon EXP TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARGSFOR",32, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ARGSFOR ::= INITIALIZE TK_semicolon TK_semicolon UPDATESFOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARGSFOR",32, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ARGSFOR ::= TK_semicolon EXP TK_semicolon UPDATESFOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARGSFOR",32, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ARGSFOR ::= INITIALIZE TK_semicolon TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARGSFOR",32, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ARGSFOR ::= TK_semicolon EXP TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARGSFOR",32, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ARGSFOR ::= TK_semicolon TK_semicolon UPDATESFOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARGSFOR",32, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ARGSFOR ::= TK_semicolon TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARGSFOR",32, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // INITIALIZE ::= TYPE REASIGNS 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INITIALIZE",33, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // INITIALIZE ::= REASIGNS 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INITIALIZE",33, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // REASIGNS ::= REASIGNS TK_comma REASIGN 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("REASIGNS",36, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // REASIGNS ::= REASIGN 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("REASIGNS",36, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // UPDATESFOR ::= UPDATESFOR TK_comma UPDATEFOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("UPDATESFOR",34, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // UPDATESFOR ::= UPDATEFOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("UPDATESFOR",34, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // UPDATEFOR ::= INCDEC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("UPDATEFOR",35, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // UPDATEFOR ::= REASIGN 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("UPDATEFOR",35, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // UPDATEFOR ::= ADDSUB 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("UPDATEFOR",35, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$6 ::= 
            {
              String RESULT =null;
		int whlleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int whlright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String whl = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(whlleft, whlright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$6",54, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LOOPWHILE ::= RW_while NT$6 COLORLPAR EXP COLORRPAR ENV 
            {
              String RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)).value;
		int whlleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).left;
		int whlright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).right;
		String whl = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOOPWHILE",29, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$7 ::= 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(dleft, dright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$7",55, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$8 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;
		int whlleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int whlright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String whl = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(whlleft, whlright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$8",56, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // LOOPDOWHILE ::= RW_do NT$7 ENV RW_while NT$8 COLORLPAR EXP COLORRPAR TK_semicolon 
            {
              String RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-8)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-8)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-8)).value;
		int whlleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).left;
		int whlright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).right;
		String whl = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOOPDOWHILE",30, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-8)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$9 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.VARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$9",57, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // REASIGN ::= TK_id NT$9 TK_equ EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("REASIGN",37, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$10 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.VARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$10",58, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ADDSUB ::= TK_id NT$10 TK_add EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ADDSUB",12, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$11 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.VARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$11",59, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ADDSUB ::= TK_id NT$11 TK_sub EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ADDSUB",12, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ENV ::= COLORLBRC INSTRUCTIONS COLORRBRC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ENV",18, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ENV ::= COLORLBRC COLORRBRC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ENV",18, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // INSTRUCTIONS ::= INSTRUCTIONS INSTRUCTION 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",19, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // INSTRUCTIONS ::= INSTRUCTION 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",19, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // INSTRUCTION ::= DECLID 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",20, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // INSTRUCTION ::= IFSTRUCT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",20, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // INSTRUCTION ::= SWITCHSTRUCT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",20, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // INSTRUCTION ::= LOOPFOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",20, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // INSTRUCTION ::= LOOPWHILE 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",20, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // INSTRUCTION ::= LOOPDOWHILE 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",20, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // INSTRUCTION ::= PRINT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",20, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // INSTRUCTION ::= ADDSUB TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",20, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // INSTRUCTION ::= REASIGN TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",20, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // INSTRUCTION ::= INCDEC TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",20, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // INSTRUCTION ::= CALLFUNC TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",20, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$12 ::= 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(tleft, tright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$12",60, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // INSTRUCTION ::= RW_return NT$12 EXP TK_semicolon 
            {
              String RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",20, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NT$13 ::= 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(tleft, tright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$13",61, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // INSTRUCTION ::= RW_return NT$13 TK_semicolon 
            {
              String RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",20, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NT$14 ::= 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(tleft, tright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$14",62, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // INSTRUCTION ::= RW_continue NT$14 TK_semicolon 
            {
              String RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",20, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$15 ::= 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(tleft, tright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$15",63, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // INSTRUCTION ::= RW_break NT$15 TK_semicolon 
            {
              String RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",20, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // INSTRUCTION ::= error 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",20, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // PRINT ::= PRINTCOLOR COLORLPAR EXP COLORRPAR TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("PRINT",21, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // PRINT ::= PRINTCOLOR COLORLPAR COLORRPAR TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("PRINT",21, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // PRINTCOLOR ::= RW_print 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.FNC(pleft, pright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("PRINTCOLOR",43, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // TYPE ::= RW_String 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(tpleft, tpright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TYPE",14, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // TYPE ::= RW_int 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(tpleft, tpright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TYPE",14, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // TYPE ::= RW_boolean 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(tpleft, tpright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TYPE",14, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // TYPE ::= RW_char 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(tpleft, tpright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TYPE",14, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // TYPE ::= RW_double 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(tpleft, tpright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TYPE",14, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXP ::= ARITHMETICS 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXP ::= RELATIONALS 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXP ::= LOGICS 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXP ::= INCDEC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXP ::= CALLFUNC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXP ::= TK_string 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.STRING(trleft, trright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EXP ::= TK_char 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.CHAR(trleft, trright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // EXP ::= TK_int 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.NUMBER(trleft, trright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // EXP ::= TK_double 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.NUMBER(trleft, trright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // EXP ::= TK_id 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.VARIABLE(trleft, trright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // EXP ::= RW_true 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW3(trleft, trright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // EXP ::= RW_false 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW3(trleft, trright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // EXP ::= COLORLPAR EXP COLORRPAR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // INCDEC ::= TK_id TK_inc 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		painter.VARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INCDEC",11, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // INCDEC ::= TK_id TK_dec 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		painter.VARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INCDEC",11, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ARITHMETICS ::= EXP TK_plus EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ARITHMETICS ::= EXP TK_minus EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ARITHMETICS ::= EXP TK_mult EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ARITHMETICS ::= EXP TK_div EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ARITHMETICS ::= EXP TK_pow EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ARITHMETICS ::= EXP TK_mod EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ARITHMETICS ::= TK_minus EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // RELATIONALS ::= EXP TK_equequ EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",9, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // RELATIONALS ::= EXP TK_notequ EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",9, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // RELATIONALS ::= EXP TK_lessequ EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",9, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // RELATIONALS ::= EXP TK_moreequ EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",9, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // RELATIONALS ::= EXP TK_less EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",9, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // RELATIONALS ::= EXP TK_more EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",9, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // LOGICS ::= EXP TK_and EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOGICS",10, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // LOGICS ::= EXP TK_or EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOGICS",10, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // LOGICS ::= TK_not EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOGICS",10, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // COLORLBRC ::= TK_lbrc 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.BRKT(nIB, lleft, lright); nIB ++;
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORLBRC",46, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // COLORRBRC ::= TK_rbrc 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		nIB --; painter.BRKT(nIB, rleft, rright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORRBRC",47, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // COLORLPAR ::= TK_lpar 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.BRKT(nIB, lleft, lright); nIB ++;
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORLPAR",44, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // COLORRPAR ::= TK_rpar 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		nIB --; painter.BRKT(nIB, rleft, rright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORRPAR",45, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserF$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserF$do_action(
    int                        CUP$ParserF$act_num,
    java_cup.runtime.lr_parser CUP$ParserF$parser,
    java.util.Stack            CUP$ParserF$stack,
    int                        CUP$ParserF$top)
    throws java.lang.Exception
    {
              return CUP$ParserF$do_action_part00000000(
                               CUP$ParserF$act_num,
                               CUP$ParserF$parser,
                               CUP$ParserF$stack,
                               CUP$ParserF$top);
    }
}

}
