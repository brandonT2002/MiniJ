
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Language;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Map;
import java.util.TreeMap;
import java.util.stream.Collectors;
import java_cup.runtime.*;
import Components.Response;
import Components.ErrorS;
import Painter.WordPainter;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserF extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return TOK.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserF() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserF(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserF(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\177\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\005\005\000" +
    "\002\006\006\000\002\006\005\000\002\007\005\000\002" +
    "\007\003\000\002\017\005\000\002\021\005\000\002\021" +
    "\003\000\002\022\005\000\002\022\003\000\002\023\010" +
    "\000\002\023\010\000\002\023\007\000\002\023\007\000" +
    "\002\010\006\000\002\010\004\000\002\030\011\000\002" +
    "\030\011\000\002\030\007\000\002\031\007\000\002\032" +
    "\005\000\002\032\004\000\002\033\004\000\002\033\003" +
    "\000\002\033\003\000\002\034\004\000\002\034\003\000" +
    "\002\036\006\000\002\036\006\000\002\036\005\000\002" +
    "\035\005\000\002\035\005\000\002\035\004\000\002\041" +
    "\007\000\002\042\007\000\002\042\006\000\002\042\006" +
    "\000\002\042\006\000\002\042\005\000\002\042\005\000" +
    "\002\042\005\000\002\042\004\000\002\043\004\000\002" +
    "\043\003\000\002\046\005\000\002\046\003\000\002\044" +
    "\005\000\002\044\003\000\002\045\003\000\002\045\003" +
    "\000\002\045\003\000\002\037\007\000\002\040\011\000" +
    "\002\047\005\000\002\016\005\000\002\016\005\000\002" +
    "\024\005\000\002\024\004\000\002\025\004\000\002\025" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\004\000\002\026\004\000\002" +
    "\026\004\000\002\026\004\000\002\051\002\000\002\026" +
    "\006\000\002\052\002\000\002\026\005\000\002\053\002" +
    "\000\002\026\005\000\002\054\002\000\002\026\005\000" +
    "\002\026\003\000\002\027\007\000\002\027\006\000\002" +
    "\050\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\005\000\002\015\004" +
    "\000\002\015\004\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\004\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\345\000\022\003\017\004\012\005\015\006\006\007" +
    "\005\010\004\011\014\012\010\001\002\000\004\035\uffa3" +
    "\001\002\000\004\035\uffa4\001\002\000\004\035\uffa6\001" +
    "\002\000\024\002\ufffb\003\ufffb\004\ufffb\005\ufffb\006\ufffb" +
    "\007\ufffb\010\ufffb\011\ufffb\012\ufffb\001\002\000\004\035" +
    "\uffa2\001\002\000\024\002\ufffe\003\ufffe\004\ufffe\005\ufffe" +
    "\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe\001\002\000" +
    "\004\035\346\001\002\000\024\002\ufffc\003\ufffc\004\ufffc" +
    "\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\001" +
    "\002\000\004\035\uffa5\001\002\000\004\035\336\001\002" +
    "\000\004\035\026\001\002\000\024\002\ufffa\003\ufffa\004" +
    "\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa" +
    "\001\002\000\024\002\ufffd\003\ufffd\004\ufffd\005\ufffd\006" +
    "\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\001\002\000\024" +
    "\002\000\003\017\004\012\005\015\006\006\007\005\010" +
    "\004\011\014\012\010\001\002\000\004\002\023\001\002" +
    "\000\004\002\001\001\002\000\024\002\uffff\003\uffff\004" +
    "\uffff\005\uffff\006\uffff\007\uffff\010\uffff\011\uffff\012\uffff" +
    "\001\002\000\006\067\ufff2\071\ufff2\001\002\000\012\055" +
    "\034\063\126\067\ufff0\071\ufff0\001\002\000\006\067\031" +
    "\071\030\001\002\000\056\002\ufff4\003\ufff4\004\ufff4\005" +
    "\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4" +
    "\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023" +
    "\ufff4\024\ufff4\025\ufff4\030\ufff4\035\ufff4\066\ufff4\001\002" +
    "\000\004\035\033\001\002\000\006\067\ufff3\071\ufff3\001" +
    "\002\000\010\055\034\067\ufff0\071\ufff0\001\002\000\026" +
    "\026\044\027\045\031\036\032\043\033\035\034\042\035" +
    "\052\043\040\062\047\063\046\001\002\000\046\042\uff9a" +
    "\043\uff9a\044\uff9a\045\uff9a\046\uff9a\047\uff9a\051\uff9a\052" +
    "\uff9a\053\uff9a\054\uff9a\056\uff9a\057\uff9a\060\uff9a\061\uff9a" +
    "\064\uff9a\067\uff9a\070\uff9a\071\uff9a\001\002\000\046\042" +
    "\uff9c\043\uff9c\044\uff9c\045\uff9c\046\uff9c\047\uff9c\051\uff9c" +
    "\052\uff9c\053\uff9c\054\uff9c\056\uff9c\057\uff9c\060\uff9c\061" +
    "\uff9c\064\uff9c\067\uff9c\070\uff9c\071\uff9c\001\002\000\046" +
    "\042\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e\047\uff9e\051" +
    "\uff9e\052\uff9e\053\uff9e\054\uff9e\056\uff9e\057\uff9e\060\uff9e" +
    "\061\uff9e\064\uff9e\067\uff9e\070\uff9e\071\uff9e\001\002\000" +
    "\026\026\044\027\045\031\036\032\043\033\035\034\042" +
    "\035\052\043\040\062\047\063\046\001\002\000\046\042" +
    "\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d\047\uff9d\051\uff9d" +
    "\052\uff9d\053\uff9d\054\uff9d\056\uff9d\057\uff9d\060\uff9d\061" +
    "\uff9d\064\uff9d\067\uff9d\070\uff9d\071\uff9d\001\002\000\046" +
    "\042\uff99\043\uff99\044\uff99\045\uff99\046\uff99\047\uff99\051" +
    "\uff99\052\uff99\053\uff99\054\uff99\056\uff99\057\uff99\060\uff99" +
    "\061\uff99\064\uff99\067\uff99\070\uff99\071\uff99\001\002\000" +
    "\046\042\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b\047\uff9b" +
    "\051\uff9b\052\uff9b\053\uff9b\054\uff9b\056\uff9b\057\uff9b\060" +
    "\uff9b\061\uff9b\064\uff9b\067\uff9b\070\uff9b\071\uff9b\001\002" +
    "\000\046\042\uff97\043\uff97\044\uff97\045\uff97\046\uff97\047" +
    "\uff97\051\uff97\052\uff97\053\uff97\054\uff97\056\uff97\057\uff97" +
    "\060\uff97\061\uff97\064\uff97\067\uff97\070\uff97\071\uff97\001" +
    "\002\000\046\042\uff96\043\uff96\044\uff96\045\uff96\046\uff96" +
    "\047\uff96\051\uff96\052\uff96\053\uff96\054\uff96\056\uff96\057" +
    "\uff96\060\uff96\061\uff96\064\uff96\067\uff96\070\uff96\071\uff96" +
    "\001\002\000\026\026\044\027\045\031\036\032\043\033" +
    "\035\034\042\035\052\043\040\062\047\063\046\001\002" +
    "\000\026\026\044\027\045\031\036\032\043\033\035\034" +
    "\042\035\052\043\040\062\047\063\046\001\002\000\046" +
    "\042\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1\047\uffa1\051" +
    "\uffa1\052\uffa1\053\uffa1\054\uffa1\056\uffa1\057\uffa1\060\uffa1" +
    "\061\uffa1\064\uffa1\067\uffa1\070\uffa1\071\uffa1\001\002\000" +
    "\046\042\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0" +
    "\051\uffa0\052\uffa0\053\uffa0\054\uffa0\056\uffa0\057\uffa0\060" +
    "\uffa0\061\uffa0\064\uffa0\067\uffa0\070\uffa0\071\uffa0\001\002" +
    "\000\054\036\111\037\112\042\uff98\043\uff98\044\uff98\045" +
    "\uff98\046\uff98\047\uff98\051\uff98\052\uff98\053\uff98\054\uff98" +
    "\056\uff98\057\uff98\060\uff98\061\uff98\063\113\064\uff98\067" +
    "\uff98\070\uff98\071\uff98\001\002\000\042\042\067\043\055" +
    "\044\064\045\065\046\056\047\061\051\063\052\066\053" +
    "\057\054\062\056\072\057\070\060\071\061\060\067\ufff1" +
    "\071\ufff1\001\002\000\046\042\uff9f\043\uff9f\044\uff9f\045" +
    "\uff9f\046\uff9f\047\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f" +
    "\056\uff9f\057\uff9f\060\uff9f\061\uff9f\064\uff9f\067\uff9f\070" +
    "\uff9f\071\uff9f\001\002\000\026\026\044\027\045\031\036" +
    "\032\043\033\035\034\042\035\052\043\040\062\047\063" +
    "\046\001\002\000\026\026\044\027\045\031\036\032\043" +
    "\033\035\034\042\035\052\043\040\062\047\063\046\001" +
    "\002\000\026\026\044\027\045\031\036\032\043\033\035" +
    "\034\042\035\052\043\040\062\047\063\046\001\002\000" +
    "\026\026\044\027\045\031\036\032\043\033\035\034\042" +
    "\035\052\043\040\062\047\063\046\001\002\000\026\026" +
    "\044\027\045\031\036\032\043\033\035\034\042\035\052" +
    "\043\040\062\047\063\046\001\002\000\026\026\044\027" +
    "\045\031\036\032\043\033\035\034\042\035\052\043\040" +
    "\062\047\063\046\001\002\000\026\026\044\027\045\031" +
    "\036\032\043\033\035\034\042\035\052\043\040\062\047" +
    "\063\046\001\002\000\026\026\044\027\045\031\036\032" +
    "\043\033\035\034\042\035\052\043\040\062\047\063\046" +
    "\001\002\000\026\026\044\027\045\031\036\032\043\033" +
    "\035\034\042\035\052\043\040\062\047\063\046\001\002" +
    "\000\026\026\044\027\045\031\036\032\043\033\035\034" +
    "\042\035\052\043\040\062\047\063\046\001\002\000\026" +
    "\026\044\027\045\031\036\032\043\033\035\034\042\035" +
    "\052\043\040\062\047\063\046\001\002\000\026\026\044" +
    "\027\045\031\036\032\043\033\035\034\042\035\052\043" +
    "\040\062\047\063\046\001\002\000\026\026\044\027\045" +
    "\031\036\032\043\033\035\034\042\035\052\043\040\062" +
    "\047\063\046\001\002\000\026\026\044\027\045\031\036" +
    "\032\043\033\035\034\042\035\052\043\040\062\047\063" +
    "\046\001\002\000\046\042\067\043\055\044\064\045\065" +
    "\046\056\047\061\051\uff87\052\uff87\053\uff87\054\uff87\056" +
    "\uff87\057\uff87\060\uff87\061\uff87\064\uff87\067\uff87\070\uff87" +
    "\071\uff87\001\002\000\046\042\067\043\055\044\064\045" +
    "\065\046\056\047\061\051\063\052\066\053\057\054\062" +
    "\056\072\057\070\060\uff85\061\uff85\064\uff85\067\uff85\070" +
    "\uff85\071\uff85\001\002\000\046\042\067\043\055\044\064" +
    "\045\065\046\056\047\061\051\uff86\052\uff86\053\uff86\054" +
    "\uff86\056\uff86\057\uff86\060\uff86\061\uff86\064\uff86\067\uff86" +
    "\070\uff86\071\uff86\001\002\000\046\042\uff92\043\uff92\044" +
    "\064\045\065\046\056\047\061\051\uff92\052\uff92\053\uff92" +
    "\054\uff92\056\uff92\057\uff92\060\uff92\061\uff92\064\uff92\067" +
    "\uff92\070\uff92\071\uff92\001\002\000\046\042\067\043\055" +
    "\044\064\045\065\046\056\047\061\051\uff8a\052\uff8a\053" +
    "\057\054\062\056\072\057\070\060\uff8a\061\uff8a\064\uff8a" +
    "\067\uff8a\070\uff8a\071\uff8a\001\002\000\046\042\uff8f\043" +
    "\uff8f\044\uff8f\045\uff8f\046\056\047\uff8f\051\uff8f\052\uff8f" +
    "\053\uff8f\054\uff8f\056\uff8f\057\uff8f\060\uff8f\061\uff8f\064" +
    "\uff8f\067\uff8f\070\uff8f\071\uff8f\001\002\000\046\042\uff90" +
    "\043\uff90\044\uff90\045\uff90\046\056\047\uff90\051\uff90\052" +
    "\uff90\053\uff90\054\uff90\056\uff90\057\uff90\060\uff90\061\uff90" +
    "\064\uff90\067\uff90\070\uff90\071\uff90\001\002\000\046\042" +
    "\067\043\055\044\064\045\065\046\056\047\061\051\uff8b" +
    "\052\uff8b\053\057\054\062\056\072\057\070\060\uff8b\061" +
    "\uff8b\064\uff8b\067\uff8b\070\uff8b\071\uff8b\001\002\000\046" +
    "\042\067\043\055\044\064\045\065\046\056\047\061\051" +
    "\uff88\052\uff88\053\uff88\054\uff88\056\uff88\057\uff88\060\uff88" +
    "\061\uff88\064\uff88\067\uff88\070\uff88\071\uff88\001\002\000" +
    "\046\042\uff8d\043\uff8d\044\uff8d\045\uff8d\046\056\047\uff8d" +
    "\051\uff8d\052\uff8d\053\uff8d\054\uff8d\056\uff8d\057\uff8d\060" +
    "\uff8d\061\uff8d\064\uff8d\067\uff8d\070\uff8d\071\uff8d\001\002" +
    "\000\046\042\067\043\055\044\064\045\065\046\056\047" +
    "\061\051\063\052\066\053\057\054\062\056\072\057\070" +
    "\060\071\061\uff84\064\uff84\067\uff84\070\uff84\071\uff84\001" +
    "\002\000\046\042\067\043\055\044\064\045\065\046\056" +
    "\047\061\051\uff89\052\uff89\053\uff89\054\uff89\056\uff89\057" +
    "\uff89\060\uff89\061\uff89\064\uff89\067\uff89\070\uff89\071\uff89" +
    "\001\002\000\044\042\uff8e\043\uff8e\044\uff8e\045\uff8e\047" +
    "\uff8e\051\uff8e\052\uff8e\053\uff8e\054\uff8e\056\uff8e\057\uff8e" +
    "\060\uff8e\061\uff8e\064\uff8e\067\uff8e\070\uff8e\071\uff8e\001" +
    "\002\000\046\042\uff91\043\uff91\044\064\045\065\046\056" +
    "\047\061\051\uff91\052\uff91\053\uff91\054\uff91\056\uff91\057" +
    "\uff91\060\uff91\061\uff91\064\uff91\067\uff91\070\uff91\071\uff91" +
    "\001\002\000\046\042\uff94\043\uff94\044\uff94\045\uff94\046" +
    "\uff94\047\uff94\051\uff94\052\uff94\053\uff94\054\uff94\056\uff94" +
    "\057\uff94\060\uff94\061\uff94\064\uff94\067\uff94\070\uff94\071" +
    "\uff94\001\002\000\046\042\uff93\043\uff93\044\uff93\045\uff93" +
    "\046\uff93\047\uff93\051\uff93\052\uff93\053\uff93\054\uff93\056" +
    "\uff93\057\uff93\060\uff93\061\uff93\064\uff93\067\uff93\070\uff93" +
    "\071\uff93\001\002\000\030\026\044\027\045\031\036\032" +
    "\043\033\035\034\042\035\052\043\040\062\047\063\046" +
    "\064\116\001\002\000\006\064\117\067\120\001\002\000" +
    "\042\042\067\043\055\044\064\045\065\046\056\047\061" +
    "\051\063\052\066\053\057\054\062\056\072\057\070\060" +
    "\071\061\060\064\ufff5\067\ufff5\001\002\000\046\042\ufff7" +
    "\043\ufff7\044\ufff7\045\ufff7\046\ufff7\047\ufff7\051\ufff7\052" +
    "\ufff7\053\ufff7\054\ufff7\056\ufff7\057\ufff7\060\ufff7\061\ufff7" +
    "\064\ufff7\067\ufff7\070\ufff7\071\ufff7\001\002\000\046\042" +
    "\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8\047\ufff8\051\ufff8" +
    "\052\ufff8\053\ufff8\054\ufff8\056\ufff8\057\ufff8\060\ufff8\061" +
    "\ufff8\064\ufff8\067\ufff8\070\ufff8\071\ufff8\001\002\000\026" +
    "\026\044\027\045\031\036\032\043\033\035\034\042\035" +
    "\052\043\040\062\047\063\046\001\002\000\042\042\067" +
    "\043\055\044\064\045\065\046\056\047\061\051\063\052" +
    "\066\053\057\054\062\056\072\057\070\060\071\061\060" +
    "\064\ufff6\067\ufff6\001\002\000\046\042\067\043\055\044" +
    "\064\045\065\046\056\047\061\051\063\052\066\053\057" +
    "\054\062\056\072\057\070\060\uff83\061\uff83\064\uff83\067" +
    "\uff83\070\uff83\071\uff83\001\002\000\040\042\067\043\055" +
    "\044\064\045\065\046\056\047\061\051\063\052\066\053" +
    "\057\054\062\056\072\057\070\060\071\061\060\064\124" +
    "\001\002\000\046\042\uff95\043\uff95\044\uff95\045\uff95\046" +
    "\uff95\047\uff95\051\uff95\052\uff95\053\uff95\054\uff95\056\uff95" +
    "\057\uff95\060\uff95\061\uff95\064\uff95\067\uff95\070\uff95\071" +
    "\uff95\001\002\000\046\042\uff8c\043\uff8c\044\uff8c\045\uff8c" +
    "\046\uff8c\047\uff8c\051\uff8c\052\uff8c\053\uff8c\054\uff8c\056" +
    "\uff8c\057\uff8c\060\uff8c\061\uff8c\064\uff8c\067\uff8c\070\uff8c" +
    "\071\uff8c\001\002\000\016\006\006\007\005\010\004\011" +
    "\014\012\010\064\127\001\002\000\004\065\140\001\002" +
    "\000\006\064\133\067\134\001\002\000\004\035\132\001" +
    "\002\000\006\064\uffea\067\uffea\001\002\000\004\065\140" +
    "\001\002\000\014\006\006\007\005\010\004\011\014\012" +
    "\010\001\002\000\004\035\136\001\002\000\006\064\uffeb" +
    "\067\uffeb\001\002\000\024\002\uffef\003\uffef\004\uffef\005" +
    "\uffef\006\uffef\007\uffef\010\uffef\011\uffef\012\uffef\001\002" +
    "\000\044\003\165\006\006\007\005\010\004\011\014\012" +
    "\010\013\162\015\151\016\154\017\167\020\157\023\173" +
    "\024\166\025\153\030\142\035\144\066\143\001\002\000" +
    "\004\063\327\001\002\000\004\063\uffa7\001\002\000\060" +
    "\002\uffc0\003\uffc0\004\uffc0\005\uffc0\006\uffc0\007\uffc0\010" +
    "\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0" +
    "\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025" +
    "\uffc0\030\uffc0\035\uffc0\066\uffc0\001\002\000\016\036\111" +
    "\037\112\040\310\041\307\055\273\063\113\001\002\000" +
    "\050\003\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9" +
    "\013\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022" +
    "\uffb9\023\uffb9\024\uffb9\025\uffb9\030\uffb9\035\uffb9\066\uffb9" +
    "\001\002\000\050\003\uffbb\006\uffbb\007\uffbb\010\uffbb\011" +
    "\uffbb\012\uffbb\013\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb" +
    "\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\030\uffbb\035" +
    "\uffbb\066\uffbb\001\002\000\044\003\165\006\006\007\005" +
    "\010\004\011\014\012\010\013\162\015\151\016\154\017" +
    "\167\020\157\023\173\024\166\025\153\030\142\035\144" +
    "\066\326\001\002\000\004\035\033\001\002\000\004\063" +
    "\261\001\002\000\050\003\uffb8\006\uffb8\007\uffb8\010\uffb8" +
    "\011\uffb8\012\uffb8\013\uffb8\015\uffb8\016\uffb8\017\uffb8\020" +
    "\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\030\uffb8" +
    "\035\uffb8\066\uffb8\001\002\000\030\026\uffb2\027\uffb2\031" +
    "\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\043\uffb2\062\uffb2" +
    "\063\uffb2\071\uffb0\001\002\000\004\063\250\001\002\000" +
    "\004\071\247\001\002\000\050\003\uffbc\006\uffbc\007\uffbc" +
    "\010\uffbc\011\uffbc\012\uffbc\013\uffbc\015\uffbc\016\uffbc\017" +
    "\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc" +
    "\030\uffbc\035\uffbc\066\uffbc\001\002\000\004\063\220\001" +
    "\002\000\050\003\uffbe\006\uffbe\007\uffbe\010\uffbe\011\uffbe" +
    "\012\uffbe\013\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021" +
    "\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\030\uffbe\035\uffbe" +
    "\066\uffbe\001\002\000\050\003\uffba\006\uffba\007\uffba\010" +
    "\uffba\011\uffba\012\uffba\013\uffba\015\uffba\016\uffba\017\uffba" +
    "\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba\025\uffba\030" +
    "\uffba\035\uffba\066\uffba\001\002\000\004\063\211\001\002" +
    "\000\050\003\uffbd\006\uffbd\007\uffbd\010\uffbd\011\uffbd\012" +
    "\uffbd\013\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd" +
    "\022\uffbd\023\uffbd\024\uffbd\025\uffbd\030\uffbd\035\uffbd\066" +
    "\uffbd\001\002\000\050\003\uffb7\006\uffb7\007\uffb7\010\uffb7" +
    "\011\uffb7\012\uffb7\013\uffb7\015\uffb7\016\uffb7\017\uffb7\020" +
    "\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\030\uffb7" +
    "\035\uffb7\066\uffb7\001\002\000\050\003\uffaa\006\uffaa\007" +
    "\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\015\uffaa\016\uffaa" +
    "\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025" +
    "\uffaa\030\uffaa\035\uffaa\066\uffaa\001\002\000\004\071\uffae" +
    "\001\002\000\004\065\140\001\002\000\004\071\200\001" +
    "\002\000\004\071\177\001\002\000\004\071\176\001\002" +
    "\000\004\071\uffac\001\002\000\004\071\175\001\002\000" +
    "\050\003\uffab\006\uffab\007\uffab\010\uffab\011\uffab\012\uffab" +
    "\013\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021\uffab\022" +
    "\uffab\023\uffab\024\uffab\025\uffab\030\uffab\035\uffab\066\uffab" +
    "\001\002\000\050\003\uffb3\006\uffb3\007\uffb3\010\uffb3\011" +
    "\uffb3\012\uffb3\013\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3" +
    "\021\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\030\uffb3\035" +
    "\uffb3\066\uffb3\001\002\000\050\003\uffb5\006\uffb5\007\uffb5" +
    "\010\uffb5\011\uffb5\012\uffb5\013\uffb5\015\uffb5\016\uffb5\017" +
    "\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5" +
    "\030\uffb5\035\uffb5\066\uffb5\001\002\000\050\003\uffb6\006" +
    "\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6\015\uffb6" +
    "\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024" +
    "\uffb6\025\uffb6\030\uffb6\035\uffb6\066\uffb6\001\002\000\004" +
    "\016\202\001\002\000\004\063\203\001\002\000\026\026" +
    "\044\027\045\031\036\032\043\033\035\034\042\035\052" +
    "\043\040\062\047\063\046\001\002\000\040\042\067\043" +
    "\055\044\064\045\065\046\056\047\061\051\063\052\066" +
    "\053\057\054\062\056\072\057\070\060\071\061\060\064" +
    "\205\001\002\000\004\071\206\001\002\000\050\003\uffc5" +
    "\006\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\015" +
    "\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5" +
    "\024\uffc5\025\uffc5\030\uffc5\035\uffc5\066\uffc5\001\002\000" +
    "\004\071\210\001\002\000\050\003\uffad\006\uffad\007\uffad" +
    "\010\uffad\011\uffad\012\uffad\013\uffad\015\uffad\016\uffad\017" +
    "\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025\uffad" +
    "\030\uffad\035\uffad\066\uffad\001\002\000\026\026\044\027" +
    "\045\031\036\032\043\033\035\034\042\035\052\043\040" +
    "\062\047\063\046\001\002\000\040\042\067\043\055\044" +
    "\064\045\065\046\056\047\061\051\063\052\066\053\057" +
    "\054\062\056\072\057\070\060\071\061\060\064\213\001" +
    "\002\000\004\065\140\001\002\000\052\003\uffe7\006\uffe7" +
    "\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\215\015" +
    "\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7" +
    "\024\uffe7\025\uffe7\030\uffe7\035\uffe7\066\uffe7\001\002\000" +
    "\006\013\162\065\140\001\002\000\050\003\uffe9\006\uffe9" +
    "\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\015\uffe9\016" +
    "\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9" +
    "\025\uffe9\030\uffe9\035\uffe9\066\uffe9\001\002\000\050\003" +
    "\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8" +
    "\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023" +
    "\uffe8\024\uffe8\025\uffe8\030\uffe8\035\uffe8\066\uffe8\001\002" +
    "\000\026\026\044\027\045\031\036\032\043\033\035\034" +
    "\042\035\052\043\040\062\047\063\046\001\002\000\040" +
    "\042\067\043\055\044\064\045\065\046\056\047\061\051" +
    "\063\052\066\053\057\054\062\056\072\057\070\060\071" +
    "\061\060\064\222\001\002\000\004\065\223\001\002\000" +
    "\010\021\230\022\233\066\226\001\002\000\050\003\uffe6" +
    "\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\015" +
    "\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6" +
    "\024\uffe6\025\uffe6\030\uffe6\035\uffe6\066\uffe6\001\002\000" +
    "\004\066\uffe1\001\002\000\050\003\uffe4\006\uffe4\007\uffe4" +
    "\010\uffe4\011\uffe4\012\uffe4\013\uffe4\015\uffe4\016\uffe4\017" +
    "\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4" +
    "\030\uffe4\035\uffe4\066\uffe4\001\002\000\010\021\230\022" +
    "\233\066\uffe2\001\002\000\026\026\044\027\045\031\036" +
    "\032\043\033\035\034\042\035\052\043\040\062\047\063" +
    "\046\001\002\000\004\066\240\001\002\000\010\021\uffdf" +
    "\022\uffdf\066\uffdf\001\002\000\004\070\234\001\002\000" +
    "\046\003\165\006\006\007\005\010\004\011\014\012\010" +
    "\013\162\015\151\016\154\017\167\020\157\023\173\024" +
    "\166\025\153\030\142\035\144\065\140\066\uffd9\001\002" +
    "\000\044\003\165\006\006\007\005\010\004\011\014\012" +
    "\010\013\162\015\151\016\154\017\167\020\157\023\173" +
    "\024\166\025\153\030\142\035\144\066\uffdb\001\002\000" +
    "\004\066\uffda\001\002\000\050\003\uffbf\006\uffbf\007\uffbf" +
    "\010\uffbf\011\uffbf\012\uffbf\013\uffbf\015\uffbf\016\uffbf\017" +
    "\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf" +
    "\030\uffbf\035\uffbf\066\uffbf\001\002\000\050\003\uffe5\006" +
    "\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\015\uffe5" +
    "\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024" +
    "\uffe5\025\uffe5\030\uffe5\035\uffe5\066\uffe5\001\002\000\040" +
    "\042\067\043\055\044\064\045\065\046\056\047\061\051" +
    "\063\052\066\053\057\054\062\056\072\057\070\060\071" +
    "\061\060\070\242\001\002\000\052\003\165\006\006\007" +
    "\005\010\004\011\014\012\010\013\162\015\151\016\154" +
    "\017\167\020\157\021\uffdc\022\uffdc\023\173\024\166\025" +
    "\153\030\142\035\144\065\140\066\uffdc\001\002\000\050" +
    "\003\165\006\006\007\005\010\004\011\014\012\010\013" +
    "\162\015\151\016\154\017\167\020\157\021\uffde\022\uffde" +
    "\023\173\024\166\025\153\030\142\035\144\066\uffde\001" +
    "\002\000\010\021\uffdd\022\uffdd\066\uffdd\001\002\000\004" +
    "\066\uffe3\001\002\000\010\021\uffe0\022\uffe0\066\uffe0\001" +
    "\002\000\050\003\uffb4\006\uffb4\007\uffb4\010\uffb4\011\uffb4" +
    "\012\uffb4\013\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021" +
    "\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\030\uffb4\035\uffb4" +
    "\066\uffb4\001\002\000\026\026\044\027\045\031\036\032" +
    "\043\033\035\034\042\035\052\043\040\062\047\063\046" +
    "\001\002\000\040\042\067\043\055\044\064\045\065\046" +
    "\056\047\061\051\063\052\066\053\057\054\062\056\072" +
    "\057\070\060\071\061\060\064\252\001\002\000\004\065" +
    "\140\001\002\000\050\003\uffc6\006\uffc6\007\uffc6\010\uffc6" +
    "\011\uffc6\012\uffc6\013\uffc6\015\uffc6\016\uffc6\017\uffc6\020" +
    "\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\030\uffc6" +
    "\035\uffc6\066\uffc6\001\002\000\004\071\260\001\002\000" +
    "\026\026\044\027\045\031\036\032\043\033\035\034\042" +
    "\035\052\043\040\062\047\063\046\001\002\000\040\042" +
    "\067\043\055\044\064\045\065\046\056\047\061\051\063" +
    "\052\066\053\057\054\062\056\072\057\070\060\071\061" +
    "\060\071\257\001\002\000\050\003\uffb1\006\uffb1\007\uffb1" +
    "\010\uffb1\011\uffb1\012\uffb1\013\uffb1\015\uffb1\016\uffb1\017" +
    "\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1" +
    "\030\uffb1\035\uffb1\066\uffb1\001\002\000\050\003\uffaf\006" +
    "\uffaf\007\uffaf\010\uffaf\011\uffaf\012\uffaf\013\uffaf\015\uffaf" +
    "\016\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024" +
    "\uffaf\025\uffaf\030\uffaf\035\uffaf\066\uffaf\001\002\000\020" +
    "\006\006\007\005\010\004\011\014\012\010\035\266\071" +
    "\262\001\002\000\030\026\044\027\045\031\036\032\043" +
    "\033\035\034\042\035\052\043\040\062\047\063\046\071" +
    "\321\001\002\000\004\035\266\001\002\000\004\064\316" +
    "\001\002\000\004\071\275\001\002\000\004\055\273\001" +
    "\002\000\006\067\271\071\uffce\001\002\000\006\067\uffcc" +
    "\071\uffcc\001\002\000\004\035\266\001\002\000\006\067" +
    "\uffcd\071\uffcd\001\002\000\026\026\044\027\045\031\036" +
    "\032\043\033\035\034\042\035\052\043\040\062\047\063" +
    "\046\001\002\000\044\042\067\043\055\044\064\045\065" +
    "\046\056\047\061\051\063\052\066\053\057\054\062\056" +
    "\072\057\070\060\071\061\060\064\uffc4\067\uffc4\071\uffc4" +
    "\001\002\000\030\026\044\027\045\031\036\032\043\033" +
    "\035\034\042\035\052\043\040\062\047\063\046\071\276" +
    "\001\002\000\006\035\304\064\uffd3\001\002\000\040\042" +
    "\067\043\055\044\064\045\065\046\056\047\061\051\063" +
    "\052\066\053\057\054\062\056\072\057\070\060\071\061" +
    "\060\071\300\001\002\000\006\035\304\064\uffd6\001\002" +
    "\000\006\064\uffca\067\uffca\001\002\000\006\064\uffc9\067" +
    "\uffc9\001\002\000\006\064\uffd7\067\313\001\002\000\014" +
    "\036\111\037\112\040\310\041\307\055\273\001\002\000" +
    "\006\064\uffc7\067\uffc7\001\002\000\006\064\uffc8\067\uffc8" +
    "\001\002\000\026\026\044\027\045\031\036\032\043\033" +
    "\035\034\042\035\052\043\040\062\047\063\046\001\002" +
    "\000\026\026\044\027\045\031\036\032\043\033\035\034" +
    "\042\035\052\043\040\062\047\063\046\001\002\000\044" +
    "\042\067\043\055\044\064\045\065\046\056\047\061\051" +
    "\063\052\066\053\057\054\062\056\072\057\070\060\071" +
    "\061\060\064\uffc3\067\uffc3\071\uffc3\001\002\000\044\042" +
    "\067\043\055\044\064\045\065\046\056\047\061\051\063" +
    "\052\066\053\057\054\062\056\072\057\070\060\071\061" +
    "\060\064\uffc2\067\uffc2\071\uffc2\001\002\000\004\035\304" +
    "\001\002\000\006\064\uffcb\067\uffcb\001\002\000\006\064" +
    "\uffd5\067\313\001\002\000\004\065\140\001\002\000\050" +
    "\003\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013" +
    "\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8" +
    "\023\uffd8\024\uffd8\025\uffd8\030\uffd8\035\uffd8\066\uffd8\001" +
    "\002\000\006\067\271\071\uffcf\001\002\000\006\035\304" +
    "\064\uffd0\001\002\000\040\042\067\043\055\044\064\045" +
    "\065\046\056\047\061\051\063\052\066\053\057\054\062" +
    "\056\072\057\070\060\071\061\060\071\323\001\002\000" +
    "\006\035\304\064\uffd2\001\002\000\006\064\uffd4\067\313" +
    "\001\002\000\006\064\uffd1\067\313\001\002\000\060\002" +
    "\uffc1\003\uffc1\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1" +
    "\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017" +
    "\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1" +
    "\030\uffc1\035\uffc1\066\uffc1\001\002\000\030\026\044\027" +
    "\045\031\036\032\043\033\035\034\042\035\052\043\040" +
    "\062\047\063\046\064\330\001\002\000\004\071\334\001" +
    "\002\000\040\042\067\043\055\044\064\045\065\046\056" +
    "\047\061\051\063\052\066\053\057\054\062\056\072\057" +
    "\070\060\071\061\060\064\332\001\002\000\004\071\333" +
    "\001\002\000\050\003\uffa9\006\uffa9\007\uffa9\010\uffa9\011" +
    "\uffa9\012\uffa9\013\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9" +
    "\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9\030\uffa9\035" +
    "\uffa9\066\uffa9\001\002\000\050\003\uffa8\006\uffa8\007\uffa8" +
    "\010\uffa8\011\uffa8\012\uffa8\013\uffa8\015\uffa8\016\uffa8\017" +
    "\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8" +
    "\030\uffa8\035\uffa8\066\uffa8\001\002\000\024\002\uffed\003" +
    "\uffed\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed" +
    "\012\uffed\001\002\000\004\063\337\001\002\000\016\006" +
    "\006\007\005\010\004\011\014\012\010\064\340\001\002" +
    "\000\004\065\140\001\002\000\006\064\342\067\134\001" +
    "\002\000\004\065\140\001\002\000\024\002\uffee\003\uffee" +
    "\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee\012" +
    "\uffee\001\002\000\024\002\uffec\003\uffec\004\uffec\005\uffec" +
    "\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec\001\002\000" +
    "\004\071\347\001\002\000\004\063\113\001\002\000\024" +
    "\002\ufff9\003\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010" +
    "\ufff9\011\ufff9\012\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\345\000\020\002\021\003\020\004\010\005\017\017" +
    "\012\020\015\023\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\344\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\021" +
    "\026\022\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\004\023\005\017\017\012\020\015\023\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\006\040\011\052\012\047\013" +
    "\050\014\053\015\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\006\040\011\124\012" +
    "\047\013\050\014\053\015\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\006\040\011\122\012\047\013\050" +
    "\014\053\015\036\001\001\000\016\006\040\011\121\012" +
    "\047\013\050\014\053\015\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\006\040\011\107\012\047\013\050" +
    "\014\053\015\036\001\001\000\016\006\040\011\106\012" +
    "\047\013\050\014\053\015\036\001\001\000\016\006\040" +
    "\011\105\012\047\013\050\014\053\015\036\001\001\000" +
    "\016\006\040\011\104\012\047\013\050\014\053\015\036" +
    "\001\001\000\016\006\040\011\103\012\047\013\050\014" +
    "\053\015\036\001\001\000\016\006\040\011\102\012\047" +
    "\013\050\014\053\015\036\001\001\000\016\006\040\011" +
    "\101\012\047\013\050\014\053\015\036\001\001\000\016" +
    "\006\040\011\100\012\047\013\050\014\053\015\036\001" +
    "\001\000\016\006\040\011\077\012\047\013\050\014\053" +
    "\015\036\001\001\000\016\006\040\011\076\012\047\013" +
    "\050\014\053\015\036\001\001\000\016\006\040\011\075" +
    "\012\047\013\050\014\053\015\036\001\001\000\016\006" +
    "\040\011\074\012\047\013\050\014\053\015\036\001\001" +
    "\000\016\006\040\011\073\012\047\013\050\014\053\015" +
    "\036\001\001\000\016\006\040\011\072\012\047\013\050" +
    "\014\053\015\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\006\040\007\113\011\114" +
    "\012\047\013\050\014\053\015\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\006\040\011\120\012\047\013\050\014\053\015" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\127\020\130\001\001\000\004\024\334\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\136\001\001\000\004\020\134\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\006\171\015" +
    "\154\016\167\017\162\020\147\025\146\026\157\027\163" +
    "\030\155\031\145\037\144\040\151\041\160\047\170\050" +
    "\140\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\006\171\015\154\016\167\017\162\020\147" +
    "\026\236\027\163\030\155\031\145\037\144\040\151\041" +
    "\160\047\170\050\140\001\001\000\006\021\026\022\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\051" +
    "\254\052\253\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\053\206\001\001\000" +
    "\004\024\200\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\054\173\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\006\040\011\203\012\047\013\050\014\053\015\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\006\040" +
    "\011\211\012\047\013\050\014\053\015\036\001\001\000" +
    "\002\001\001\000\004\024\213\001\001\000\002\001\001" +
    "\000\006\024\216\030\215\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\006\040\011\220\012\047\013\050" +
    "\014\053\015\036\001\001\000\002\001\001\000\004\032" +
    "\223\001\001\000\012\033\230\034\226\035\224\036\231" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\035\244\036\245\001\001\000\016\006\040" +
    "\011\240\012\047\013\050\014\053\015\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\006\171\015\154\016\167\017\162\020\147\024\235\025" +
    "\234\026\157\027\163\030\155\031\145\037\144\040\151" +
    "\041\160\047\170\050\140\001\001\000\036\006\171\015" +
    "\154\016\167\017\162\020\147\026\236\027\163\030\155" +
    "\031\145\037\144\040\151\041\160\047\170\050\140\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\006\171\015\154\016\167\017" +
    "\162\020\147\024\243\025\242\026\157\027\163\030\155" +
    "\031\145\037\144\040\151\041\160\047\170\050\140\001" +
    "\001\000\036\006\171\015\154\016\167\017\162\020\147" +
    "\026\236\027\163\030\155\031\145\037\144\040\151\041" +
    "\160\047\170\050\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\006" +
    "\040\011\250\012\047\013\050\014\053\015\036\001\001" +
    "\000\002\001\001\000\004\024\252\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\006\040\011\255\012\047" +
    "\013\050\014\053\015\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\020\262\042\263" +
    "\043\264\046\266\047\267\001\001\000\016\006\040\011" +
    "\321\012\047\013\050\014\053\015\036\001\001\000\006" +
    "\046\317\047\267\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\047\271\001\001\000\002\001\001\000\016\006" +
    "\040\011\273\012\047\013\050\014\053\015\036\001\001" +
    "\000\002\001\001\000\016\006\040\011\276\012\047\013" +
    "\050\014\053\015\036\001\001\000\014\015\301\016\304" +
    "\044\314\045\300\047\305\001\001\000\002\001\001\000" +
    "\014\015\301\016\304\044\302\045\300\047\305\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\006\040\011\311\012\047\013\050\014\053\015\036\001" +
    "\001\000\016\006\040\011\310\012\047\013\050\014\053" +
    "\015\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\015\301\016\304\045\313\047\305\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\316\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\015\301\016\304" +
    "\044\324\045\300\047\305\001\001\000\002\001\001\000" +
    "\014\015\301\016\304\044\323\045\300\047\305\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\006\040\011\330\012\047\013\050\014\053\015\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\340\020\130\001\001\000" +
    "\004\024\343\001\001\000\002\001\001\000\004\024\342" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserF$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserF$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserF$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public ScannerF s;
    int index;
    WordPainter painter;
    public ParserF(ScannerF s,WordPainter painter) {
        super(s);
        this.s = s;
        this.painter = painter;
    }
    public void syntax_error(Symbol sym) {
        painter.SERROR(sym.left,sym.right);
    }
    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception {}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserF$actions {
  private final ParserF parser;

  /** Constructor */
  CUP$ParserF$actions(ParserF parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserF$do_action_part00000000(
    int                        CUP$ParserF$act_num,
    java_cup.runtime.lr_parser CUP$ParserF$parser,
    java.util.Stack            CUP$ParserF$stack,
    int                        CUP$ParserF$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserF$result;

      /* select the action based on the action number */
      switch (CUP$ParserF$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INIT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		RESULT = start_val;
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserF$parser.done_parsing();
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INIT ::= INSTSGLOBAL 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INIT",0, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTSGLOBAL ::= INSTSGLOBAL INSTGLOBAL 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTSGLOBAL",1, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTSGLOBAL ::= INSTGLOBAL 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTSGLOBAL",1, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTGLOBAL ::= CALLMAINFUNC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTGLOBAL",2, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTGLOBAL ::= DECLID 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTGLOBAL",2, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTGLOBAL ::= DECLFUNC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTGLOBAL",2, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTGLOBAL ::= error 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTGLOBAL",2, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CALLMAINFUNC ::= RW_main CALLFUNC TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CALLMAINFUNC",3, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CALLFUNC ::= TK_id TK_lpar LISTARGS TK_rpar 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CALLFUNC",4, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CALLFUNC ::= TK_id TK_lpar TK_rpar 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CALLFUNC",4, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LISTARGS ::= LISTARGS TK_comma EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LISTARGS",5, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LISTARGS ::= EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LISTARGS",5, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLID ::= TYPE INITIDS TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DECLID",13, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INITIDS ::= INITIDS TK_comma INITID 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INITIDS",15, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INITIDS ::= INITID 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INITIDS",15, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INITID ::= TK_id TK_equ EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INITID",16, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INITID ::= TK_id 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INITID",16, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLFUNC ::= TYPE TK_id TK_lpar LISTPARAMS TK_rpar ENV 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DECLFUNC",17, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLFUNC ::= RW_void TK_id TK_lpar LISTPARAMS TK_rpar ENV 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DECLFUNC",17, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLFUNC ::= TYPE TK_id TK_lpar TK_rpar ENV 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DECLFUNC",17, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLFUNC ::= RW_void TK_id TK_lpar TK_rpar ENV 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DECLFUNC",17, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LISTPARAMS ::= LISTPARAMS TK_comma TYPE TK_id 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LISTPARAMS",6, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LISTPARAMS ::= TYPE TK_id 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LISTPARAMS",6, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // IFSTRUCT ::= RW_if TK_lpar EXP TK_rpar ENV RW_else IFSTRUCT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("IFSTRUCT",22, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-6)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // IFSTRUCT ::= RW_if TK_lpar EXP TK_rpar ENV RW_else ENV 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("IFSTRUCT",22, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-6)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // IFSTRUCT ::= RW_if TK_lpar EXP TK_rpar ENV 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("IFSTRUCT",22, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SWITCHSTRUCT ::= RW_switch TK_lpar EXP TK_rpar ENVS 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("SWITCHSTRUCT",23, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ENVS ::= TK_lbrc CASESDEFAULT TK_rbrc 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ENVS",24, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ENVS ::= TK_lbrc TK_rbrc 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ENVS",24, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CASESDEFAULT ::= CASES DEFAULT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASESDEFAULT",25, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CASESDEFAULT ::= CASES 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASESDEFAULT",25, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CASESDEFAULT ::= DEFAULT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASESDEFAULT",25, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CASES ::= CASES CASE 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASES",26, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CASES ::= CASE 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASES",26, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CASE ::= RW_case EXP TK_colon INSTRUCTIONS 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASE",28, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CASE ::= RW_case EXP TK_colon ENV 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASE",28, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CASE ::= RW_case EXP TK_colon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASE",28, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DEFAULT ::= RW_default TK_colon INSTRUCTIONS 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DEFAULT",27, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DEFAULT ::= RW_default TK_colon ENV 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DEFAULT",27, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DEFAULT ::= RW_default TK_colon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DEFAULT",27, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LOOPFOR ::= RW_for TK_lpar ARGSFOR TK_rpar ENV 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOOPFOR",31, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ARGSFOR ::= INITIALIZE TK_semicolon EXP TK_semicolon UPDATESFOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARGSFOR",32, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ARGSFOR ::= INITIALIZE TK_semicolon EXP TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARGSFOR",32, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ARGSFOR ::= INITIALIZE TK_semicolon TK_semicolon UPDATESFOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARGSFOR",32, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ARGSFOR ::= TK_semicolon EXP TK_semicolon UPDATESFOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARGSFOR",32, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ARGSFOR ::= INITIALIZE TK_semicolon TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARGSFOR",32, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ARGSFOR ::= TK_semicolon EXP TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARGSFOR",32, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ARGSFOR ::= TK_semicolon TK_semicolon UPDATESFOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARGSFOR",32, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ARGSFOR ::= TK_semicolon TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARGSFOR",32, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // INITIALIZE ::= TYPE REASIGNS 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INITIALIZE",33, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // INITIALIZE ::= REASIGNS 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INITIALIZE",33, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // REASIGNS ::= REASIGNS TK_comma REASIGN 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("REASIGNS",36, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // REASIGNS ::= REASIGN 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("REASIGNS",36, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // UPDATESFOR ::= UPDATESFOR TK_comma UPDATEFOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("UPDATESFOR",34, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // UPDATESFOR ::= UPDATEFOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("UPDATESFOR",34, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // UPDATEFOR ::= INCDEC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("UPDATEFOR",35, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // UPDATEFOR ::= REASIGN 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("UPDATEFOR",35, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // UPDATEFOR ::= ADDSUB 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("UPDATEFOR",35, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LOOPWHILE ::= RW_while TK_lpar EXP TK_rpar ENV 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOOPWHILE",29, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LOOPDOWHILE ::= RW_do ENV RW_while TK_lpar EXP TK_rpar TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOOPDOWHILE",30, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-6)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // REASIGN ::= TK_id TK_equ EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("REASIGN",37, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ADDSUB ::= TK_id TK_add EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ADDSUB",12, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ADDSUB ::= TK_id TK_sub EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ADDSUB",12, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ENV ::= TK_lbrc INSTRUCTIONS TK_rbrc 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ENV",18, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ENV ::= TK_lbrc TK_rbrc 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ENV",18, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // INSTRUCTIONS ::= INSTRUCTIONS INSTRUCTION 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",19, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // INSTRUCTIONS ::= INSTRUCTION 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",19, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // INSTRUCTION ::= DECLID 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",20, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // INSTRUCTION ::= IFSTRUCT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",20, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // INSTRUCTION ::= SWITCHSTRUCT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",20, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // INSTRUCTION ::= LOOPFOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",20, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // INSTRUCTION ::= LOOPWHILE 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",20, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // INSTRUCTION ::= LOOPDOWHILE 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",20, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // INSTRUCTION ::= PRINT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",20, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // INSTRUCTION ::= ADDSUB TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",20, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // INSTRUCTION ::= REASIGN TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",20, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // INSTRUCTION ::= INCDEC TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",20, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // INSTRUCTION ::= CALLFUNC TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",20, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$0 ::= 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(tleft, tright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$0",39, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // INSTRUCTION ::= RW_return NT$0 EXP TK_semicolon 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",20, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$1 ::= 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(tleft, tright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$1",40, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // INSTRUCTION ::= RW_return NT$1 TK_semicolon 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",20, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$2 ::= 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(tleft, tright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$2",41, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // INSTRUCTION ::= RW_continue NT$2 TK_semicolon 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",20, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$3 ::= 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(tleft, tright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$3",42, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // INSTRUCTION ::= RW_break NT$3 TK_semicolon 
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",20, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // INSTRUCTION ::= error 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",20, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // PRINT ::= PRINTCOLOR TK_lpar EXP TK_rpar TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("PRINT",21, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // PRINT ::= PRINTCOLOR TK_lpar TK_rpar TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("PRINT",21, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // PRINTCOLOR ::= RW_print 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.FNC(pleft, pright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("PRINTCOLOR",38, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // TYPE ::= RW_String 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(tpleft, tpright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TYPE",14, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // TYPE ::= RW_int 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(tpleft, tpright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TYPE",14, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // TYPE ::= RW_boolean 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(tpleft, tpright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TYPE",14, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // TYPE ::= RW_char 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(tpleft, tpright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TYPE",14, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // TYPE ::= RW_double 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(tpleft, tpright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TYPE",14, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXP ::= ARITHMETICS 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXP ::= RELATIONALS 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXP ::= LOGICS 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXP ::= INCDEC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXP ::= CALLFUNC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXP ::= TK_string 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.STRING(trleft, trright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXP ::= TK_char 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.CHAR(trleft, trright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXP ::= TK_int 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.NUMBER(trleft, trright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXP ::= TK_double 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.NUMBER(trleft, trright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXP ::= TK_id 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.VARIABLE(trleft, trright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXP ::= RW_true 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW3(trleft, trright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXP ::= RW_false 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW3(trleft, trright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXP ::= TK_lpar EXP TK_rpar 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // INCDEC ::= TK_id TK_inc 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		painter.VARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INCDEC",11, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // INCDEC ::= TK_id TK_dec 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		painter.VARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INCDEC",11, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ARITHMETICS ::= EXP TK_plus EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ARITHMETICS ::= EXP TK_minus EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ARITHMETICS ::= EXP TK_mult EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ARITHMETICS ::= EXP TK_div EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ARITHMETICS ::= EXP TK_pow EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ARITHMETICS ::= EXP TK_mod EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ARITHMETICS ::= TK_minus EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // RELATIONALS ::= EXP TK_equequ EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",9, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // RELATIONALS ::= EXP TK_notequ EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",9, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // RELATIONALS ::= EXP TK_lessequ EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",9, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // RELATIONALS ::= EXP TK_moreequ EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",9, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // RELATIONALS ::= EXP TK_less EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",9, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // RELATIONALS ::= EXP TK_more EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",9, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // LOGICS ::= EXP TK_and EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOGICS",10, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // LOGICS ::= EXP TK_or EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOGICS",10, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // LOGICS ::= TK_not EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOGICS",10, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserF$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserF$do_action(
    int                        CUP$ParserF$act_num,
    java_cup.runtime.lr_parser CUP$ParserF$parser,
    java.util.Stack            CUP$ParserF$stack,
    int                        CUP$ParserF$top)
    throws java.lang.Exception
    {
              return CUP$ParserF$do_action_part00000000(
                               CUP$ParserF$act_num,
                               CUP$ParserF$parser,
                               CUP$ParserF$stack,
                               CUP$ParserF$top);
    }
}

}
